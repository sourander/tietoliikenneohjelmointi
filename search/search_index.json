{"config":{"lang":["fi"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tervetuloa kurssille","text":"<p>Oppimateriaali on tarkoitettu Kajaanin Ammattikorkeakoulun ensimm\u00e4isen vuoden opiskelijoille. Materiaali keskittyy selitt\u00e4m\u00e4\u00e4n Internetin ekosysteemin suurta kuvaa (the big picture). T\u00e4m\u00e4 avarakatseisuus tapahtuu kapean sektorin osaamisen kustannuksella: varsinaiset koodatut sovellukset voivat olla \"Hello World!\"-tasoa. Kurssi pyrkii siihen, ett\u00e4 mink\u00e4\u00e4n sortin pohjaosaamista ohjelmoinnista tai tietoliikennetekniikasta ei ole. Riitt\u00e4\u00e4, ett\u00e4 on joskus k\u00e4ytt\u00e4nyt Interneti\u00e4, jotta ymm\u00e4rt\u00e4\u00e4 kurssin kontekstin.</p>"},{"location":"#kurssin-rakenne","title":"Kurssin rakenne","text":"<ul> <li>Verkot<ul> <li>Mit\u00e4 verkot ylip\u00e4\u00e4t\u00e4ns\u00e4 ovat?</li> </ul> </li> <li>Internet<ul> <li>Millainen verkko Internet on?</li> <li>Internetin nimet ja osoitteet tiiviss\u00e4 paketissa.</li> </ul> </li> <li>Protokollat ja standardit<ul> <li>Aiempien lukujen aiheet yhdistet\u00e4\u00e4n organisaatioihin ja malleihin, jotka niit\u00e4 s\u00e4\u00e4telev\u00e4t ja kuvaavat.</li> <li>Mallit yhdistet\u00e4\u00e4n konkretiaan protokollien kautta.</li> </ul> </li> <li>Ohjelmointi<ul> <li>Ohjelmointi k\u00e4siteltyn\u00e4 nimenomaan Internetin n\u00e4k\u00f6kulmasta.</li> <li>T\u00e4m\u00e4 materiaali on kieliriippumaton yleiskatsaus.</li> </ul> </li> </ul> <p>Huomaathan, ett\u00e4 varsinaiset harjoitukset ja kurssiteht\u00e4v\u00e4t ovat muualla. Katso kurssin Moodle-sivulta tai kysy opettajalta.</p>"},{"location":"#faktavirheet","title":"Faktavirheet","text":"<p>Mik\u00e4li kurssimateriaali sis\u00e4lt\u00e4\u00e4 virheellist\u00e4 tietoa, tee jompi kumpi:</p> <ul> <li>Forkkaa GitHubin repository ja tarjoa Pull Request, joka sis\u00e4lt\u00e4\u00e4 korjausehdotukset.</li> <li>Ota yhteytt\u00e4 yll\u00e4pitoon ja esittele virheellisen tiedon korjaus.</li> </ul>"},{"location":"internet/komennot/","title":"Komennot","text":"<p>T\u00e4m\u00e4 sivu ker\u00e4\u00e4 yhteen komennot, jotka ovat hy\u00f6dyllisi\u00e4 Internetiin liittyvien nimien, osoitteiden, porttien, latenssien ja muun selvitt\u00e4misess\u00e4 sek\u00e4 tarjoaa yhden tai kahden rivin esimerkit niiden ajamisesta.</p> <p>Aja kaikki alla olevat komennot komentokehotteessa, joka on mieluiten Windowsissa Git Bash, Linuxissa esimerkiksi Bash ja macOS:ss\u00e4 sen nykyinen default Zsh.</p> <p>Mik\u00e4li tarvitset komennon ajamiseen apua, kokeile sen omaa helppi\u00e4.</p> <pre><code># Windows (Git Bash)\n$ komento --help\n$ komento /?\n\n# Linux/macOS\n$ man komento\n</code></pre> <p>Huomaathan, ett\u00e4 voit ajaa komentoja my\u00f6s esimerkiksi virtuaalikoneessa. Virtuaalikoneiden ohessa toinen vaihtoehto on ajaa komennot Online-palveluiden avulla. N\u00e4ist\u00e4 yksi mielenkiintoinen vaihtoehto ovat erilaiset Looking Glass -palvelut. N\u00e4m\u00e4 ovat palvelimia, jotka tarjoavat k\u00e4ytt\u00e4jilleen mahdollisuuden ajaa komentoja operaattorin (reitittimen) n\u00e4k\u00f6kulmasta. N\u00e4it\u00e4 palveluita on listattuna sivustolla LookingGlass.org</p> <p>Sivuston kautta voi l\u00f6yt\u00e4\u00e4 itsens\u00e4 esimerkiksi Telia Looking Glass-sivulle, jolla voit ajaa BGP, ping tai trace komentoja Telian n\u00e4k\u00f6kulmasta. AS-numeroita, domaineita ja IP-osoitteita voit penkoa seuraavien palveluiden avulla:</p> <ul> <li>Hurricane Electric BGP Toolkit<ul> <li>Oma IP-osoite</li> <li>Oma IP-verkko</li> <li>Oma AS-numero</li> </ul> </li> <li>PeeringDB<ul> <li>Tietoa AS-numeroista</li> <li>Tietoa IP-verkkojen v\u00e4lisist\u00e4 peering-sopimuksista</li> </ul> </li> <li>BGP tools<ul> <li>Oma IP, verkko ja AS-numero</li> <li>Tietoa AS-numeroista ja niiden upstreameista.</li> </ul> </li> <li>IANA Whois<ul> <li>WHOIS-tietoa domaineista (ja ip-osoitteista)</li> </ul> </li> <li>Google Admin Toolbox Dig<ul> <li>Helppo tapa tehd\u00e4 DNS-hakuja.</li> </ul> </li> </ul>"},{"location":"internet/komennot/#ping","title":"Ping","text":"<p>Ping-komento l\u00e4hett\u00e4\u00e4 ICMP-viestin tyyppi\u00e4 8 (Echo Request). Palvelin vastaa, jos vastaa, ICMP-viestill\u00e4, jonka tyyppi on 0 (Echo Reply). N\u00e4ist\u00e4 lasketaan edestakainen eli round-trip viive. Alla komento, joka l\u00e4hett\u00e4\u00e4 tasan kaksi viesti\u00e4.</p> <pre><code># Git Bash\nping -n 2 www.example.com\n\n# Linux/macOS\n$ ping -c 2 www.example.com\n</code></pre>"},{"location":"internet/komennot/#trace-route","title":"Trace route","text":"<p>Trace route hy\u00f6dynt\u00e4\u00e4 UDP-datas\u00e4hkeen Time-To-Live kentt\u00e4\u00e4, asettaen sen nousevasti arvoihin <code>(1, 2, 3, ...)</code>. Reititin, jonka kohdalla hop count ylitt\u00e4\u00e4 TTL-arvon, vastaa l\u00e4hett\u00e4j\u00e4lle ICMP-viestill\u00e4 tyyppi\u00e4 11 (Time Exceeded).</p> <pre><code># Git Bash\n$ tracert www.example.com\n\n# Linux\n$ traceroute www.example.com\n</code></pre> <p>Linuxin ja macOS:n traceroutet tukevat suurempaa m\u00e4\u00e4r\u00e4\u00e4 optioneita kuin Windowsin vastine tracert. Eri k\u00e4ytt\u00f6j\u00e4rjestelmien ja eri versioiden v\u00e4leill\u00e4 voi silti olla eroja. T\u00e4m\u00e4n kirjoitushetkell\u00e4 Ubuntu 22.04 ja macOS 13.5.2 tukevat alla n\u00e4kyvi\u00e4 komentoja. </p> <p>Komento probettaa vain kerran kutakin reititint\u00e4 kolmen kerran sijasta. Lis\u00e4ksi komento tulostaa, mihin AS:\u00e4\u00e4n reititin kuuluu. AS:t eli autonomoys systemit on esitelty aiemmin t\u00e4ll\u00e4 kursilla: kertaa jos et muista.</p> <pre><code># Ubuntu\n$ traceroute -A -q1 www.example.com\n\n# macOS\n$ traceroute -a -q1 www.example.com\n</code></pre>"},{"location":"internet/komennot/#arp","title":"ARP","text":"<p>ARP-protokollaa voi k\u00e4skytt\u00e4\u00e4 ty\u00f6kalulla nimelt\u00e4\u00e4n <code>arp</code>. Alla oleva komento tulostaa kaikki ARP-taulukosta l\u00f6ytyv\u00e4t entryt.</p> <pre><code># Git Bash/macOS\narp -a\n\n# Linux\narp\n</code></pre> <p>Ty\u00f6kalulla voi my\u00f6s lis\u00e4t\u00e4 ja poistaa entryj\u00e4.</p>"},{"location":"internet/komennot/#name-server-lookup","title":"Name Server Lookup","text":"<p>Komento on vanhempi kuin alla olevat host ja dig, mutta on yh\u00e4 k\u00e4ytett\u00e4viss\u00e4 ja toimii Windowsissa vakiona.</p> <pre><code># Git Bash/Linux/macOS\n$ nslookup www.example.com\n</code></pre>"},{"location":"internet/komennot/#host","title":"Host","text":"<p>Mik\u00e4li DNS Lookup -ty\u00f6kalu <code>host</code> on asennettuna k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4ss\u00e4si, voit k\u00e4ytt\u00e4\u00e4 sit\u00e4 korvaamaan <code>nslookup</code>-komennon. Kannattaa kokeilla <code>-v</code> optionia, joka tulostaa verbose outputin.</p> <pre><code># Windows\n# N/A\n\n# Linux/macOS\n$ host www.example.com\n\n# Tee ei-rekursiivinen haku suoraan juurinimipalvelimelle\n$ host -r -v www.cnn.com a.root-servers.net\n</code></pre>"},{"location":"internet/komennot/#dig","title":"Dig","text":"<p>Mik\u00e4li DNS Lookup -ty\u00f6kalu <code>dig</code> on asennettuna k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4ss\u00e4si, my\u00f6s sit\u00e4 voi k\u00e4ytt\u00e4\u00e4 <code>nslookup</code>-komennon korvaajana.</p> <pre><code># Windows\n# ks. online-vaihtoehto t\u00e4m\u00e4n luvun ylt\u00e4\n\n# Linux/macOS\ndig www.example.com\n\n# Vaihtoehtoinen sovellus\n# ks. https://www.nlnetlabs.nl/documentation/ldns/\ndrill www.example.com\n</code></pre>"},{"location":"internet/komennot/#whois","title":"Whois","text":"<pre><code># Windows\n# Lataa: https://learn.microsoft.com/en-us/sysinternals/downloads/whois\n\n# Linux/macOS\nwhois example.com\n</code></pre>"},{"location":"internet/komennot/#netstat","title":"Netstat","text":"<pre><code># Windows\n# Kaikki TCP-yhteydet ja niiden PID (Process ID)\n# Ilman DNS-selvitett\u00e4\nnetstat -ano -p TCP\n\n# macOS\n# Sama mutta PID puuttuu\nnetstat -an -p TCP\n</code></pre>"},{"location":"internet/komennot/#lsof","title":"LSOF","text":"<p>Komento <code>lsof</code> toimii Linuxissa ja macOS:ssa. Komennon nimi tulee sanoista \"List open files\", mik\u00e4 voi tuntua irrelevantilta t\u00e4m\u00e4n kurssin osalta, mutta Linuxissa l\u00e4hes kaikki entiteetit ovat olemassa tiedostoina Linuxin file systemiss\u00e4. N\u00e4in my\u00f6s avoimet yhteydet. Ainakaan macOS:ss\u00e4 <code>netstat</code> ei palauta yhteyden PIDi\u00e4, joten <code>lsof</code> on hyv\u00e4 vaihtoehto t\u00e4h\u00e4n.</p> <pre><code>sudo lsof -i UDP:57621\n</code></pre>"},{"location":"internet/nat/","title":"NAT","text":""},{"location":"internet/nat/#nat","title":"NAT","text":"<p>IPv4 on 32-bittinen osoite, kuten aiemmissa luvuissa on todettu. T\u00e4m\u00e4 mahdollistaa noin <code>2 ** 32</code> eli <code>4 294 967 296</code> uniikkia ip-osoitetta. Aiemmassa luvussa todettiin my\u00f6s, ett\u00e4 IP-osoitteet luokitellaan puuhierarkiaan noudattaen aliverkon peitteiden avulla. T\u00e4m\u00e4 mahdollistaa kohtalaisen hienojakoisen jaottelun, jolloin k\u00e4ytt\u00e4m\u00e4tt\u00f6mi\u00e4 hukkaosoitteita ei j\u00e4\u00e4 niin paljon yli kuin niit\u00e4 j\u00e4isi A, B ja C-osoiteluokkia k\u00e4ytett\u00e4ess\u00e4. T\u00e4st\u00e4 huolimatta tarve on merkitt\u00e4v\u00e4sti suurempi kuin mit\u00e4 IPv4 mahdollistaa.</p> <p>Teht\u00e4v\u00e4</p> <p>Etsi netist\u00e4 tilastotietoa, joka pyrkii vastaamaan kysymykseen: kuinka monta laitetta on kytkettyn\u00e4 Internettiin. Vinkki: lis\u00e4\u00e4 hakusanoihin \"internet of things\".</p> <p>Teht\u00e4v\u00e4</p> <p>Laske tai tarkista reititin-modeemisi asetuksista, kuinka monta IP-osoitteellista laitetta sinun kotonasi on. Ota huomioon my\u00f6s mobiililiittymi\u00e4 k\u00e4ytt\u00e4v\u00e4t laitteet kuten puhelimet.</p> <p>NAT eli Network Address Translation on ratkaisu, tai ainakin jonkinlainen v\u00e4liaikainen ratkaisu, IP-osoitteiden riitt\u00e4m\u00e4tt\u00f6myyteen. Pidempiaikainen ratkaisu piilee IPv6-protokollassa, joka mahdollistaa <code>2 ** 128</code> eli <code>340 282 366 920 938 463 463 374 607 431 768 211 456</code> uniikkia IP-osoitetta. Voi toki olla, ett\u00e4 tietoturvasyist\u00e4 ainakin kotiverkoissa tullaan my\u00f6s IPv6:n aikana k\u00e4ytt\u00e4m\u00e4\u00e4n NAT:ia tai sit\u00e4 muistuttavia protokollia, mutta t\u00e4htitieteellisen suuri osoiteavaruus mahdollistaa my\u00f6s sen, ett\u00e4 jokaista fyysist\u00e4 osoitetta vastaa tasan yksi IPv6-osoite. NAT:n tarjoama ratkaisu perustuu siihen, ett\u00e4 privaatin IP-osoiteavaruuden kent\u00e4t vaihdetaan NAT-laatikossa laatikon itsens\u00e4 osoitteeksi. My\u00f6s portit pit\u00e4\u00e4 mapata uusiksi, ja yll\u00e4pit\u00e4\u00e4 n\u00e4ist\u00e4 muunnoksista rekisteri\u00e4, jotta p\u00e4\u00e4llek\u00e4isilt\u00e4 porteilta v\u00e4ltyt\u00e4\u00e4n. Yksitt\u00e4iset tietokoneet eiv\u00e4t keskustele k\u00e4ytt\u00e4mist\u00e4\u00e4n porteista kesken\u00e4\u00e4n, joten ilman porttien vaihtamista on mahdollista, ett\u00e4 kaksi konetta valitsee satunnaisesti saman portin k\u00e4ytt\u00f6\u00f6ns\u00e4. NAT-laatikolla ei olisi mahdollisuutta tunnistaa, kummalle koneista paketti kuuluu, ellei portteja ole vaihdettu. Alla oleva kaaviokuva esitt\u00e4\u00e4 tilannetta, jossa kaksi tietokonetta keskustelee Internetiss\u00e4 olevan koneen kanssa. Nuoliin lis\u00e4tyt luvut edustavat IP-paketin l\u00e4hteen osoitetta (eng. source.) Kohde (eng. destination) pysyy muuttamattomana.</p> <pre><code>graph LR\n    subgraph \"l\u00e4hiverkko(192.168.0.0/24)\"\n        laite1[Laite 1]\n        laite2[Laite 2]\n        laite3[Laite 3]\n        subgraph reititin-modeemi\n            nat[NAT]\n        end\n    end\n\n    laite1 --&gt;|192.168.0.7:52111| nat\n    laite2 --&gt;|192.168.0.14:52222| nat\n    laite3 --&gt;|192.168.0.16:56333| nat\n    nat --&gt;|77.223.32.192:57123| internet((Internet))\n    nat --&gt;|77.223.32.192:59642| internet((Internet))\n    nat --&gt;|77.223.32.192:55888| internet((Internet))</code></pre> <p>NAT on pident\u00e4nyt IPv4-avaruuden elinik\u00e4\u00e4, mutta t\u00e4ysin ongelmaton se ei ole. T\u00e4m\u00e4n on voinut havaita esimerkiksi verkkomoninpelej\u00e4 mobiililiittym\u00e4ll\u00e4 pelatessa. Tyypillisesti mobiililiittym\u00e4t toimivat siten, ett\u00e4 NAT tapahtuu jo operaattorin p\u00e4\u00e4ss\u00e4 kerran. Kotona oleva reititin-modeemi \"natittaa\" jo kerran \"natitetun\" viestin. T\u00e4st\u00e4 voi aiheutua ongelmia peliserverille p\u00e4\u00e4syn tai VoiP-keskustelukanavan k\u00e4yt\u00f6n kanssa. Erikseen aktivoitava 'Julkinen IP' poistaa operaattorin p\u00e4\u00e4ss\u00e4 tapahtuman natituksen, mik\u00e4 yleens\u00e4 helpottaa - mutta yksi NAT j\u00e4\u00e4 kuitenkin j\u00e4ljelle. NAT on OSI-mallin kerrosten kannalta ongelmallinen. NAT itsess\u00e4\u00e4n on OSI:n kerroksen 3, eli Networkin, protokolla, mutta sill\u00e4 on todella vahva sidos itse\u00e4\u00e4n ylempien kerrosten toteutukseen: se nimitt\u00e4in puuttuu payloadin sis\u00e4lt\u00f6\u00f6n koskemalla IP-osoitteisiin ja portteihin. T\u00e4m\u00e4 vaatii muun muassa virheentarkistukseen k\u00e4ytett\u00e4vien \"checksum\"-kenttien uudelleenlaskentaa. NAT on mainio esimerkki siit\u00e4, ett\u00e4 mallit ovat malleja, ja k\u00e4yt\u00e4nn\u00f6n toteutukset ovat k\u00e4yt\u00e4nn\u00f6n toteutuksia. Mik\u00e4li k\u00e4yt\u00e4nn\u00f6n toteutus vaatii, mallin on pakko taipua mukana.</p>"},{"location":"internet/nimet/","title":"Nimet","text":"<p>Edellisess\u00e4 luvussa esitellyt IP-osoitteet ovat hankalia muistaa. Ratkaisu t\u00e4h\u00e4n on antaa nimi eri IP-osoitteille, kuten <code>example.com</code> - tai viel\u00e4 tarkemmin <code>example.com.</code>. TCP/IP Domain Name System (DNS) on protokolla, joka m\u00e4\u00e4rittelee Internet-nimien nimiavaruuden (eng. name space), kuinka nimi k\u00e4\u00e4nnet\u00e4\u00e4n IP-osoitteeksi (\"resolvataan\", eng. resolve), kuinka tuloksia s\u00e4il\u00f6t\u00e4\u00e4n v\u00e4limuistissa ja niin edelleen. Protokolla on applikaatiotason-protokolla, ja hy\u00f6dynt\u00e4\u00e4 alemman kerroksen UDP-porttia 53. </p> <p>DNS on hierarkinen nimiavaruus, aivan kuten tietokoneen hakemistorakenne (<code>/kansio/alikansio/alempikansio/</code>), jossa erottimena toimii piste (<code>.</code>), ja sis\u00e4kk\u00e4iset hierarkiat listataan oikealta vasemmalle. Abstrakti esimerkki on <code>4.3.2.1.</code>, konkreettisempi esimerkki on <code>kolmanneksi-ylin.toiseksi-ylin.example.com.</code>. K\u00e4yt\u00e4nn\u00f6ss\u00e4 osoitteessa voi olla hyvinkin monta kerrosta, kuten <code>a.b.c.d.e.f.g.h.i.example.com.</code>. Puu alkaa juuresta (<code>.</code>). Mik\u00e4li halutaan tehd\u00e4 selv\u00e4ksi, ett\u00e4 annettu osoitepolku on kokonainen (Fully Qualified) eik\u00e4 osittainen (Partially Qualified), niin osoitteeseen j\u00e4tet\u00e4\u00e4n my\u00f6s juuren piste n\u00e4kyville. Vertaa n\u00e4it\u00e4 kahta: <code>a.com.</code>, <code>a.com</code>. J\u00e4lkimm\u00e4inen voi teoriassa jossakin ymp\u00e4rist\u00f6ss\u00e4 olla vain osittainen osoite, ja viitata vaikkapa polkuun <code>a.com.something.fi</code>.</p> <p><pre><code>graph TD\n    root[.] --&gt; com[.com]\n    root --&gt; fi[.fi]\n    fi --&gt; kamk[kamk.fi]\n    com --&gt; example[example.com]</code></pre> Kuvio 1: DNS-puurakenne. Kerrokset ylh\u00e4\u00e4lt\u00e4 alas ovat englanniksi: root, top-level domain (TLD), 2nd level domain (SLD).</p> <p>Kaukana historiassa Internet, tai sit\u00e4 edelt\u00e4v\u00e4 ARPAnet, oli niin pieni, ett\u00e4 nimet oli mahdollista yll\u00e4pit\u00e4\u00e4 yhdess\u00e4 tiedostossa. Linuxissa t\u00e4m\u00e4 l\u00f6ytyy yh\u00e4 tiedostosta <code>/etc/hosts</code> ja Windowsissa tiedostosta <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>. Yh\u00e4 2020-luvullakin kyseinen tiedosto on ensisijainen nimen resoluution l\u00e4hde, mik\u00e4 voi olla lokaalissa kehitt\u00e4miss\u00e4 hy\u00f6dyllinen ominaisuus. Esimerkiksi Docker lis\u00e4\u00e4 tiedostoon rivej\u00e4, jotka muistuttavat t\u00e4t\u00e4 <code>192.168.178.37  host.docker.internal</code>. T\u00e4m\u00e4 aiheutta sen, ett\u00e4 <code>host.docker.internal</code> ohjaa jatkossa osoitteeseen <code>192.168.178.37</code> eik\u00e4 osoitetta yritet\u00e4 etsi\u00e4 Internetin uumenista. Nyky\u00e4\u00e4n Internetiss\u00e4 on aivan liikaa nimi\u00e4 yksitt\u00e4isen palvelimen yll\u00e4pidett\u00e4v\u00e4ksi, joten ty\u00f6 on hajautettu.</p> <p>Teht\u00e4v\u00e4</p> <p>K\u00e4y kurkkaamassa, mit\u00e4 sinun k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4si hosts-tiedosto sis\u00e4lt\u00e4\u00e4. Eth\u00e4n muokkaa tiedostoa.</p>"},{"location":"internet/nimet/#nimien-rekisterointi","title":"Nimien rekister\u00f6inti","text":"<p>Suoraan juuressa per\u00e4\u00e4n m\u00e4\u00e4ritellyt domainit ovat verkkosivun p\u00e4\u00e4tteit\u00e4 (eng. Top-Level Domain, TLD). TLD:t m\u00e4\u00e4ritell\u00e4\u00e4n Root Zone Databasessa ja lista niist\u00e4 l\u00f6ytyy ICANN:n sivuilta. Huomaa, ett\u00e4 TLD:t\u00e4 ei tavallisesti rekister\u00f6i yksil\u00f6t; pelkk\u00e4 hakemus on satoja tuhansia, ja yll\u00e4pito kymmeni\u00e4 tuhansia euroja vuodessa. TLD:t luokitellaan maakohtaisiin (ccTLDs) ja geneerisiin (gTLD), joista ensimm\u00e4iset ovat eri maiden kaksikirjaimia maatunnuksia.</p> <p>Teht\u00e4v\u00e4</p> <p>K\u00e4y tarkistamassa ICANN:n sivuilta, kuka hallinnoi seuraavia, melko yleisi\u00e4 verkkotunnuksia: <code>.fi</code>, <code>.com</code>, <code>.ai</code>, <code>.app</code>.</p> <p>TLD:t\u00e4 hallinnoiva taho (esim. Verisign <code>.com</code>:n tapauksessa) yll\u00e4pit\u00e4\u00e4 TDL:t\u00e4, ei suinkaan yll\u00e4pid\u00e4 listaa kaikista <code>.com</code>-verkkotunnukseen p\u00e4\u00e4ttyvist\u00e4 osoitteista. </p> <p>Mik\u00e4li haluat rekister\u00f6id\u00e4 oman second-level domain-nimen, kuten <code>tietoliikenneohjelmointi.club</code> tai <code>tietoliikenneohjelmointi.com</code>, sinun tulee valita sopiva verkkotunnusv\u00e4litt\u00e4j\u00e4. Verisign ja muut TLD:t\u00e4 hallinnoivat tahot eiv\u00e4t siis rekister\u00f6i sinulle nime\u00e4, vaan ovat delegoineet tuon ty\u00f6n muille yrityksille. Kun rekister\u00f6it domainin, domainilla tarvitsee olla DNS-nimipalvelin (name server), jotta resolverit voivat l\u00f6yt\u00e4\u00e4 palveluidesi IP-osoitteet. Huomaa my\u00f6s, ett\u00e4 aliverkkotunnuksia ei tarvitse l\u00e4ht\u00f6kohtaisesti erikseen rekister\u00f6id\u00e4 (esim. <code>python.tietoliikenneohjelmointi.club</code>): mik\u00e4li omistat domainin, voit lis\u00e4t\u00e4 aliverkot itse DNS-vy\u00f6hyketiedostoon.</p> <p>Teht\u00e4v\u00e4</p> <p>K\u00e4y tutustumassa esimerkiksi GoDaddy-verkkotunnusv\u00e4litt\u00e4j\u00e4n ohjeisiin. </p> <ol> <li>L\u00f6yd\u00e4tk\u00f6 ohjeet, kuinka rekister\u00f6id\u00e4 domain ja k\u00e4ytt\u00e4\u00e4 GoDaddyn hallinnoimia nimipalvelimia? </li> <li>Ent\u00e4 kuinka toimisit, jos haluat k\u00e4ytt\u00e4\u00e4 GoDaddyn kautta rekister\u00f6idyn osoitteen kanssa AWS Route 53 -nimipalvelinta?</li> </ol>"},{"location":"internet/nimet/#nimen-ja-ipn-yhdistaminen","title":"Nimen ja IP:n yhdist\u00e4minen","text":"<p>Nimen k\u00e4\u00e4nt\u00e4minen IP-osoitteeksi vaatii asiakasohjelman (<code>DNS resolver</code>) ja palvelimen (<code>DNS (root) name server</code>). Kun kirjoitat osoitekentt\u00e4\u00e4n <code>example.com</code>, verkkoselain keskustelee Ethernet-asetuksissa m\u00e4\u00e4ritellyn resolverin kanssa. Resolveri k\u00e4ynnist\u00e4\u00e4 rekursiivisen haun, ja palauttaa IP-osoitteen, mik\u00e4li sellainen l\u00f6ytyi. K\u00e4ytetty resolveri voi olla esimerkiksi reitittimess\u00e4si, tai internetpalveluntarjoajan tiloissa, tai voit k\u00e4ytt\u00e4\u00e4 jotakin julkisesti avointa DNS-resolveria, kuten Googlea (IP-osoitteet <code>8.8.8.8</code> ja <code>8.8.4.4</code>). Mik\u00e4li haluat tarkistaa mit\u00e4 tietokoneesi k\u00e4ytt\u00e4\u00e4 nyt, voit tehd\u00e4 sen alla olevien komentojen avulla. DNS-tietueita (eng. DNS Records) yll\u00e4pidet\u00e4\u00e4n nimipalvelimilla (eng. name servers). Suurimman auktoriteetin nimipalvelimet ovat juurinimipalvelimet (eng. root name servers), jotka on nimetty muotoon: <code>a.root-servers.net</code>. Lista kaikista juurinimipalvelimista l\u00f6ytyy IANA:n sivuilta IP-osoitteineen. Root Name Server ei yll\u00e4pid\u00e4 listaa kaikista maailman osoitteista: se tiet\u00e4\u00e4 vain, mitk\u00e4 nimipalvelimet vastaavat TLD:st\u00e4. TLD:n nimipalvelin ei my\u00f6sk\u00e4\u00e4n pid\u00e4 listaa kaikista verkkotunnuksen alaisista second-level domaineista, mutta se tiet\u00e4\u00e4 miss\u00e4 on n\u00e4iden nimipalvelimet.</p> <pre><code># PowerShell\nGet-NetAdapter | Where-Object { $_.Status -eq \"Up\" } | Get-DnsClientServerAddress\n\n# Bash\ncat /etc/resolv.conf | grep \"nameserver\"\n\n# Command Prompt\nipconfig /all\n</code></pre> <p>Prosessi menee jotakuinkin n\u00e4in:</p> <ol> <li>Tietokoneesi kysyy resolverilta, miss\u00e4 on <code>www.icann.org</code></li> <li>Resolveri kysyy juurinimipalvelimelta, miss\u00e4 on <code>www.icann.org</code>. Root Name Server ei luonnollisesti tied\u00e4 t\u00e4t\u00e4, mutta osaa kertoa <code>.org</code>:n nimipalvelimet. Yksi n\u00e4ist\u00e4 on <code>a2.org.afilias-nst.info</code>, jonka A-record eli IPv4-osoite on  <code>199.19.56.1</code>.</li> <li>Resolveri kysyy <code>.org</code>:n nimipalvelimelta, miss\u00e4 on <code>www.icann.org</code>. TLD:s\u00e4 vastaava nimipalvelin ei tied\u00e4 t\u00e4t\u00e4, mutta osaa kertos <code>icann.org</code>:n nimipalvelimet. Yksi n\u00e4ist\u00e4 on <code>ns.icann.org</code>, jonka IPv4 osoite on <code>199.4.138.53</code>.</li> <li>Resolveri kysyy <code>icann.org</code> nimipalvelimelta, miss\u00e4 on <code>www.icann.org</code>. Verkkotunnuksen nimipalvelin ei my\u00f6sk\u00e4\u00e4n tied\u00e4 t\u00e4t\u00e4, mutta osaa kertoa, ett\u00e4 <code>www.icann.org</code> CNAME-record eli alias on <code>www.vip.icann.org</code>, ja yksi sen nimipalvelimista on <code>gtm1.dc.icann.org</code>, jonka A-record eli IPv4-osoite on <code>192.0.47.252</code></li> <li>Resolveri kysyy <code>gtm1.dc.icann.org</code> nimipalvelimelta, miss\u00e4 on <code>www.vip.icann.org</code>. Nimipalvelin vastaa, ett\u00e4 A-record eli IPv4-osoite on <code>192.0.32.7</code>.</li> </ol> <p>Huomaa, ett\u00e4 mik\u00e4li olet \u00e4skett\u00e4in vieraillut <code>www.icann.org</code>-sivustolla, tai <code>www.vip.icann.org</code>-sivustolla, DNS-resolveri palauttaa IPv4-osoitteen v\u00e4limuistista eik\u00e4 tee uutta kyselykierrosta. Huomaa my\u00f6s, ett\u00e4 kummatkin sivustot k\u00e4ytt\u00e4v\u00e4t samaa IP-osoitetta. Www-palvelin on konfiguroitu siten, ett\u00e4 sama IP-osoite osaa palauttaa eri sivuston k\u00e4ytt\u00e4j\u00e4lle riippuen HTTP-kyselyss\u00e4 m\u00e4\u00e4ritellyst\u00e4 osoitteesta. Mik\u00e4li yrit\u00e4t vierailla osoitteessa <code>https://192.0.32.7</code>, n\u00e4et nimenomaan <code>*.vip*</code>-sivuston.</p> <p>Teht\u00e4v\u00e4</p> <p>Miten ratkaista -ongelma: et voi ylip\u00e4\u00e4t\u00e4ns\u00e4 tehd\u00e4 ensimm\u00e4ist\u00e4 kysely\u00e4, jos et tied\u00e4 mik\u00e4 on esimerkiksi <code>a.root-servers.net</code>-juuripalvelimen IP-osoite. Selvit\u00e4, mist\u00e4 DNS resolver lukee juurinimipalvelimien osoitteet. </p> <p>Teht\u00e4v\u00e4</p> <p>Mik\u00e4li sinulla on Linux tai muuten vain dig asennettuna, kokeile ajaa:</p> <pre><code># Jos haluat n\u00e4hd\u00e4 rekursiivisen haun vaiheet alkaen root serverist\u00e4\ndig +trace @a.root-servers.net $URL\n\n# Jos haluat n\u00e4hd\u00e4 ihan vain ip-osoitteen\ndig $URL\n\n# Jos tied\u00e4t ip-osoitteen, mutta yrit\u00e4t p\u00e4\u00e4tell\u00e4 kenen se on:\ndig -x $IP\n</code></pre>"},{"location":"internet/osoitteet/","title":"Osoitteet","text":"<p>T\u00e4m\u00e4n otsakkeen alla k\u00e4yd\u00e4\u00e4n k\u00e4yt\u00e4nn\u00f6ss\u00e4 l\u00e4pi se, kuinka aiemmin mainittujen laitteiden osoitteet n\u00e4kyv\u00e4t k\u00e4ytt\u00e4j\u00e4lle, ja mist\u00e4 osatekij\u00f6ist\u00e4 numerot koostuvat. Osoitteet on helposti jaettavissa fyysisiin (OSI-mallin taso 2) ja loogisiin (taso 3).</p>"},{"location":"internet/osoitteet/#fyysinen-osoite","title":"Fyysinen osoite","text":"<p>Tietokoneen verkkokortilla (eng. network interface card, NIC) tulee olla jokin uniikki ID, eli tunnus, jolla se voidaan yksil\u00f6id\u00e4, jotta l\u00e4hiverkossa viestiminen on mahdollista. T\u00e4t\u00e4 voi verrata ihmisten kohdalla sosiaaliturvatunnukseen, mutta tosin sill\u00e4 erolla, ett\u00e4 Internetiss\u00e4 fyysisen osoitteen tulee olla globaali. Sosiaaliturvatunnukset ovat yleens\u00e4 p\u00e4tevi\u00e4 vain yhden valtion rajojen sis\u00e4ll\u00e4. Toinen merkitt\u00e4v\u00e4 ero sosiaaliturvatunnukseen on se, ett\u00e4 tietokoneessa voi olla monta eri verkkokorttia: Ethernet, Wireless Ethernet, Bluetooth ja niin edelleen. N\u00e4ill\u00e4 jokaisella tulee olla uniikki ID. Tehtaalla valmistetuilla verkkolaitteilla on tehtaalla p\u00e4\u00e4tetty ID eli MAC-osoite. Pitk\u00e4lt\u00e4 nimelt\u00e4\u00e4n MAC on monipalveluj\u00e4rjestelm\u00e4liittym\u00e4n ohjaus (eng. Media Access Control Address), mutta k\u00e4yt\u00e4nn\u00f6ss\u00e4 siit\u00e4 k\u00e4ytet\u00e4\u00e4n aina lyhennett\u00e4.</p> <p>MAC-osoite on 48-bittinen eli 6-tavuinen. Alla on esitettyn\u00e4 ASCII-representaatio, jossa on kaikki vaihtoehdot sellaisille unicast-osoitteille, jotka ovat lokaalisti hallittuja. Jos haluat generoida sattumanvaraisen MAC-osoitteen, jonka ei tarvitse olla uniikki, niin korvaa kaikki bin\u00e4\u00e4rin x:t satunnaisesti ykk\u00f6sell\u00e4 tai nollalla.</p> <pre><code># Bin\u00e4\u00e4ri\n|---------- OUI ---------||---------- NIC ----------|\nxxxxxx10-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx\n\n# Heksadesimaali\nX2-XX-XX-XX-XX-XX\ntai\nXA-XX-XX-XX-XX-XX\n</code></pre> <p>Question</p> <p>Jos sinulla on virtuaalikone, niin sill\u00e4 on todenn\u00e4k\u00f6isesti my\u00f6s virtuaalinen verkkokortti, jolloin se ei saa MAC-osoitetta tehtaalta. Mink\u00e4 MAC-osoitteen kortti saa? Miss\u00e4 skoopissa sen tulee olla uniikki? Globaalisti? Suomessa? Kajaanissa?</p> <p>Question</p> <p>Yll\u00e4 olevassa ASCII-esimerkiss\u00e4 on kaksi lyhennett\u00e4: OUI ja NIC. Ensimm\u00e4inen on valmistajan tai omistajan suhteen uniikki prefix (Organisationally Unique Identifier), j\u00e4lkimm\u00e4inen on NIC:n eli verkkortin eli yksitt\u00e4isen laitteen suhteen uniikki. Kokeile t\u00e4t\u00e4 k\u00e4yt\u00e4nn\u00f6ss\u00e4! Aja jokin alla olevista k\u00e4skyist\u00e4 k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4si mukaan, etsi haluamasi laitteen MAC-osoite, ja k\u00e4y sy\u00f6tt\u00e4m\u00e4ss\u00e4 ensimm\u00e4iset kolme oktettia (<code>XX-XX-XX</code>) Miniwebtoolin MAC Address Lookuppiin.</p> <pre><code># Windows komentokehote\nipconfig \\all\n\n# Linux bash\nip -o link | awk '$2 != \"lo:\" {print $2, $(NF-2)}'\n\n# PowerShell\nGet-NetAdapter -IncludeHidden | Select Name, MacAddress\n\n# macOS\nnetworksetup -listallhardwareports\n</code></pre>"},{"location":"internet/osoitteet/#looginen-osoite","title":"Looginen osoite","text":"<p>Jotta TCP/IP-protokollan k\u00e4ytt\u00f6 olisi mahdollista, verkkokortille on t\u00e4ytynyt osoittaa looginen osoite, joka IP-protokollan tapauksessa on IP-osoite. IPv4-osoite on 4-tavuinen eli 32-bittinen numero. Yleisin esitystapa on desimaalinumero per tavu, kuten <code>192.168.0.1</code>. Katso alla olevasta taulukosta, kuinka t\u00e4m\u00e4 k\u00e4\u00e4ntyy heksadesimaaliksi ja desimaaliksi.</p> Esitystapa IP-osoite Bin\u00e4\u00e4ri <code>11000000 10101000 00000000 00000001</code> Heksadesimaali <code>C0 A8 00 01</code> Piste-erotellut desimaalit 192.168.0.1 <p>Question</p> <p>Selvit\u00e4 sinun IPv4-osoitteesi on l\u00e4hiverkossa. T\u00e4m\u00e4 onnistuu komennoilla:</p> <pre><code># Windows komentokehote\nipconfig\n\n# Linux bash\nip -4 addr show\n\n# PowerShell\nGet-NetIPAddress -AddressFamily IPv4 | Select-Object InterfaceAlias, IPAddress\n\n# macOS\nnetworksetup -listallnetworkservices # Listaa ja hae infot (1)\nnetworksetup -getinfo \"Wi-Fi\"\n</code></pre> <ol> <li>Yksi tapa macOS:ll\u00e4 on ensin listata ylemm\u00e4ll\u00e4 komennolla kaikki network servicet, ja sitten yksi kerrallaan kutsua <code>-getinfo \"Name of the Service\"</code>.</li> </ol> <p>Teht\u00e4v\u00e4</p> <p>Tutustu IPv6:een. Miten se eroaa IPv4:st\u00e4?</p> <p>Teht\u00e4v\u00e4</p> <p>Miksi sinun kotikoneesi IP-osoite on juuri se? Oletko m\u00e4\u00e4ritellyt sen k\u00e4sin vai saanut jostain? Tutustu TCP/IP-protokollaan nimelt\u00e4\u00e4n DHCP. Mit\u00e4 ongelmia se ratkaisee?</p>"},{"location":"internet/osoitteet/#applikaation-looginen-osoite","title":"Applikaation looginen osoite","text":"<p>IP-osoitteen lis\u00e4ksi on hyv\u00e4 tiet\u00e4\u00e4, ett\u00e4 my\u00f6s applikaatiolla on oma looginen osoitteensa. TCP/IP-protokollaperheess\u00e4 n\u00e4it\u00e4 ovat portit, ja niit\u00e4 on kahta sorttia: TCP-portti ja UDP-portti. T\u00e4m\u00e4 mahdollistaa sen, ett\u00e4 yhdess\u00e4 tietokoneessa voi toimia monta applikaatiota, jotka k\u00e4yv\u00e4t keskustelua toisen tietokoneen applikaation kanssa. Internet ja ylip\u00e4\u00e4t\u00e4ns\u00e4 TCP/IP-verkot toimivat asiakas-palvelinmallia (eng. client-server) k\u00e4ytt\u00e4en. Asiakas on aina yhteyden avaava osapuoli, ja palvelin on kuunteleva osapuoli. Kun TCP-yhteys avataan, yhteys muodostuu applikaation eli portin tasolla. Mik\u00e4li sinulla on l\u00e4hiverkossa serveri <code>192.168.0.200</code>, joka kuuntelee porttia <code>22</code>, ja otat siihen TCP-protokollaa k\u00e4ytt\u00e4en useamman yhteyden, niin yhteydet m\u00e4\u00e4rittyv\u00e4t esimerkiksi alla olevan kuvan mukaisesti. IP-osoitteen ja portin muodostamasta parista k\u00e4ytet\u00e4\u00e4n termi\u00e4 socket. Huomaa, ett\u00e4 Tietokoneella 1 on kaksi yht\u00e4aikaista yhteytt\u00e4 Palvelimeen, ja paluuposti voidaan ohjata oikealle applikaatiolle nimenomaan portin avulla. Huomaathan, ett\u00e4 TCP- ja UDP-portit voivat kesken\u00e4\u00e4n jakaa saman numeron eri k\u00e4ytt\u00f6ihin. Sekaannusten v\u00e4lttelemiseksi palvelinpuolen portit on yleens\u00e4 varattu sek\u00e4 TCP:n ett\u00e4 UDP:n puolelta, vaikka protokolla k\u00e4ytt\u00e4isi vain toista - HTTP:lle on merkattu sek\u00e4 TCP/80 ett\u00e4 UDP/80, vaikka HTTP-protokolla k\u00e4ytt\u00e4\u00e4a aina TCP-protokollaa.</p> <pre><code>graph LR\n    c1[\"Tietokone 1(192.168.0.1)\"]\n    c2[\"Tietokone 2(192.168.0.2)\"]\n    src[\"Palvelin (192.168.0.200)\"]\n\n    c1 --&gt;|:50001 =&gt; :22| src\n    c1 --&gt;|:50999 =&gt; :22| src\n    c2 --&gt;|:60123 =&gt; :22| src</code></pre> <p>Palvelimille ja nimenomaan tietyille palvelimien k\u00e4ytt\u00e4mille applikaatio-tason protokollille on varattu omat portit. Tarkka lista l\u00f6ytyy IANA:n sivuilta, tai hieman helpommin luettavassa muodossa Wikipediasta. K\u00e4y kurkkaamassa mitk\u00e4 protokollat tunnistat.</p> <p>Teht\u00e4v\u00e4</p> <p>Verkkoselain t\u00e4ydent\u00e4\u00e4 oletusportin protokollan mukaan (HTTP=80, HTTPS=443), mutta kukaan ei est\u00e4 kirjoittamasta sit\u00e4 itse osoitteen per\u00e4\u00e4n. Kokeile kirjoittaa seuraavat osoitteet osoitekentt\u00e4\u00e4n, ja seuraa mit\u00e4 tapahtuu: <code>http://www.example.com:80/</code> ja <code>https://www.example.com:443/</code>.</p> <p>Yhteys on nimenomaan applikaation v\u00e4lill\u00e4, joten sek\u00e4 asiakassovellukset ett\u00e4 palvelinsovellus voivat toimia samalla tietokoneella. T\u00e4t\u00e4 varten on erikseen varattu IP-osoiteavaruus 127.0.0.0, josta useimmiten k\u00e4ytet\u00e4\u00e4n vain yht\u00e4 loopback-osoitetta 127.0.0.1 (alias <code>localhost</code>). T\u00e4m\u00e4 mahdollistaa sen, ett\u00e4 ajat omalla tietokoneellasi (esim. <code>192.168.0.123</code>) http-palvelinta, ja otat siihen yhteyden Chromella.</p> <pre><code>graph LR\nc1[\"Tietokone 1( 192.168.0.123)\"]\n\nc1 --&gt;|192.168.0.1:51111 =&gt; 127.0.01:80| c1\nc1 --&gt;|192.168.0.1:55555 =&gt; 127.0.01:80| c1\n</code></pre>"},{"location":"internet/osoitteet/#ip-osoitteiden-luokittelu","title":"IP-osoitteiden luokittelu","text":""},{"location":"internet/osoitteet/#osoiteluokat","title":"Osoiteluokat","text":"<p>32-bittisest\u00e4 IP-avaruudesta voi muodostaa yli 4 miljardia (2 potenssiin 32) uniikkia osoitetta, joten on luonnollista, ett\u00e4 verkkoa jaetaan tavalla tai toisella pienempiin osoiteluokkiin tai verkkoihin. Aikoinaan Internetiss\u00e4 oli k\u00e4yt\u00f6ss\u00e4 IP-osoiteluokat A, B C, D ja E. Vaikka osoiteluokista onkin luovuttu 90-luvun alkupuoliskolla, luokkia k\u00e4ytt\u00e4v\u00e4\u00e4n kieleen, kuten \"Class A Private Network\", t\u00f6rm\u00e4\u00e4 yh\u00e4, joten osoiteluokista on hyv\u00e4 olla tietoinen yh\u00e4 2020-luvulla. Lis\u00e4ksi alkuper\u00e4inen luokkajako on hyv\u00e4 askel kohti nykyaikaisen IP-luokittelun ymm\u00e4rryst\u00e4.</p> <p>Puolet koko IP-avaruudesta oli varattu luokalle A. Bin\u00e4\u00e4rilukuavaruus jaettiin kuin piirakka, josta luokka A sai puolet, B sai puolesta puolet, C j\u00e4ljelle j\u00e4\u00e4v\u00e4st\u00e4 puolet, ja D sek\u00e4 E jakoivat loput kahdestaan. Luokkaan A kuuluivat kaikki IP-osoitteet, joiden bin\u00e4\u00e4ri alkoi nolalla, eli IP-osoite n\u00e4ytti kokonaisuudessaan t\u00e4lt\u00e4: <code>0xxxxxx xxxxxxx xxxxxxxx xxxxxxxx</code>. Jotta koko A-luokka ei olisi vain yksi verkko, niin se jaettiin useisiin verkkoihin k\u00e4ytt\u00e4m\u00e4ll\u00e4 verkon peitett\u00e4 (eng. net mask) tai etuliitett\u00e4 (eng. network prefix). A-luokan tapauksessa verkon peite oli <code>11111111 00000000 00000000 00000000</code> eli desimaaleina <code>255.0.0.0</code>. Huomaa, ett\u00e4 peitteen 8 ensimm\u00e4ist\u00e4 bitti\u00e4 ovat ykk\u00f6si\u00e4, loput 24 nollia. K\u00e4yt\u00e4nn\u00f6ss\u00e4 A-luokan IP-osoite siis noudatti kaavaa <code>0nnnnnnn xxxxxxxx xxxxxxxx xxxxxxxx</code>, jossa <code>n</code>-kirjaimet edustavat verkkoa ja <code>x</code>-kirjaimet hostia. Koska kumpikin n\u00e4ist\u00e4 muodostaa tunnisteen, kutsutaan niit\u00e4 nimill\u00e4 verkon tunniste (eng. network ID) ja is\u00e4nt\u00e4 (eng. host ID). Verkon seitsem\u00e4n <code>n</code>-merkki\u00e4 voi vaihtaa joko nollaksi tai ykk\u00f6seksi <code>2 ** 7</code> tavalla, eli teoriassa luokan A IP-osoiteavaruuksia on 128 kappaletta.</p> <p>Luokkaan B kuuluivat j\u00e4ljelle j\u00e4\u00e4neist\u00e4 IP-osoitteista kaikki, joissa toinen merkki on 0. B-luokan IP-osoite noudattaa kaavaa eli <code>10nnnnnn nnnnnnnn xxxxxxx xxxxxxx</code>. Luokka C jatkaa samaa kaavaa: <code>10nnnnnn nnnnnnnn nnnnnnnn xxxxxxx</code>. Luokat D ja E olivat erityisk\u00e4ytt\u00f6\u00e4 varten varattuja alueita. Luokka D (<code>1110xxxx</code>) oli multicastingia varten, E (<code>1111xxxx</code>) oli varattu tutkimukseen ja kehitykseen. T\u00e4m\u00e4n ja ylemm\u00e4n kappaleen teksti on pyritty tiivist\u00e4m\u00e4\u00e4n alla olevaan taulukkoon lis\u00e4informaatiolla maustettuna, poislukien outolinnut D ja E.</p> Luokka Verkon osuus IP-osoitteesta # Verkkoa # IP-osoitetta verkossa A <code>0nnnnnnn</code> 128 16 777 216 B <code>10nnnnnn nnnnnnnn</code> 16 384 65 534 C <code>110nnnnn nnnnnnnn nnnnnnnn</code> 2 097 152 254 Warning <p>Yll\u00e4 olevan taulukon kaikki IP-osoitteet tai verkon eiv\u00e4t kuitenkaan ole k\u00e4yt\u00e4nn\u00f6ss\u00e4 mahdollisia - paitsi niille varattuun erityisk\u00e4ytt\u00f6\u00f6n. Esimerkiksi ensimm\u00e4inen A-luokan verkon ensimm\u00e4inen IP-osoite, <code>0.0.0.0</code>, on poikkeus. Itse asiassa koko <code>0.0.0.0/255.0.0.0</code> verkko on poikkeus.</p> <p>Teht\u00e4v\u00e4</p> <p>Yksi B-luokan verkko on noudattaa kaavaa <code>10111001 10101010 xxxxxxx xxxxxxx</code>. Verkkoon kuuluu 65 534 IP-osoitetta. Laske mik\u00e4 IP-osoite on ensimm\u00e4inen ja mik\u00e4 viimeinen. K\u00e4yt\u00e4 formaattina piste-eroteltuja desimaalilukuja.</p> <p>Teht\u00e4v\u00e4</p> <p>B-luokassa on noin 16 000 verkkoa ja C-luokassa noin 2 miljoonaa verkkoa, joita voisi myyd\u00e4 asiakkaille. Ota selv\u00e4\u00e4, kuinka paljon Internetiss\u00e4 on verkkokauppoja (eng. e-commerce sites), ja vertaa sit\u00e4 n\u00e4ihin lukemiin. Mille osuudelle nykyisist\u00e4 verkkokaupoista riitt\u00e4isi oma B-luokka? Kuinka moni yritys todella tarvitsee C-luokkaa eli 65 tuhatta julkista ip-osoitetta? Tarvitsevatko useimmat edes 254 osoitetta?</p>"},{"location":"internet/osoitteet/#aliverkot","title":"Aliverkot","text":"<p>Verkkojen jakaminen puu-hierarkisesti aliverkkoihin, eli aliverkottaminen (eng. subnetting), on t\u00e4rke\u00e4 askel kohti tilannetta, jossa Internetin ip-osoitteet voidaan jakaa l\u00e4hes mill\u00e4 tarkkuudella tahansa: yksi yritys voi ostaa 8, toinen 64, ja operaattori tarvitsee 64 tuhatta. Keksint\u00f6 on pohjimmiltaan hyvin yksinkertainen, kunhan ymm\u00e4rt\u00e4\u00e4 yll\u00e4 esitetyn network ID:n ja host ID:n konseptin.</p> <p>Mik\u00e4 sitten on aliverkon peite? Kuvitellaan, ett\u00e4 luokan A verkot ovat aliverkkoja, vaikka terminologia ei olisikaan historian kanssa t\u00e4ysin p\u00e4tev\u00e4. Luokan A verkon ensimm\u00e4inen tavu on muotoa <code>0nnnnnnn</code>, eli voi saada arvon 0-127, ja loput tavut sis\u00e4lt\u00e4v\u00e4t is\u00e4nt\u00e4koneelle uniikin Host ID:n. A-luokan osoitteessa ensimm\u00e4inen tavu on aina verkon osoite, loput ovat is\u00e4nn\u00e4n osoitteita. T\u00e4m\u00e4n voi kirjoittaa bin\u00e4\u00e4rimaskina muotoon <code>11111111 00000000 00000000 00000000</code>, tai desimaaleina muotoon <code>255.0.0.0</code>. Mik\u00e4li IP-osoitteen ja maskin v\u00e4lill\u00e4 suorittaa bin\u00e4\u00e4rioperaation AND, j\u00e4ljelle j\u00e4\u00e4 verkon osoite. Mik\u00e4li maskin ykk\u00f6set vaihtaa nolliksi ja nollat ykk\u00f6siksi, saa host maskin, joka olisi t\u00e4ss\u00e4 tapauksessa <code>0.255.255.255</code>.</p> <p>Aliverkon peitteen voi kirjoittaa my\u00f6s \u00e4\u00e4rimm\u00e4isen kompaktilla tavalla, eli laskemalla aliverkon peitteen ykk\u00f6set vasemmalta lukien. Luokan A aliverkossa on 8 ykk\u00f6st\u00e4, joten notaatio olisi \"/8\". T\u00e4t\u00e4 kutsutaan englanniksi termein \"CIDR notation\" tai \"slash notation\".</p> <p>Kuvitellaan, ett\u00e4 Yritys X omistaa luokan C verkon <code>11.22.33.0</code> kaikki 256 osoitetta. Aiemman otsakkeen alla m\u00e4\u00e4riteltiin, ett\u00e4 C-verkossa ensimm\u00e4iset kolme tavua m\u00e4\u00e4r\u00e4\u00e4v\u00e4t verkon osoitteen, ja viimeinen tavu m\u00e4\u00e4r\u00e4\u00e4 is\u00e4nt\u00e4koneen osoitteen. Verkon C aliverkon peite on siis <code>255.255.255.0</code>, ja koko verkon voi esitt\u00e4\u00e4 CIDR-notaatiota k\u00e4ytt\u00e4en tiiviisti muodossa <code>11.22.33.0/24</code>. Yritys X omistaa 3 konttoria: keskustan p\u00e4\u00e4konttori (HQ), Purola (PU), Lohtaja (LO) sek\u00e4 Kuurna (KU). Yhti\u00f6n tarvitsee useita julkisia IP-osoitteita, koska se py\u00f6ritt\u00e4\u00e4 useita pelipalvelimia julkiverkossa.</p> Konttori Julkisten pelipalvelimien m\u00e4\u00e4r\u00e4 HQ 103 PU 7 LO 12 KU 9 <p>Mik\u00e4li Yritys X jakaisi koko 256 osoitteen ip-avaruuden tasan nelj\u00e4\u00e4n osaan, jokaisessa aliverkossa olisi tasan 64 IP-osoitetta. T\u00e4m\u00e4 ei t\u00e4yt\u00e4 kriteereit\u00e4, koska keskustan p\u00e4\u00e4konttilla on 103 pelipalvelinta. Verkko tulee siis jakaa kesken\u00e4\u00e4n eri mittaisilla aliverkon peitteill\u00e4.</p> <ol> <li>Annetaan keskustalle puolet koko verkosta eli 128 osoitetta.</li> <li>T\u00e4m\u00e4 onnistuu lis\u00e4\u00e4m\u00e4ll\u00e4 aliverkon peitteeseen yksi ykk\u00f6nen lis\u00e4\u00e4</li> <li>Aliverkon peite on desimaaleina <code>255.255.255.128</code>.</li> <li>Aliverkon CIDR-notaatio on \"/25\".</li> <li>Annetaan muille konttoreille kullekin 1/4 j\u00e4ljelle j\u00e4\u00e4neist\u00e4 osoitteista eli 32.</li> <li>T\u00e4m\u00e4 onnistuu lis\u00e4\u00e4m\u00e4ll\u00e4 aliverkon peitteeseen kaksi ykk\u00f6st\u00e4 lis\u00e4\u00e4.</li> <li>Aliverkon peite on desimaaleina <code>255.255.255.224</code>.</li> <li>Aliverkon CIDR-notaatio on \"/27\".</li> </ol> <p>Huomaa, ett\u00e4 koska bin\u00e4\u00e4rin\u00e4 verkon voi jakaa vain kahdella jaollisiin osiin, yksi osa tulee j\u00e4\u00e4m\u00e4\u00e4n reserviin eli t\u00e4ysin k\u00e4ytt\u00e4m\u00e4tt\u00f6m\u00e4ksi alueeksi.</p> <pre><code>graph LR\n    Inter((Internet)) --&gt; r[\"Reititin(11.22.33.0/24)\"]\n    r --&gt; r1[\"HQ-Reititin(11.22.33.0/25)\"]\n    r --&gt; r2[\"PU-Reititin(11.22.33.128/27)\"]\n    r --&gt; r3[\"LO-Reititin(11.22.33.160/27)\"]\n    r --&gt; r4[\"KU-Reititin(11.22.33.192/27)\"]\n    r --&gt; r5[\"K\u00e4ytt\u00e4m\u00e4t\u00f6n alue(11.22.33.224/27)\"]\n\n    r1 --&gt; c11(\"Tietokone 11.22.33.1\")\n    r1 --&gt; c12(\"Tietokone 11.22.33.126\")</code></pre> <p>Mik\u00e4li Yritys X:n tarvitsee my\u00f6hemmin muuttaa aliverkkojen jakoja, sen tarvitsee konfiguroida omat reittitimens\u00e4 ja niiden reititystaulut uusiksi. Internetist\u00e4 katsottuna mik\u00e4\u00e4n ei muutu: jokainen <code>11.22.33.0/24</code> verkkoon kuuluva IP-osoite l\u00f6ytyy yh\u00e4 saman reitittimen takaa.</p> <p>Teht\u00e4v\u00e4</p> <p>Yksi yrityksen pelipalvelimista on \"serveri-abfh.yritysx.fi\" ja sen IP-osoite on 11.22.33.135. Vastaukset l\u00f6ytyv\u00e4t alla olevasta laatikosta, mutta \u00e4l\u00e4 huijaa! P\u00e4\u00e4ttele ja laske seuraavat:</p> <ul> <li>Miss\u00e4 konttorissa palvelin fyysisesti on?</li> <li>Mik\u00e4 on konttorin aliverkon verkon peite bin\u00e4\u00e4ri- ja desimaalimuodoissa?</li> </ul> Vastaus <p>Palvelin on Purolan konttorissa. Alla olevasta taulukosta l\u00f6ytyv\u00e4t aliverkon peite, is\u00e4nn\u00e4n peite (eng. host mask) sek\u00e4 verkon ett\u00e4 is\u00e4nn\u00e4n ID:t.</p> Bin\u00e4\u00e4ri Desimaali IP <code>00001011 00010110 00100001 10000111</code> 11.22.33.135 Aliverkon peite <code>11111111 11111111 11111111 11100000</code> 255.255.255.224 Is\u00e4nn\u00e4n peite <code>00000000 00000000 00000000 00011111</code> 0.0.0.31 Verkon ID <code>00001011 00010110 00100001 10000000</code> 11.22.33.128 Is\u00e4nn\u00e4n ID <code>00000000 00000000 00000000 00000111</code> 0.0.0.7 Jatkoteht\u00e4v\u00e4 <p>Yll\u00e4 oleva teht\u00e4v\u00e4 oli tarkoitus laskea harjoituksen vuoksi k\u00e4sin. Kokeile Yritys X:n verkon <code>11.22.33.0/24</code> jakamista yll\u00e4 olevan esimerkin mukaisiksi aliverkoiksi Internetist\u00e4 l\u00f6ytyvi\u00e4 apuja k\u00e4ytt\u00e4en. Yksi n\u00e4ist\u00e4 on Visual Subnet Calculator.</p>"},{"location":"internet/osoitteet/#internet-aliverkkoina","title":"Internet aliverkkoina","text":"<p>Mik\u00e4li ymm\u00e4rsit yll\u00e4 esitellyt IP-osoiteluokat sek\u00e4 aliverkot, on helppo ymm\u00e4rt\u00e4\u00e4 kuinka osoiteluokista on luovuttu: koko Internetist\u00e4 on tehty osoiteluokaton. Yl\u00e4tasolla on organisaatio, joka jakaa alemman tason organisaatioilla osoite-avaruudesta palasia. N\u00e4m\u00e4 organisaatiot taas jakavat omaa verkkoon aliverkoiksi ja myyd\u00e4n asiakkailleen. Mit\u00e4 n\u00e4m\u00e4 organisaatiot ovat? Se selvi\u00e4\u00e4 organisaatioita k\u00e4sittelev\u00e4ss\u00e4 luvussa tarkemmin, mutta komentoketju on esimerkiksi: IANA =&gt; RIPE NCC =&gt; Kaisanet. Kattoj\u00e4rjest\u00f6n eli IANA:n jakamat IP-osoitealueet l\u00f6ytyv\u00e4t heid\u00e4n sivuiltaan. Kaisanet voi myyd\u00e4 omistamistaan CIDR-verkoista asiakkailleen osoitteita.</p> <p>Yksitt\u00e4isen julkisen IP-osoitteen blokin saa tiet\u00e4\u00e4 alla olevalla bash-komennolla, olettaen ett\u00e4 whois-ohjelma on sinulla asennettuna. Selvit\u00e4 sinun oma julkinen ip-osoitteesi googlettamalla \"what is my ip\". Vaihtoehtoisesti voit k\u00e4ytt\u00e4\u00e4 Google Admin Toolboxin Browserinfoa</p> <pre><code>whois x.x.x.x # T\u00e4yt\u00e4 esimerkiksi oma julkinen ip-osoitteesi\n</code></pre> <p>Komennosta voi paljastua esimerkiksi, ett\u00e4 k\u00e4ytt\u00e4m\u00e4si yhteyden route on <code>77.223.32.0/19</code>, ja t\u00e4m\u00e4 kuuluu AS:\u00e4\u00e4n <code>AS13170</code>, josta voi penkoa lis\u00e4\u00e4 tietoa esimerkiksi bgp.tools-sivustolta tai PeeringDB-sivustolta. Mik\u00e4li klikkailet sivuston linkkej\u00e4, tulet l\u00f6yt\u00e4m\u00e4\u00e4n upstream-suuntaisia reitittimi\u00e4 (tai verkkoja), jotka ovat tavallista ISP:t\u00e4, kuten Kaisaneti\u00e4, paljon suurempia. N\u00e4it\u00e4 ovat Tier-1 Networkit, jotka muodostavat Internetin backbonen, ja niit\u00e4 operoivat muiden muassa AT&amp;T, Verizon ja Lumen. Internetin verkotus on onneksi k\u00e4ytt\u00e4j\u00e4n n\u00e4k\u00f6kulmasta hyvin abstrahoitu, joten Internetin \"rungon\" reitityksist\u00e4 ei tarvitse tiet\u00e4\u00e4 juuri t\u00e4m\u00e4n enemp\u00e4\u00e4.</p>"},{"location":"internet/osoitteet/#cidr-taulukko","title":"CIDR-taulukko","text":"<p>Alla taulukossa on esiteltyn\u00e4 CIDR-prefiksien skaalan keskivaiheilta otos. Voit laskea mink\u00e4 tahansa suffiksin IP-osoitem\u00e4\u00e4r\u00e4n kaavalla <code>2 ** (32 - subnet_bits)</code>, jossa <code>**</code> on potenssilaskun operaattori. Kattavampi taulukko l\u00f6ytyy RIPE NCC:n sivuilta.</p> Prefiksi IP-numeroita aliverkossa /18 16384 /19 8192 /20 4096 /21 2048 /22 1024 /23 512 /24 256 /25 128"},{"location":"internet/osoitteet/#privaatit-verkot","title":"Privaatit verkot","text":"<p>Privaatit verkot ovat sellaisia ip-osoiteavaruuksia, joita ei ole tarkoitettu kytkett\u00e4v\u00e4ksi Internetiin: niit\u00e4 saa, voi ja usein k\u00e4ytet\u00e4\u00e4nkin l\u00e4hiverkoissa. Kattava lista sek\u00e4 privaateista ett\u00e4 muista varatuista osoitteista l\u00f6ytyy IANA:n sivuilta. Alla muutama satunnaisesti valittu privaatti verkko, joka vastaa IP-osoiteluokan avaruutta.</p> CIDR IP-osoiteavaruus \"Luokka\" 10.0.0.0/8 10.0.0.0 - 10.255.255.255 A 172.16.0.0/16 172.16.0.0 - 172.16.255.255 B ... ... yhteens\u00e4 16 B:t\u00e4 ... B 172.17.0.0/16 172.31.0.0 - 172.31.255.255 B 192.168.0.0/24 192.168.0.0 - 192.168.0.255 C ... ... yhteens\u00e4 256 C:t\u00e4 ... C 192.168.255.255/24 192.168.255.0 - 192.168.255.255 C <p>Huomaa, ett\u00e4 voit jakaa ne my\u00f6s CIDR-tyylisesti muusta kohtaa poikki kuin ABC-luokkien perusteella. T\u00e4ll\u00f6in jako on IANA:n sivuston (ks. linkki ylt\u00e4) mukainen. L\u00e4hiverkon voi aliverkottaa parhaaksi katsomallaan tavalla. Alla taulukko:</p> Aliverkon peite CIDR IP-osoiteavaruus 255.0.0.0 10.0.0.0/8 10.0.0.0-10.255.255.255 255.240.0.0 172.16.0.0/12 172.16.0.0-172.31.255.255 255.255.0.0 192.168.0.0/16 192.168.0.0-192.168.255.255 <p>Teht\u00e4v\u00e4</p> <p>L\u00f6yd\u00e4tk\u00f6 yll\u00e4 olevasta listasta verkon, johon oman tietokoneesi l\u00e4hiverkon IP kuuluu? Jos et, sinulla ei kenties ole NAT-ominaisuus p\u00e4\u00e4ll\u00e4 reitittimess\u00e4. Jos t\u00e4m\u00e4 ei ole tarkoituksella, kannattaa kys\u00e4ist\u00e4 neuvoa kurssikavereilta tai tutustua reititin-modeemin k\u00e4ytt\u00f6oppaaseen. NAT esitell\u00e4\u00e4n seuraavassa luvussa.</p> <p>Teht\u00e4v\u00e4</p> <p>Mik\u00e4 on kotiverkkosi aliverkon peite? Kuinka monta tietokonetta siihen mahtuu?</p>"},{"location":"internet/uri_ja_url/","title":"URI ja URL","text":"<p>Termit URI, URL ja URN on helppo sekoittaa toisiinsa, ja usein URI:a ja URL:ia k\u00e4ytet\u00e4\u00e4nkin melko huoletta ristiin. </p> <ul> <li>URI (Uniform Resource Identifier)<ul> <li>on ylemm\u00e4n tason k\u00e4site URL:lle ja URN:lle</li> <li>on merkkijono, jolla tunnistetaan (eng. identify) rerurssi Internetiss\u00e4.</li> </ul> </li> <li>URL (Uniform Resource Locator)<ul> <li>on URI:n yksi muoto</li> <li>on merkkijono, jolla tunnistetaan ja ohjeistetaan kuinka resurssi kuuluu avata.</li> </ul> </li> <li>URN (Uniform Resource Name)<ul> <li>on URI:n yksi muoto</li> <li>on merkkijono, joka antaa uniikin ja pysyv\u00e4n tunnisteen jollekin resurssille.</li> </ul> </li> </ul> <pre><code># URL\nhttps://www.example.com\n\n# URN\nURN:NBN:fi-fe2023082198656\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>K\u00e4y Theseuksessa ja etsi hakuty\u00f6kalulla jokin, esimerkiksi Kajaanin Ammattikorkeakoulun kokoelmaan kuuluva, opinn\u00e4ytety\u00f6. Etsi mist\u00e4 l\u00f6ytyy opinn\u00e4ytety\u00f6n pysyv\u00e4 osoite ja tutki sen muotoa. Mik\u00e4 osuus tuosta merkkijonosta on URI (sen lyhimmiss\u00e4 muodossaan), mik\u00e4 URL, ja mik\u00e4 URN?</p> <p>Huomaa, ett\u00e4 URL on aina URI, koska URI on ylemm\u00e4n tason k\u00e4site. URN on my\u00f6s aina URI. URI on siis URN:n ja URL:n ylijoukko (eng. superset.) Jos piirr\u00e4t Venn-kaavion, niin URN ja URL ovat URI:n sis\u00e4ll\u00e4.</p> <p>Jos verkko-osoite sis\u00e4lt\u00e4\u00e4 protokollan (esim. <code>https://</code>) merkkijonon alussa, voit turvallisesti kutsua sit\u00e4 URL:ksi.</p>"},{"location":"internet/uri_ja_url/#urln-osatekijat","title":"URL:n osatekij\u00e4t","text":"<p>Terminologista pilkunviilausta t\u00e4rke\u00e4mp\u00e4\u00e4 lienee ymm\u00e4rt\u00e4\u00e4, mist\u00e4 URL ylip\u00e4\u00e4t\u00e4ns\u00e4 koostuu. Alla on Uniform Resource Identifier-wikist\u00e4 lainattu selite:</p> <pre><code>          userinfo       host      port\n          \u250c\u2500\u2500\u2534\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2534\u2510\n  https://john.doe@www.example.com:123/forum/questions/?tag=networking&amp;order=newest#top\n  \u2514\u2500\u252c\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u252c\u2518\n  scheme          authority                  path                  query           fragment\n</code></pre> Osaktekij\u00e4 Selite scheme Protokolla (tai access method), jota noudattaen data tulee noutaa. userinfo Muotoa <code>username:password</code>. Harvoin k\u00e4yt\u00f6ss\u00e4 HTTP(S)-protokollan kanssa, mutta mik\u00e4li URI viittaa tietokantaan, se voi hyvinkin olla muotoa: <code>mysql://username:password@host:port/database</code> host Oikealta lukien, pisteell\u00e4 erotettuna, TLD (top level domain) esim. <code>.com</code>, SLD (second level domain) esim. <code>example</code>, ja optionaalisesti alemman tasoin osoitteita (subdomain), kuten <code>a.b.c.d.e</code> tai hyvin yleinen <code>www.</code> port Protokollan portti. Selain t\u00e4ydent\u00e4\u00e4 vakion, mik\u00e4li sit\u00e4 ei ole m\u00e4\u00e4ritelty. Vakiot ovat HTTP 80, HTTPS 443, FTP 21 jne. path Projektin juuresta lukien hakemistopolku haluttuun resurssiin. Mik\u00e4li kyseess\u00e4 on kansio <code>foo/bar/</code>, niin selain etsii HTTP(S):n tapauksessa index.html-nimist\u00e4 tiedostoa. Polku voi sis\u00e4lt\u00e4\u00e4 my\u00f6s tiedostonimen, kuten <code>egg/ham/spam.php</code>. query Query alkaa kysymysmerkill\u00e4 ja sis\u00e4lt\u00e4\u00e4 et-merkill\u00e4 erotellun listan parametrej\u00e4 muodossa:  <code>&lt;parameter&gt;=&lt;value&gt;</code>. Palvelimen p\u00e4\u00e4ss\u00e4 n\u00e4m\u00e4 parsitaan ja niit\u00e4 k\u00e4sitell\u00e4\u00e4n muuttujina. fragment Fragment viittaa tiettyyn kohtaan resurssissa. Kyseess\u00e4 on ik\u00e4\u00e4n kuin kirjanmerkki. Kokeile k\u00e4yt\u00e4nn\u00f6ss\u00e4: <code>https://fi.wikipedia.org/wiki/HTTP#Pyynt\u00f6</code> <p>Huomaathan, ett\u00e4 path:ia edelt\u00e4v\u00e4t osat URL:ssa ovat case-insensitive eli eiv\u00e4t erottele pieni\u00e4 ja suuria kirjaimia toisistaan: <code>hTTpS://wWw.GoOgLe.CoM</code> on sama kuin <code>https://www.google.com</code>. Sen sijaan path on case-sensitive, joten <code>foo/BAR</code> on eri resrurssi kuin <code>foo/bar</code>.</p>"},{"location":"ohjelmointi/hakemistorakenne/","title":"Hakemistorakenne","text":""},{"location":"ohjelmointi/hakemistorakenne/#projektikansion-sisalto","title":"Projektikansion sis\u00e4lt\u00f6","text":"<p>Projektin voi j\u00e4rjest\u00e4\u00e4 usealla eri tavalla. Yksi tapa on sijoittaa yhteen hakemistoon hakemistot \"frontend\" sek\u00e4 \"backend\", jolloin niist\u00e4 tulee monorepo-tyylinen projekti.  Koko hakemisto, sis\u00e4lt\u00e4en sek\u00e4 backendin ett\u00e4 frontendin, mene samaan git-repositorioon esimerkiksi GitHubiin.</p> <pre><code>$ tree /home/user/Code/$GIT_USERNAME/$GIT_PROJECT/\n/home/user/Code/gitusername/my-monorepo-project/\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 frontend       \n\u2502   \u251c\u2500\u2500 *           # HTML, CSS, JavaScript\n\u2502   \u2514\u2500\u2500 README.md \n\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 *          # Python\n\u2502   \u2514\u2500\u2500 README.md \n\u2514\u2500\u2500 README.md\n</code></pre> <p>Vaihtoehto on tietenkin <code>polyrepo</code>, jossa frontendt ja backend n\u00e4hd\u00e4\u00e4n palveluina, jotka ansaitsevat omat repositorionsa.</p> <pre><code>$ tree /home/user/Code/$GIT_USERNAME/$GIT_FRONT_PROJECT/\n/home/user/Code/gitusername/my-frontend-project/\n\u251c\u2500\u2500 site\n\u2502   \u2514\u2500\u2500 *       # HTML, CSS, JavaScript\n\u2514\u2500\u2500 README.md\n\n\n$ tree /home/user/Code/$GIT_USERNAME/$GIT_BACKEND_PROJECT/\n/home/user/Code/gitusername/my-backend-project/\n\u251c\u2500\u2500 my-app\n\u2502   \u2514\u2500\u2500 *       # Python\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Suosimme t\u00e4m\u00e4n kurssin pieniss\u00e4 harjoitteissa <code>monorepo</code>-rakennetta.</p>"},{"location":"ohjelmointi/hakemistorakenne/#backend","title":"Backend","text":"<p>Kuvitellaan Pythonilla koodattu REST API -palvelin. Palvelin palauttaa tietomallin <code>Egg</code> ja <code>Ham</code> mukaisia itemeit\u00e4 REST API-rajapinnan mukaisesti JSON-tiedostoina. Esimerkiksi kysely <code>requests.get(f\"http://{domain}:{port}/egg/1\")</code> palauttaisi <code>Egg</code>:n, jonka uniikki tunniste on <code>1</code>. Palautuva JSON voisi n\u00e4ytt\u00e4\u00e4 vaikka t\u00e4lt\u00e4: <code>{ \"id\":1, \"name\": \"Kieku Vapaan Kanan Muna\"}</code>.</p> <p>Huomaa, ett\u00e4 koodia voi my\u00f6hemmin refaktoroida ja pilkkoa pienempiin komponentteihin. Mik\u00e4li t\u00e4m\u00e4n tekee heti ongelmien ilmaannuttua, eik\u00e4 aina ongelmien kasaantua spagettiker\u00e4ksi, ty\u00f6 ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 ole edes valtavan suuri.</p> <pre><code>$ tree $GIT_PROJECT/backend/\n/home/user/Code/gitusername/my-monorepo-project/backend/\n\u251c\u2500\u2500app\n\u2502   \u2514\u2500\u2500 main.py          # K\u00e4ynnist\u00e4\u00e4 web serverin. Entry point.\n\u251c\u2500\u2500models\n\u2502   \u251c\u2500\u2500 egg.py           # M\u00e4\u00e4rittelee {Itemin} rakenteen.\n\u2502   \u2514\u2500\u2500 ham.py           # Esim. Egg(id, name)\n\u251c\u2500\u2500routes\n\u2502   \u251c\u2500\u2500 egg.py           # Entry point .../egg/* urleille\n\u2502   \u2514\u2500\u2500 ham.py           # Entry point .../han/* urleille\n\u251c\u2500\u2500db\n\u2502   \u251c\u2500\u2500 egg.py           # Database API\n\u2502   \u2514\u2500\u2500 ham.py           # Noutaa datan tietokannasta\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"ohjelmointi/hakemistorakenne/#frontend","title":"Frontend","text":"<pre><code>$ tree $GIT_PROJECT/frontend/\n/home/user/Code/gitusername/my-monorepo-project/frontend/\n\u251c\u2500\u2500site\n\u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u2514\u2500\u2500 style.cs    # View:n tyylien m\u00e4\u00e4rittely\n\u2502   \u251c\u2500\u2500 js\n\u2502   \u2502   \u251c\u2500\u2500 models\n|   |   |   \u2514\u2500\u2500 egg.js  # REST/Database API\n|   |   |   \u2514\u2500\u2500 ham.js  # Noutaa datan rajapinnasta\n\u2502   \u2502   \u2514\u2500\u2500 main.js\n\u2514\u2500\u2500 index.html          # Single Page App HTML-saitti\n\u2514\u2500\u2500 README.md                 \n</code></pre>"},{"location":"ohjelmointi/json/","title":"JSON","text":"<p>TODO JSON-tiedoston formaatti esitell\u00e4\u00e4n t\u00e4\u00e4ll\u00e4 lyhyesti.</p>"},{"location":"ohjelmointi/rest_api/","title":"REST API","text":"<p>REST on arkkitehtuurinen tyyli palveluiden rakentamiseen. Palvelua, joka on toteutettu REST-tyylin mukaisesti, kutsutaan sanalla RESTful. REST ei sin\u00e4ns\u00e4 vaadi, ett\u00e4 sen on hy\u00f6dynnett\u00e4v\u00e4 nimenomaan HTTP-protokollaa, mutta k\u00e4yt\u00e4nn\u00f6n tasolla REST:iin t\u00f6rm\u00e4\u00e4 nimenomaan HTTP:n yhteydess\u00e4. Palvelun luoja saattaa joitakin resursseja k\u00e4ytt\u00e4jien saataville URI:n avulla. REST mahdollistaa n\u00e4iden resurssien luomisen (create), lukemisen (read), p\u00e4ivitt\u00e4misen (update) sek\u00e4 poistamisen (delete). Sanoista muodostuu lyhenne CRUD; t\u00e4m\u00e4 on tyypillinen lyhenne tiedon materisoinnista tietojenk\u00e4sittelyss\u00e4. Mik\u00e4li REST hy\u00f6dynt\u00e4\u00e4 HTTP:t\u00e4, k\u00e4ytet\u00e4\u00e4n HTTP-protokollan metodeja eli verbej\u00e4 suorittamaan eri operaatioita. Kaikki HTTP:n verbit on listattu esimerkiksi Mozillan sivuilla, mutta REST tarvitsee niist\u00e4 vain muutamaa, jotka on listattu alla olevassa taulukossa.</p> CRUD-operaatio REST API:n HTTP-verbi Create POST tai PUT Read GET Update PUT tai PATCH Delete DELETE <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, miten REST eroaa yhdest\u00e4 edelt\u00e4j\u00e4st\u00e4\u00e4n nimelt\u00e4\u00e4n SOAP. Voidaan sanoa, ett\u00e4 REST on v\u00e4hemm\u00e4n riippuvainen verbeist\u00e4 kuin SOAP, ja nojaa enemm\u00e4n substantiiveihin (eng. nouns). Mit\u00e4 t\u00e4m\u00e4 tarkoittaa?</p>"},{"location":"ohjelmointi/rest_api/#feikatut-esimerkit","title":"Feikatut esimerkit","text":"<p>Alla esimerkki, jossa haetaan asiakkaan 123 osoite numero 42. Miksi asiakkaalla on 42 osoitetta? Ei puututa siihen.</p>"},{"location":"ohjelmointi/rest_api/#hae","title":"Hae","text":"<p>Pyynt\u00f6:</p> <pre><code>GET /customer/123/address/42 HTTP/1.1\nHost: dummyapi.com\n</code></pre> <p>Ja vastaus:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"id\": 42,\n    \"street\": \"Tieto 1\"\n}\n</code></pre>"},{"location":"ohjelmointi/rest_api/#paivita","title":"P\u00e4ivit\u00e4","text":"<p>Osoitteessa on virhe. P\u00e4ivitet\u00e4\u00e4n <code>Tieto 1 =&gt; Taito 1</code> REST-rajapinnan yli. </p> <p>Pyynt\u00f6:</p> <pre><code>PATCH /customer/123/address/42 HTTP/1.1\nHost: dummyapi.com\n\n{\"id\": 42, street\": \"Taito 1\"}\n</code></pre> <p>Ja vastaus:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"id\": 42,\n    \"street\": \"Taito 1\"\n}\n</code></pre>"},{"location":"ohjelmointi/rest_api/#poista","title":"Poista","text":"<p>P\u00e4\u00e4tet\u00e4\u00e4n sittenkin poistaa koko osoite.</p> <p>Pyynt\u00f6:</p> <pre><code>PATCH /customer/123/address/42 HTTP/1.1\nHost: dummyapi.com\nData: {\"id\": 42, street\": \"Taito 1\"}\n</code></pre> <p>Ja vastaus:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n</code></pre>"},{"location":"ohjelmointi/rest_api/#komentorivilta-kaytto","title":"Komentorivilt\u00e4 k\u00e4ytt\u00f6","text":"<pre><code># Nouda blogipostaus, jonka id on 1.\nhttp https://jsonplaceholder.typicode.com/posts/1\n\n# Luo uusi blogipostaus (leikisti)\nhttp -f POST https://jsonplaceholder.typicode.com/posts street=\"Taito 1\"\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Yll\u00e4 olevat esimerkit on ajettu HTTPie-ohjelmalla. Sinulla ei ole t\u00e4t\u00e4 todenn\u00e4k\u00f6isesti asennettuna, mutta <code>curl</code> voi hyvinkin l\u00f6yty\u00e4. Selvit\u00e4, kuinka teet samat kyselyt <code>curl</code>:lla.</p>"},{"location":"ohjelmointi/rest_api/#mista-dataa","title":"Mist\u00e4 dataa?","text":"<p>Valtaosa mielenkiintoisesta datasta on yrit4yksille t\u00e4rke\u00e4\u00e4, strategista salaisuutta, mutta my\u00f6s avoimesti k\u00e4ytett\u00e4v\u00e4\u00e4 dataa on saatavilla. Luethan datan lisenssin tai k\u00e4ytt\u00f6ehdot tapauskohtaisesti.</p> <ul> <li>Rautatieliikenne | Digitraffic - Fintraffic</li> <li>Tieliikenne | Digitraffic - Fintraffic</li> <li>Avoin data | Tieto Traficom</li> <li>Avoin data - Ilmatieteen laitos</li> <li>Lis\u00e4ksi avoindata.fi-sivusto sis\u00e4lt\u00e4\u00e4 useiden eri l\u00e4hteiden rajapintoja koostetusti yhdess\u00e4 paikassa.</li> </ul>"},{"location":"ohjelmointi/www_ohjelmointi/","title":"WWW-ohjelmointi","text":"<p>Tietoverkkojen malleihin on jo tutustuttu aiemmissa luvuissa, joten nyt on aika tutustua tietoverkkojen applikaatiokerroksella py\u00f6riviin ohjelmistoihin: niiden rakenteeseen, ohjelmointikieliin, protokolliin. Heti alkuun on hyv\u00e4 huomioida, ett\u00e4 tietoliikenneohjelmointi ei juuri poikkea muusta ohjelmoinnista muuten, paitsi ett\u00e4 ohjelmiston oletetaan hy\u00f6dynt\u00e4v\u00e4n tietoverkkoa. TCP/IP-protokollaperhe on jo t\u00e4ll\u00e4 kurssilla tullut tutuksi. Tyypillinen 2020-luvun applikaatio hy\u00f6dynt\u00e4\u00e4 TCP/IP:t\u00e4 (ja Etherneti\u00e4) kahden tietokoneen v\u00e4liseen kommunikaatioon.</p>"},{"location":"ohjelmointi/www_ohjelmointi/#ohjelmointikielet-ja-frameworkit","title":"Ohjelmointikielet ja frameworkit","text":"<p>Tietokoneohjelmia voi luonnollisesti kirjoittaa useilla eri ohjelmointikielill\u00e4. Useissa ohjelmointikieliss\u00e4 on useita eri ohjelmistokehyksi\u00e4 (eng. framework), jotka tarjoavat puitteet sek\u00e4 valmiita ty\u00f6kaluja ja ty\u00f6skentelymalleja web-palvelun koodaamiseen. Stack Overflow mittaa kyselyiss\u00e4\u00e4n eri ohjelmistojen arvostettavuutta. Arvostettuuden m\u00e4\u00e4ritelm\u00e4 on: \"k\u00e4ytt\u00e4jist\u00e4 %-osuus, jotka ovat k\u00e4ytt\u00e4neet samaa teknologiaa viimeisen vuoden aikana, ja haluavat jatkaa sen k\u00e4ytt\u00e4mist\u00e4.\" Valitettavasti Stack Overflow anna mahdollisuutta rajata <code>n_people_must_have_experienced</code>-tyylisen dimension mukaan, joten alla on k\u00e4siteltyn\u00e4 data siten, ett\u00e4 teknologiaa on pit\u00e4nyt k\u00e4ytt\u00e4\u00e4 v\u00e4hint\u00e4\u00e4n 3 000 vastaajaa, jotta se otetaan edes mukaan. T\u00e4m\u00e4 tipauttaa esimerkiksi todella halutun ohjelmiston, Phoenixin, pois listalta, koska sit\u00e4 on k\u00e4ytt\u00e4nyt vain 1468 vastaajaa. Datan l\u00e4hde on Stack Overflow -sivuston laatiman Developer Survey 2023:n data, joka on ladattu Googlen Kaggle-sivustolta.</p> Tech K\u00e4ytt\u00e4j\u00e4\u00e4 ...joista k\u00e4ytt\u00e4isi uusiksi ... prosentteina Svelte 4753 3541 75 ASP.NET CORE 11896 8433 71 Next.js 11972 7896 66 Node.js 30626 19793 65 FastAPI 5325 3434 64 React 29137 18534 64 Blazor 3501 2136 61 NestJS 3681 2216 60 Spring Boot 8583 5106 59 Vue.js 11758 6804 58 <p>Teht\u00e4v\u00e4</p> <p>Tutustu pintapuoleisesti ainakin yll\u00e4 olevien sovellusten Top 5:een. Mill\u00e4 kielell\u00e4 framework on toteutettu? Onko kyseess\u00e4 palvelin- vai asiakaspuolen framework? K\u00e4y tutustumassa ja vertaamassa t\u00e4t\u00e4 W3Techs-sivuston kyselytuloksiin palvelinpuolen ohjelmistokielist\u00e4 sek\u00e4 asiakaspuolen ohjelmistokielist\u00e4 sek\u00e4 asiakaspuolen JavaScript-kirjastoista.</p>"},{"location":"ohjelmointi/www_ohjelmointi/#muta-ja-pastavertaukset","title":"Muta- ja pastavertaukset","text":"<p>Aivan kuten tietoliikenneverkot, my\u00f6s ohjelmistot selitet\u00e4\u00e4n usein erilaisten abstraktioiden avulla. Ohjelmistolla on aina jokin arkkitehtuuri, halusit tai et. Pahimmillaan arkkitehtuuri on big ball of mud, parhaimmillaan arkkitehtuuri on valittu ohjelmistolle sopivaksi. Huomaathan, ett\u00e4 yksik\u00e4\u00e4n arkkitehtuuri ei ole universaalisti paras. Arkkitehtuuri pit\u00e4\u00e4 valita k\u00e4ytt\u00f6tapauksen mukaan.</p> <p>Alla olevat lainaukset liittyv\u00e4t termeihin Big Ball of Mud sek\u00e4 Pasta Theory of Software. Tekstit ovat viihteellisi\u00e4, mutta antavat osviittaa siit\u00e4, mit\u00e4</p> <p>Big Ball of Mud on ep\u00e4j\u00e4rjestelm\u00e4llisesti rakennettu, r\u00f6nsyilev\u00e4, huolimattomasti kyh\u00e4tty, teipill\u00e4 ja paikkalangalla koottu spagetti-koodiviidakko. Olemme kaikki n\u00e4hneet niit\u00e4. N\u00e4m\u00e4 j\u00e4rjestelm\u00e4t osoittavat s\u00e4\u00e4ntelem\u00e4tt\u00f6m\u00e4n kasvun merkkej\u00e4 sek\u00e4 toistuvaa, pikavoittoihin t\u00e4ht\u00e4\u00e4v\u00e4\u00e4 korjaamista. Tieto jaetaan siveett\u00f6m\u00e4sti j\u00e4rjestelm\u00e4n et\u00e4isten osien v\u00e4lill\u00e4, usein siihen pisteeseen saakka, ett\u00e4 l\u00e4hes kaikki t\u00e4rke\u00e4 tieto muuttuu globaalisti saatavaksi tai duplikoiduksi. J\u00e4rjestelm\u00e4n kokonaisrakenne ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 ole koskaan ollut hyvin m\u00e4\u00e4ritelty. Jos oli, se saattaa olla haurastunut tunnistamattomaksi. Ohjelmoijat, joilla on edes ripaus arkkitehtonista harkintakyky\u00e4, v\u00e4lttelev\u00e4t n\u00e4it\u00e4 liejuja. Vain ne, joita arkkitehtuuri ei huolestuta ja jotka ehk\u00e4 tuntevat olonsa kotoisaksi p\u00e4ivitt\u00e4isten reikien paikkaamisen hitaudessa n\u00e4iss\u00e4 pett\u00e4viss\u00e4 padossa, tyytyv\u00e4t ty\u00f6skentelem\u00e4\u00e4n t\u00e4llaisissa j\u00e4rjestelmiss\u00e4. --Brian Foote, Joseph Yoder (vapaa k\u00e4\u00e4nn\u00f6s)</p> <p>Yll\u00e4 olevan lainauksen spagetti-koodilinkin alta l\u00f6ytyy teksti, josta on osa k\u00e4\u00e4nnetty suomeksi alla:</p> <p>Lasagne-koodia k\u00e4ytet\u00e4\u00e4n kuvaamaan ohjelmistoa, jolla on yksinkertainen, ymm\u00e4rrett\u00e4v\u00e4 ja kerroksellinen rakenne. Vaikka lasagne-koodi on rakenteellinen, se on valitettavasti monoliittinen eik\u00e4 helposti muokattavissa. Yritys muuttaa yht\u00e4 kerrosta k\u00e4sitteellisesti yksinkertaista on usein k\u00e4yt\u00e4nn\u00f6ss\u00e4 hyvin vaikeaa.</p> <p>Ihanteellinen ohjelmistorakenne koostuu komponenteista, jotka ovat pieni\u00e4 ja l\u00f6yh\u00e4sti kytkettyj\u00e4; t\u00e4t\u00e4 ihanteellista rakennetta kutsutaan raviolikoodiksi. Raviolikoodissa jokainen komponentti tai objekti on paketti, joka sis\u00e4lt\u00e4\u00e4 jonkinlaisia t\u00e4ytteit\u00e4 tai muuta ravintoa j\u00e4rjestelm\u00e4lle; mik\u00e4 tahansa komponentti voidaan muokata tai korvata ilman merkitt\u00e4v\u00e4\u00e4 vaikutusta muihin komponentteihin.</p>"},{"location":"ohjelmointi/www_ohjelmointi/#unitaarisesta-kerrostettuun","title":"Unitaarisesta kerrostettuun","text":"<p>Unitaarinen eli jakamaton arkkitehtuuri tarkoittaa sit\u00e4, ett\u00e4 koko ohjelmisto py\u00f6rii yhdell\u00e4 tietokoneella. Hyvin, hyvin kauan sitten historiassa tietokoneen olivat pakettiauton kokoisia m\u00f6rk\u00f6j\u00e4, joihin sy\u00f6tettiin reik\u00e4kortteja. N\u00e4m\u00e4 olivat unitaarisia j\u00e4rjestelmi\u00e4. My\u00f6hemmin n\u00e4iden tietokoneiden pysyv\u00e4 data (eng. persisted data) hajautettiin omaan j\u00e4rjestelm\u00e4\u00e4ns\u00e4 eli tietokantaan (eng. database). My\u00f6s k\u00e4ytt\u00f6liittym\u00e4 hajautettiin. Reik\u00e4korttilukijaa, n\u00e4pp\u00e4imist\u00f6\u00e4 tai muuta sy\u00f6telaitetta ei ollut en\u00e4\u00e4 pakko kiinnitt\u00e4\u00e4 suoraan keskustietokoneeseen (eng. mainframe), vaan siihen pystyi muodostamaan yhteyden asiakaskoneella (eng. client). T\u00e4t\u00e4 kutsutaan yleisesti asiakas-palvelinmalliksi (eng. client-server model). Mallissa on nimens\u00e4 mukaisesti kaksi kerrosta (asiakas ja palvelin), joten siit\u00e4 voi k\u00e4ytt\u00e4\u00e4 yleisemp\u00e4\u00e4 termi\u00e4 2-kerros (eng. two-tier) arkkitehtuuri. Ihminen, joka k\u00e4ytt\u00e4\u00e4 j\u00e4rjestelm\u00e4\u00e4, on vuorovaikutuksissa asiakasohjelman kanssa eli front endin kanssa. Taustalla toimiva palvelin on k\u00e4ytt\u00e4j\u00e4lt\u00e4 piilossa, ja siit\u00e4 voidaan k\u00e4ytt\u00e4\u00e4 termi\u00e4 back end.</p> <p>Nyt, 2020-luvulla, unitaariset j\u00e4rjestelm\u00e4t ovat ainakin tietokoneiden (ei-mikroaaltouunien) osalta poikeus. Ohjelmistot ovat l\u00e4hes aina tavalla tai toisella kerrostettuja tai hajautettuja.</p>"},{"location":"ohjelmointi/www_ohjelmointi/#n-tier","title":"N-tier","text":"<p>Kuvio 1: Kaksi- ja kolmekerroksiset arkkitehtuurit rinnakkain. Case: HTTP.</p> <p>Mik\u00e4li asiakas-palvelinmallin fronttia tai b\u00e4kki\u00e4 pilkkoo pienempiin vastuualueisiin, syntyy <code>n</code> kappaletta tasoja. Tarkka toteutus voi olla monenlainen, mutta kerrokset ovat yksi toisensa p\u00e4\u00e4ll\u00e4, joten kokonaisuus on monoliittinen. Huomaa, ett\u00e4 monoliittinen ei ole synonyymi unitaariselle. Unitaarisella sovelluksella on merkit\u00e4v\u00e4n suuri riski koitua mutapalloksi; kerrostetulla mutapalloksi kertymist\u00e4 voi est\u00e4\u00e4 siten, ett\u00e4 tarpeiden monimutkaistuessa purkaa erillisi\u00e4 kerroksia yh\u00e4 pienemmiksi kerroksiksi/moduuleiksi.</p> <p>2-kerroksinen j\u00e4rjestelm\u00e4 syntyy esimerkiksi siten, ett\u00e4 datakerros on yksinkertainen Apache HTTP Server, tai verkkolevy, joka sis\u00e4lt\u00e4\u00e4 staattisen HTML-tiedoston<code>(index.html)</code>, joka viittaa tietokantamaisesti muihin saman palvelimen tiedostoihin <code>(meemi.gif, logo.gif, about.html)</code>. Vaihtoehtoisesti datakerros voi olla jonkin sortin tietokanta, josta asiakkaan selaimessa py\u00f6riv\u00e4 JavaScript-sovellus hakee dataa.</p> <p>3-kerroksinen j\u00e4rjestelm\u00e4 pilkkoo toteutusta pienempiin osiin. Yll\u00e4 olevan vertauksen mukaisesti lasagneen tulee siis uusia kerroksia. Tyypillinen esimerkki on irrottaa data omaan tietokantaan, jolloin HTTP-palvelin voi v\u00e4litt\u00e4\u00e4 ei-staattisia nettisivuja k\u00e4ytt\u00e4j\u00e4lle, joiden sis\u00e4lt\u00f6, kuten blogipostaukset, tallennetaan tietokantaan. Bisneslogiikka on n\u00e4in irrotettu datasta eli sis\u00e4ll\u00f6st\u00e4.</p> <p>T\u00e4m\u00e4n kurssin yhteydess\u00e4 ei ole tarvetta k\u00e4ytt\u00e4\u00e4 aikaa pohtimiseen, ett\u00e4 onko j\u00e4rjestelm\u00e4 2-, 3, 4- tai n-kerroksinen, jos <code>&lt;kuvittele t\u00e4h\u00e4n hiuksia halkova poikkeusskenaario&gt;</code>. T\u00e4m\u00e4n kaltaiset teoreettiset, pieni\u00e4 nyansseja arvottavat pohdinnat kuuluvat johonkin toiseen kontekstiin. T\u00e4rkeint\u00e4 on tiedostaa, ett\u00e4 on olemassa kerroksista koostuva arkkitehtuuri. Muista: lasagne!</p>"},{"location":"ohjelmointi/www_ohjelmointi/#mvc","title":"MVC","text":"<p>Yksi ilmentym\u00e4 3-kerroksisesta arkkitehtuurista on Model-View-Controller (MVC) pattern eli sapluuna. MVC:st\u00e4 l\u00f6yt\u00e4\u00e4 helposti jopa aika k\u00e4rk\u00e4st\u00e4kin debatointia niin Stack Overflowsta, Redditist\u00e4 kuin blogeiltakin. T\u00e4m\u00e4n kurssin puitteissa riitt\u00e4\u00e4 tiet\u00e4\u00e4, ett\u00e4 1990 luvun alussa Internet oli spagettikoodista koostuva kaaos, ja MVC oli yksi ratkaisu siihen, ja MVC perustuu itse\u00e4\u00e4n reilusti vanhempaan 3-kerrosarkkitehtuuriin. Lis\u00e4ksi MVC:n perustermit on hyv\u00e4 ymm\u00e4rt\u00e4\u00e4.</p> <p>Teht\u00e4v\u00e4</p> <p>Etsi keskustelua, kommentointia tai v\u00e4ittely\u00e4 siit\u00e4, mik\u00e4 MVC on tai ei ole. Voit kokeilla my\u00f6s ChatGPT:t\u00e4, Bardia tai muuta LLM:\u00e4\u00e4.</p> <p>Komponenttien Model, View ja Controller teht\u00e4v\u00e4t ovat seuraavat:</p> <ul> <li> <p>Model: Vastuussa liiketoimintaan liittyv\u00e4n tiedon (eng. business domain) tilasta (eng. state.) Hakee tiedon tietokannasta (tai tiedostosta, tai rautakoodatuista muuttujista, tai generoi random dataa.) Model ei tied\u00e4, kuinka applikaatio haluaa piirt\u00e4\u00e4 datan: se vain palauttaa sen.</p> </li> <li> <p>View: Vastuussa liiketoimintaan liittyv\u00e4n tiedon presentaatiosta eli kuinka se n\u00e4ytet\u00e4\u00e4n katsojalle. View ei tied\u00e4, kuinka ja mist\u00e4 data on haettu. Se osaa vain piirt\u00e4\u00e4 sen, ja mahdollisesti sopeuttaa esimerkiksi eri n\u00e4ytt\u00f6kooille.</p> </li> <li>Controller: Vastuussa k\u00e4ytt\u00e4j\u00e4n sy\u00f6tteen vastaanotosta ja k\u00e4sittelyst\u00e4. Kontrolleri on varsinainen liima Modelin ja View:n v\u00e4liss\u00e4.</li> </ul> <p>Alla eritt\u00e4in raakile Python-esimerkki. Jos et ole koodannut aiemmin, silm\u00e4ile koodi l\u00e4pi. Pythonin syntaksi tulee kurssin k\u00e4yt\u00e4nn\u00f6n osiossa tutuksi, joten ei ole oletettua ett\u00e4 ymm\u00e4rr\u00e4t koodin kokonaisuudessaan juuri nyt.</p> <pre><code>class Model():\n    def __init__(self):\n        self.db = ImaginaryDatabase()\n    def get_one(id):\n        return self.db.get_one(id)\n    def get_all(self):\n        return self.db.get_all()\n\nclass View():\n    def _render(self, model):\n        return f\"&lt;p&gt;{str(model)}&lt;/p&gt;\"\n\n    def to_visual_format(self, model):\n        return self._render(model)\n\nclass Controller():\n    def __init__(self):\n        self.model = Model()\n        self.view = View()\n\n    def get_one(self, id):\n        return self.model.get_one()\n\n    def get_all(self):\n        return self.model.get_all()\n\n###### BELOW THIS LINE IS THE CLIENT. #########\n###### With web services, it would be #########\n###### a browser/javascript messaging #########\n###### over HTTP API.                 #########\n\nclass Client():\n    # Instantiate\n    controller = Controller()\n\n    # Use\n    one_row_by_id = controller.get_one(1)\n    all_rows_from_db = controller.get_all()\n</code></pre>"},{"location":"ohjelmointi/www_ohjelmointi/#kaytannon-esimerkki-kerroksista","title":"K\u00e4yt\u00e4nn\u00f6n esimerkki kerroksista","text":"<p>T\u00e4m\u00e4n kurssin puitteissa kirjoitemme front end koodia (<code>HTML + CSS + JavaScript</code>) sek\u00e4 back end koodia (esim. <code>Python</code>). Alla (Kuvio 2) on esitetty yhdenlaista tapaa kuvata valmiin tuotoksen arkkitehtuuria yleisesti. Huomaa, ett\u00e4 t\u00e4ll\u00e4 karkealle tasolla kuvattu kaavio ei ota kantaa JavaScriptin ja Pythonin sis\u00e4ll\u00e4 py\u00f6riviin moduuleihin. Kyseess\u00e4 on hyvin karkea yleiskuva komponenteista. Yhteen graafiin ei edes kannata ymp\u00e4t\u00e4 kaikkea: on n\u00e4pp\u00e4r\u00e4mp\u00e4\u00e4 piirt\u00e4\u00e4 tarpeen mukaan toinen graafi alle.</p> <ol> <li>Arkkitehtuurin vasen puoli, front end, voi noudattaa MVC:t\u00e4.</li> <li>Arkkitehtuurin oikea puoli, back end, voi noudattaa MVC:t\u00e4. T\u00e4st\u00e4 on erillinen graafi alempana (Kuvio 3).</li> </ol> <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, mit\u00e4 hy\u00f6ty\u00e4 on kerrostamisesta ja/tai modularisoinnista. T\u00e4m\u00e4 saattaa olla jo OSI-tietomallin sek\u00e4 yll\u00e4 olevan tekstin perusteella arvattavissa tai p\u00e4\u00e4telt\u00e4viss\u00e4, mutta k\u00e4y silti lukemassa aiheesta lis\u00e4\u00e4.</p> <p>Kerrostetussa arkkitehtuurissa eri nuolien v\u00e4lill\u00e4 on riippuvuus. T\u00e4m\u00e4 riippuvuus on rajapinta eli interface, jota kummankin tulee noudattaa. Kunhan rajapinta pysyy samana, laatikon sis\u00e4lt\u00f6\u00e4 voi muokata mielin m\u00e4\u00e4rin. Esimerkiksi front endin ja back endin v\u00e4lill\u00e4 rajapintana on REST API, joka k\u00e4ytt\u00e4\u00e4 tavallisia HTTP-k\u00e4skyj\u00e4. On t\u00e4ysin mahdollista vaihtaa Pythonilla koodattu back end vaikkapa Go:lla koodattuun back endiin. Sivuston toimivuus ei muutu. Koko REST API:n voi vaihtaa esimerkiksi Google Protobuffiin; t\u00e4ll\u00f6in JavaScriptin Model-p\u00e4\u00e4tyyn tulee tehd\u00e4 muutoksia, koska <code>JS &lt;--&gt; Python</code>-rajapinta on vaihtunut REST API:sta Protobuffiin. Huomaathan, ett\u00e4 t\u00e4m\u00e4 ei aiheuta muutoksia HTML- tai CSS-tiedostoihin tai Controlleri-osion logiikkaan. Kerrostamisen avulla ohjelmistoa voi siis modularisoida pieniin laatikoihin ja niiden v\u00e4lisiin rajapintoihin.</p> <p></p> <p>Kuvio 2: Front ja back endist\u00e4 koostuva WWW-sivu kaaviona. Looginen tietomalli on piirretty kuvan alle laatikkona; front endin sek\u00e4 back endin pit\u00e4\u00e4 olla kesken\u00e4\u00e4n samaa mielt\u00e4 siit\u00e4, mit\u00e4 tietoa API:n l\u00e4pi tulee ja miss\u00e4 formaatissa. T\u00e4m\u00e4 on korostamassa, ett\u00e4 <code>business domain</code> on laajempi k\u00e4site kuin yksi JavaScriptin tai Pythonin sis\u00e4ll\u00e4 oleva Model. Sek\u00e4 front ett\u00e4 back joutuvat kuitenkin omalla kielell\u00e4\u00e4n m\u00e4\u00e4rittelem\u00e4\u00e4n t\u00e4m\u00e4n loogisen tietomallin toteutuksen esimerkiksi <code>models/</code>-nimisen hakemiston tiedostoihin.</p> <p></p> <p>Kuvio 3: Ylemm\u00e4n Kuvio 2:n oikea puolisko eli backend l\u00e4hemp\u00e4\u00e4 katseltuna. Musta vertikaalinen nuoli kuvastaa frontilta saapuvan kyselyn synnytt\u00e4mien kutsujen kulkua tasojen l\u00e4pi. Oranssit katkoviivat kuvastavat <code>from models import Thingy</code>-tyylisi\u00e4 importteja. Sininen katkoviiva ja ympyr\u00e4 ovat ORM.</p> <p>Huomaa, ett\u00e4 Kuvio 3:ssa n\u00e4kyv\u00e4n ORM:n (Object Relational Mapper) toiminallisuuden voi toteuttaa data adapterin sis\u00e4\u00e4n itse koodaamalla. ORM ei siis ole pakollinen. Se on lis\u00e4tty graafiin, sill\u00e4 se tulee merkitt\u00e4v\u00e4n usein vastaan eri web frameworkien (esim. FastAPI) dokumentaatiossa ja esimerkeiss\u00e4.</p>"},{"location":"ohjelmointi/www_ohjelmointi/#arkkitehtuurit-ilman-kerroksia","title":"Arkkitehtuurit ilman kerroksia","text":"<p>Ent\u00e4p\u00e4 tilanne, jossa arkkitehtuuri ei koostukaan kerroksista? Mit\u00e4 jos se koostuu tavalla tai toisella ravioleista? T\u00e4ll\u00f6in arkkitehtuuri ei ole monoliittinen vaan hajautettu. Yll\u00e4 oleva, erillinen REST API -rajapintaa tarjoava palvelin on askel kohti t\u00e4t\u00e4 suuntaa. N\u00e4m\u00e4 hajautetut arkkitehtuurit ovat pahasti t\u00e4m\u00e4n kurssin skoopin ulkopuolella, mutta niiden olemassaolosta on jo syyt\u00e4 olla tietoinen. N\u00e4it\u00e4 ovat:</p> <ul> <li>Service-based architecture (SBA)</li> <li>Service-oriented architecture (SOA)</li> <li>Event-driven architecture (EDA)</li> <li>Microservices architecture (Microservices)</li> </ul> <p>Huomaa, ett\u00e4 n\u00e4m\u00e4 eiv\u00e4t ole huonompia tai parempi kuin kerroksista koostuvat arkkitehtuurit. J\u00e4rjestelm\u00e4lle asetetut vaatimukset ja j\u00e4rjestelm\u00e4n monimutkaisuus m\u00e4\u00e4rittelev\u00e4t, mik\u00e4 arkkitehtuuri sopii millekin. Lopulta universaalia totuutta ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 edes ole, vaan arkkitehdin on pakko valita jotakin. My\u00f6hemmin arkkitehtuuria voi refaktoroida, mutta se voi olla merkitt\u00e4v\u00e4n kallista ty\u00f6m\u00e4\u00e4r\u00e4llisesti.</p> <p>Teht\u00e4v\u00e4</p> <p>Lue lis\u00e4\u00e4 siit\u00e4, kuinka perinteinen Web 1.0:sta kehittyi eventtipohjaisten arkkitehtuurien koti: A Technical Deep Dive on Event Driven Architectures</p> <p>Teht\u00e4v\u00e4</p> <p>Lue lis\u00e4\u00e4 siit\u00e4, ovatko monoliitit aina pahasta: Death by a Thousand Microservices</p>"},{"location":"protokollat_ja_standardit/life_of_a_query/","title":"Life of a Query","text":""},{"location":"protokollat_ja_standardit/life_of_a_query/#kayttaja-ja-applikaatio","title":"K\u00e4ytt\u00e4j\u00e4 ja applikaatio","text":"<p>Kun k\u00e4ytt\u00e4j\u00e4 kirjoittaa osoitekentt\u00e4\u00e4n <code>[http://]www.raspi.local</code>, selain p\u00e4\u00e4ttelee halutun protokollan (HTTP) osoitekent\u00e4n sis\u00e4ll\u00f6st\u00e4. Selain ei tied\u00e4 <code>raspi</code>:n IP-osoitetta, joten se kysyy t\u00e4t\u00e4 k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4lt\u00e4, joka k\u00e4y katsomassa ensin <code>hosts</code>-tiedoston sis\u00e4ll\u00f6n; mik\u00e4li tietoa ei l\u00f6ytynyt, se kysyy ensisijaiselta DNS-resolverilta vastausta.</p> <p>Kun IP-osoite on tiedossa, on aika muodostaa yhteys, siirt\u00e4\u00e4 data, ja lopulta katkaista yhteys.</p> <pre><code>sequenceDiagram\n    actor user as K\u00e4ytt\u00e4j\u00e4\n    participant client as Internet-selain\n    participant server as Raspi HTTP Server\n    participant DNS as DNS-resolveri\n\n    user-&gt;&gt;client: http://www.raspi.local\n    client-&gt;&gt;DNS: Mik\u00e4 on raspi.local IP-osoite?\n    DNS-&gt;&gt;client: Se on 192.168.0.42\n    Note right of client: TCP-k\u00e4ttely alkaa\n    Note right of client: ARP (cache tai kysely)\n    client-&gt;&gt;server: SYN\n    server-&gt;&gt;client: SYN+ACK\n    client-&gt;&gt;server: ACK\n    Note right of client: Tiedonsiirto alkaa\n    client-&gt;&gt;server: HTTP-pyynt\u00f6\n    server-&gt;&gt;client: HTTP-vastaus\n    Note right of client: Muut resurssit (CSS, JS)\n    client-&gt;&gt;server: HTTP-pyynt\u00f6\n    server-&gt;&gt;client: HTTP-vastaus\n    client-&gt;&gt;server: HTTP-pyynt\u00f6\n    server-&gt;&gt;client: HTTP-vastaus\n    Note right of client: Yhteyden lopetus alkaa\n    client-&gt;&gt;server: TCP-lopetus FIN\n    server-&gt;&gt;client: TCP-lopetus ACK + FIN\n    client-&gt;&gt;server: TCP-lopetus ACK\n    client-&gt;&gt;user: Sivu piirret\u00e4\u00e4n\n</code></pre> <p>Mik\u00e4li HTTP-pyynt\u00f6 olisi toteutettu Pythonilla,  ja se k\u00e4ytt\u00e4isi low-level <code>socket</code>-kirjastoa, koodi voisi n\u00e4ytt\u00e4\u00e4 jotakuinkin t\u00e4lt\u00e4:</p> <pre><code>import socket\n\nHOST = 'raspi.local'\nPORT = 80\n\nwith socket.create_connection((HOST, PORT), timeout=5.0) as sock:\n    sock.sendall(b\"GET / HTTP/1.1\\r\\nHost: raspi.local\\r\\nConnection: close\\r\\n\\r\\n\")\n\n    while True:\n        data = sock.recv(4096)\n\n        if not data:\n            break\n</code></pre> <p>Huomaa, ett\u00e4 applikaation ei tarvitse huolehtia k\u00e4ttelyist\u00e4. N\u00e4m\u00e4 tapahtuvat OSI-mallin (tai TCP/IP-pinon) alemmilla kerroksilla. Asiakas k\u00e4ytt\u00e4\u00e4 HTTP-protokollaa, kuten my\u00f6s serveri, eli applikaatioiden v\u00e4linen liikenne tapahtuu TCP/IP-mallin Application -kerroksessa. HTTP-protokolla ei ota kantaa siihen, kulkeeko signaali perille 2 metrin LAN-kaapelia, vai satelliittireittej\u00e4, ja onko v\u00e4liss\u00e4 nolla, yksi vai kymmeni\u00e4 reitittimi\u00e4. HTTP-protokollaa k\u00e4ytt\u00e4v\u00e4lle asiakasohjelmalle riitt\u00e4\u00e4, ett\u00e4 yhteys muodostuu ongelmitta, ja paluupostissa tulee vastaus. Esimerkkivastaus alla:</p> <pre><code>HTTP/1.0 200 OK\nDate: Sun, 13 Aug 2023 10:02:47 GMT\nServer: WSGIServer/0.2 CPython/3.11.0\nContent-Type: text/html\nContent-Length: 22553\n\n&lt;!doctype (...paljon HTML-koodia...) &lt;/html&gt;\n</code></pre> <p>Vaikka yll\u00e4 k\u00e4ytetty socket on itsess\u00e4\u00e4n kohtalaisen low-level -kirjasto, siin\u00e4 k\u00e4ytetty <code>create_connection</code>-funktio on abstraktio sen alla olevasta <code>socket.socket()</code> funktiosta. Mik\u00e4li haluat tutustua <code>create_connection</code>-funktion piilottamaan logiikkaan, katso Githubista kyseisen CPython-funktion koodi. Socket-kirjasto on kokonaisuudessaan melko alhaisen tason luokka. Mik\u00e4li haluaa tiivist\u00e4 koodia, voit k\u00e4ytt\u00e4\u00e4 huomattavasti abstraktimpaa <code>requests</code>-kirjastoa, joka pit\u00e4\u00e4 asentaa erikseen esimerkiksi komennolla <code>pip install requests</code>. Alla esimerkki requests-kirjastoa k\u00e4ytt\u00e4en:</p> <pre><code>import requests\n\nresponse = requests.get(\"http://raspi.local\")\n</code></pre> <p>Kyll\u00e4, siin\u00e4 on kaikki mit\u00e4 tarvitsee osata k\u00e4ytt\u00e4\u00e4kseen HTTP- ja TCP/IP-protokollaa k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4ss\u00e4, jota Python sockets tukee!</p>"},{"location":"protokollat_ja_standardit/life_of_a_query/#tcpip-kerros","title":"TCP/IP kerros","text":"<p>Kuvio 1: TCP/IP-protokollaperhe IEEE 802.x:n (Ethernet, Wireless Ethernet, ...) p\u00e4\u00e4lle toteutettuna. Malli noudattaa 5-kerroksista varianttia, jossa Hardware/Physical on mukana.</p> <p>K\u00e4ytt\u00f6j\u00e4rjestelm\u00e4, verkkokortin ajurit ja verkkokortin rauta piilottavat sis\u00e4\u00e4ns\u00e4 suuren osan tietoliikenteen monimutkaisuudesta. TCP/IP:n ylemm\u00e4t kerrokset pysyv\u00e4t muuttumattomina, oli varsinaisena siirtomedian protokollana Ethernet, Wireless Ethernet, PPP, MLPS tai muu. Vastaanottavan koneen p\u00e4\u00e4ss\u00e4 sama protokollapino suoritetaan p\u00e4invastaisessa j\u00e4rjestyksess\u00e4.</p> <p>T\u00e4ss\u00e4 yksinkertaisessa esimerkiss\u00e4 raspi.local tietokone sijaitsee kenties samassa l\u00e4hiverkosa. Ent\u00e4 jos ei? T\u00e4ll\u00f6in tarvitaan laitteita, jotka kytkev\u00e4t useita verkkoja yhteen eli reitittimi\u00e4. Lue seuraava luku t\u00e4t\u00e4 varten.</p>"},{"location":"protokollat_ja_standardit/life_of_a_query/#wireshark","title":"Wireshark","text":"<p>Huomaa, ett\u00e4 voit analysoida yll\u00e4 tapahtuvaa liikennett\u00e4 Wireshark-ohjelman avulla. Mik\u00e4li liikenne tapahtuu kokonaan kotikoneesi sis\u00e4ll\u00e4, kaappaa ja analysoi <code>loopback</code>-nimist\u00e4 network interfacea. Mik\u00e4li liikenne kohdentuu kotikoneesi ulkopuolelle, joko l\u00e4hiverkkoon tai Internetiin, kaappaa ja analysoi k\u00e4ytt\u00e4m\u00e4si verkkosovittimen liikennett\u00e4. Jos et ole ennen k\u00e4ytt\u00e4nyt Wiresharkia, tutustu ohjevideoihin. Niit\u00e4 l\u00f6ytyy Youtubesta reilusti, kuten Chris Greerin Wireshark Masterclass. Perusk\u00e4ytt\u00f6\u00e4 varten riitt\u00e4\u00e4, ett\u00e4 katsot soittolistan pari ensimm\u00e4ist\u00e4 videota.</p> <p>Mik\u00e4li seuraat interfacea, joka ei ole loopback, on suositeltavaa:</p> <ol> <li>Sulje kaikki Interneti\u00e4 k\u00e4ytt\u00e4v\u00e4t ohjelmat, joita et tarvitse.</li> <li>Luo Capture Filter, joka rajaa pakettien tallennuksen sinun use caseen, jos mahdollista. Aina se ei ole.</li> </ol>"},{"location":"protokollat_ja_standardit/organisaatiot/","title":"Organisaatiot","text":"<p>Quote</p> <p>Q: What do you get when you cross a mobster with an international standard?</p> <p>A: Someone who makes you an offer you can't understand</p> <p>--- Paul Mockapetris</p>"},{"location":"protokollat_ja_standardit/organisaatiot/#globaalit-verkkojen-standardisointijarjestot","title":"Globaalit (verkkojen) standardisointij\u00e4rjest\u00f6t","text":"<p>Standardointij\u00e4rjest\u00f6t vaikuttavat (ja ovatkin) byrokraattisilta organisaatioilta, mutta ilman yleisi\u00e4 standardeja jokaisella eri yrityksell\u00e4 olisi oma tapa toimia. Ilman standardeja meill\u00e4 ei voisi olla Interneti\u00e4 - tai ei ainakaan sellaisena kuin sen tunnemme. J\u00e4rjest\u00f6jen keskin\u00e4iset kytk\u00f6kset ovat monimutkaisia, ja standardin laatimiseen voi osallistua kerralla useampi eri j\u00e4rjest\u00f6. Alla esiteltyn\u00e4 lyhyesti muutama.</p> <p>International Standards Organisation (ISO) on 1946 perustettu kansainv\u00e4linen j\u00e4rjest\u00f6, johon kuuluu jokaisesta j\u00e4senvaltiosta yksi j\u00e4senj\u00e4rjest\u00f6. Suomen j\u00e4sen on SFS, Yhdysvaltain ANSI, ja Iso-Britannian on BSI. Kaiken kaikkiaan j\u00e4seni\u00e4 on yli 150. Koko lista l\u00f6ytyy ISO:n verkkosivuilta. Standardit eiv\u00e4t ole m\u00e4\u00e4r\u00e4yksi\u00e4 vaan suosituksia. Valitettavasti standardit eiv\u00e4t ole apaasti Internetiss\u00e4 saatavissa, vaan p\u00e4\u00e4sy niihin pit\u00e4\u00e4 lunastaa kaupan kautta. Yli 25 tuhannen standardin katalogiin mahtuu kaikenlaista, kuten A4 ja muut paperikoot (ISO 216), teen keitt\u00e4minen (ISO 3103), laadunhallintaj\u00e4rjestelm\u00e4 (ISO 9001), sek\u00e4 tietenkin t\u00e4ll\u00e4 kurssilla k\u00e4sitelty OSI-malli (ISO/IEC 7498).</p> <p>Kansainv\u00e4linen televiestint\u00e4liitto (International Telecommunication Union, ITU-T) ovat kaukana historiassa 1800-puolella lenn\u00e4ttimiss\u00e4. Nykyisin ITU-T toimii YK:n alaisuudessa ja siihen kuuluu  l\u00e4hemm\u00e4s 200 j\u00e4senvaltiota. Valtioiden lis\u00e4ksi ITU-T:hen kuuluu toimialojen edustajia; Suomesta Nokia, Yhdysvalloista useita yrityksi\u00e4 kuten Amazon, IBM, Netflix ja niin edelleen. Koko lista l\u00f6ytyy ITU-T:n sivuilta. Internetin kannalta merkitt\u00e4vi\u00e4 standardeja ovat muun muassa H.264-videokoodekki sek\u00e4 X.509 eli julkisiin avaimiin perustuva salaus.</p> <p>Institute of Electrical and Electronics Engineers (IEEE) on kansainv\u00e4linen tekniikan alan ammatinharjoittajien - aivan valtava - yhdistys, jonka p\u00e4\u00e4tarkoitus on edist\u00e4\u00e4 teknologista innovaatiota ihmiskunnan eduksi. IEEE myy MAC-osoitelohkot niit\u00e4 tarvitseville yrityksille. Yli 2000 standardin katalogista l\u00f6ytyy muun muassa 802.X-ty\u00f6ryhmien standardeja, kuten IEEE 802.3-2022 (Ethernet) sek\u00e4 IEEE 802.11-2020 (WLAN). IEEE:n standit k\u00e4sittelev\u00e4t my\u00f6s muun muassa robotiikkaa, asioiden Interneti\u00e4 (Internet of Things) sek\u00e4 teko\u00e4ly\u00e4.</p>"},{"location":"protokollat_ja_standardit/organisaatiot/#internetin-standardien-jarjestot","title":"Internetin-standardien j\u00e4rjest\u00f6t","text":"<p>Computer Networks -kirjan kirjoittaja tiivist\u00e4\u00e4 suurten standardiorganisaatioiden ja Internet-standardeja kehitt\u00e4vien vapaaehtoisj\u00e4rjest\u00f6jen eroa alla olevan lainauksen tavoin, kenties hieman huumorimieless\u00e4.</p> <p>Quote</p> <p>The difference can be crudely summed up by saying that the people who come to ITU or ISO standardization  meetings wear suits, while the people who come to Internet standardization meetings wear jeans. -- Andrew Tanenbaum</p> <p>Internet Engineering Task Force (IETF) kehitt\u00e4\u00e4 muiden muassa Internet-standardeja, joista yksi on TPC/IP eli Internet Protocol Suite. IETF:n teknisi\u00e4 dokumenttej\u00e4 kutsutaan Request for Comments (RFC) -nimell\u00e4. N\u00e4ihin lyhenteisiin on vaikea olla t\u00f6rm\u00e4\u00e4m\u00e4tt\u00e4 verkkoihin liittyv\u00e4\u00e4 dokumentaatiota ja kirjallisuutta lukiessa. Muutamia merkitt\u00e4vi\u00e4 ovat Internet Protocol eli IPv4-protokolla (RFC 791), IPv6 (RFC 2460), TCP (RFC 793), UDP (RFC 768) ja HTTP/1.1 (RFC 9112).  Toisin kuin ISO:n standardit, joihin saa p\u00e4\u00e4syn luottokorttia n\u00e4ytt\u00e4m\u00e4ll\u00e4, n\u00e4m\u00e4 ovat kaikki saatavilla ilmaiseksi - mist\u00e4p\u00e4 muualta kuin - Internetist\u00e4.</p> <p>Internet Research Task Force (IRTF) on IETF:n rinnakkainen j\u00e4rjest\u00f6, joka keskittyy lyhytaikaisten projektien ja toteutuksen sijasta pitk\u00e4aikaiseen tutkimukseen. Internet Architecture Board (IAB) sen sijaan tarkkailee n\u00e4it\u00e4 kahta.</p> <p>Internetin infrastruktuurin omistaa suurilta osin kaupalliset toimijat, mutta niiden tulee noudattaa edell\u00e4 mainittujen vapaaehtoisj\u00e4rjest\u00f6jen luomia protokollia, mik\u00e4li haluavat ett\u00e4 viesti kulkee Internetiss\u00e4 luotettavalla tavalla.</p> <p>Teht\u00e4v\u00e4</p> <p>Etsi IETF:n sivuilta RFC-haku tai -katalogi. Tutustu pintapuoleisesti dokumenttiin: RFC 9112. Kokeile etsi\u00e4 my\u00f6s muita standardeja kurssilla esiintyneiden termien tai lyhenteiden perusteella. Huomaathan, ett\u00e4 haussa on Additional Criteria, jonka avulla voi suodattaa pois muut kuin nykyhetken standardit <code>Status:</code> =&gt; <code>Standards Track:</code> =&gt; <code>Internet Standard</code>. AIB:n, IEFT:n ja IRTF:n yl\u00e4puolella on Internet Society (ISOC), joka pyrkii edist\u00e4m\u00e4\u00e4n Internetin avointa kehityst\u00e4 sek\u00e4 tukee ja edist\u00e4\u00e4 sen alaisuudessa toimivien tahojen toimintaa.</p> <p>Internet Governance Forum (IGF) on Yhdistyneiden Kansakuntien vuonna 2006 kokoonpanema j\u00e4rjest\u00f6, joka nostaa esille Internetin sosiaalisia ongelmia, ja pyrkii n\u00e4in edist\u00e4m\u00e4\u00e4n tasa-arvoa, saatavuutta sek\u00e4 Internetin kest\u00e4v\u00e4\u00e4 ja turvallista k\u00e4ytt\u00f6\u00e4.</p> <p>Muita yhdistyksi\u00e4 ja j\u00e4rjest\u00f6j\u00e4 on enemm\u00e4n kuin t\u00e4ll\u00e4 kurssilla tarvitsee luetella. My\u00f6s konsortioiden niiden suositukset voivat p\u00e4\u00e4ty\u00e4 my\u00f6s standardeiksi tai ainakin toimia niiss\u00e4 pohjana. W3C on (World Wide Web Consortium) on World Wide Webin (WWW) keksij\u00e4n Tim Berners-Leen perustama yhteis\u00f6, joka kehitt\u00e4\u00e4 avoimia standardeja tukemaan Internetin kasvua ja avoimmuutta. W3C:n visio kertoo paljon: \"make the web work, for everyone\" (elokuussa 2023.) W3C:n k\u00e4yt\u00e4nn\u00f6t k\u00e4sittelev\u00e4t muiden muassa HTML:\u00e4\u00e4, CSS:\u00e4\u00e4 ja JavaScripti\u00e4. Yksi mielenkiintoinen konsotio on Unicode Consortium, joka vastaa Unicode-merkist\u00f6n kehitt\u00e4misest\u00e4. Unicode-merkist\u00f6 antaa ihmisten tuntemilla merkeille uniikin numeron, jolla ne voi tunnistaa. Lukaise esimerkiksi t\u00e4m\u00e4 ehdotus, joka perustelee, miksi l\u00e4hinn\u00e4 Pohjois-Amerikassa esiintyv\u00e4t tikutaku-emojin  (eng. chipmunk) rinnalle pit\u00e4isi lis\u00e4t\u00e4 meille tutumman n\u00e4k\u00f6inen orava.</p>"},{"location":"protokollat_ja_standardit/organisaatiot/#internetin-rekisterointi-ja-koordinaatiojarjestot","title":"Internetin rekister\u00f6inti- ja koordinaatioj\u00e4rjest\u00f6t","text":"<p>Alunperin Internetin IP-numeroista ja domain-nimist\u00e4 oli vastuussa Internet Assigned Numbers Authority (IANA), joka suuresta nimest\u00e4\u00e4n huolimatta oli k\u00e4yt\u00e4nn\u00f6ss\u00e4 yksi henkil\u00f6.  DNS-rekisterin alkupisteen\u00e4 on muistikirja, johon Jon Postel kirjasi ARPANET:n socket-numeroita. IANA oli Yhdysvaltain puolustusministeri\u00f6n (DoD) valvovan silm\u00e4n alla ja hallinnassa aina vuoteen 1998 asti, jolloin sen valvonta siirtyi teht\u00e4v\u00e4\u00e4 varten perustetulle j\u00e4rjest\u00f6lle, joka tunnetaan nimell\u00e4 ICANN (Internet Corporation for Assigned Names and Numbers). Vuonna 2016 IANA:n omistus siirrettiin kokonaisuudessaan ICANN:lle.</p> <p>Heid\u00e4n omien verkkosivujensa mukaan heid\u00e4n teht\u00e4v\u00e4t ovat seuraavat (suomeksi k\u00e4\u00e4nnettyin\u00e4):</p> <ul> <li>ICANN (l\u00e4hde))<ul> <li>ICANN auttaa koordinoimaan internetin uniikkien tunnisteiden (IP-osoitteiden ja verkkotunnusten eli domain-nimien) sek\u00e4 hallinnoi IETF:n protokollien parametrej\u00e4. </li> </ul> </li> <li>IANA (l\u00e4hde)<ul> <li>Hallitsee nimipalvelimen (DNS) juurta (<code>.</code>), verkkotunnuksia <code>.int</code> ja <code>.arpa</code>, sek\u00e4 non-latin (muut kuin <code>[A-Za-z]</code>) merkkej\u00e4 sis\u00e4lt\u00e4vien verkkotunnusten (Internationalized Domain Names, IDN) k\u00e4yt\u00e4nteit\u00e4.</li> <li>Koordinoi IP-osoiteavaruutta ja AS-numeroita (Autonomous System Number). IANA delegoi osoite-alueiden hallinnan alueellisille verkkotunnushallinnoille (Regional Internet Registry, RIR.)</li> <li>Internet protocols\u2019 numbering systems are managed in conjunction with standards bodies.</li> <li>IP-protokollan numerointij\u00e4rjestelmien (eng. numbering system) hallintaa (IP-numerointia, porttinumerointia).</li> </ul> </li> </ul> <p>Tahojen teht\u00e4v\u00e4 on varmasti monimutkainen ja yll\u00e4tt\u00e4v\u00e4nkin vaikea kuvata ulkopuoliselle lyhyess\u00e4 \"About Us\"-sivustossa. T\u00e4ll\u00e4 kurssilla ei ole tarpeellista edes yritt\u00e4\u00e4 syv\u00e4luotaavati tutustua ICANN:n tai sen alaisuudessa olevien organisaatioiden p\u00e4\u00e4t\u00f6ksenhallintaan. On kuitenkin hyv\u00e4 tunnistaa organisaatioiden nimet ja osata yhdist\u00e4\u00e4 ne DNS:\u00e4\u00e4n, verkkotunnusten rekister\u00f6intiin, ja IP-osoitteisiin.</p> <pre><code>graph TD\n    ICANN[\"ICANN / IANA\"] --&gt; AFRINIC\n    ICANN --&gt; APNIC\n    ICANN --&gt; ARIN\n    ICANN --&gt; LACNIC\n    ICANN --&gt; RIPE[RIPE NCC]</code></pre> <p>Kuvio 1: ICANN/IANA:n alaiset alueelliset hallinnot.</p> <p>Teht\u00e4v\u00e4</p> <p>Alueelliset verkkotunnushallinnot eli Regional Internet Registryt (RIR:t) seuraavat hyvin karkeasti katsottuna maanosia, mutta merkitt\u00e4vi\u00e4 poikkeuksia l\u00f6ytyy. Etsi internetist\u00e4 ICANN:n RIR kartta ja tutki, millaisia eri hallintojen toimialueet ovat.</p> <p>Jos kattoj\u00e4rjest\u00f6jen, ICANN:n ja IANA:n, teht\u00e4v\u00e4t tuntuvat p\u00e4\u00e4llek\u00e4isilt\u00e4 tai hatarasti m\u00e4\u00e4riteltyin\u00e4, niin RIPE NCC ei j\u00e4t\u00e4 paljon arvailuiden varaan heid\u00e4n etusivujen tekstin perusteella: \"We distribute Internet number resources to our members and provide tools to help them manage their allocations and assignments.\". Keit\u00e4 sitten ovat heid\u00e4n j\u00e4senet? K\u00e4y katsomassa RIPE NCC:n sivuilta kaikki Suomen alueelle rekister\u00f6idyt paikalliset rekister\u00f6intitoimistot ja katso l\u00f6yd\u00e4tk\u00f6 yht\u00e4\u00e4n tuttua yrityst\u00e4 - on aika yll\u00e4tt\u00e4v\u00e4\u00e4, jos et l\u00f6yd\u00e4!</p>"},{"location":"protokollat_ja_standardit/osi_malli/","title":"OSI-malli","text":"<p>Jos avaat melkein mink\u00e4 tahansa kirjan tietoverkoista, todenn\u00e4k\u00f6isyys t\u00f6rm\u00e4t\u00e4 termiin OSI on valtava. OSI-referenssimalli (Open Systems Interconnection Reference Model) on tapa mallintaa tai abstrahoida tietoverkkoja. OSI-malli ei suinkaan ole ainut tietoverkkoja kuvaava malli, ja my\u00f6hemm\u00e4ss\u00e4 luvussa vertaamme sit\u00e4 sek\u00e4 TCP/IP-referenssimalliin ett\u00e4 varsinaiseen TCP/IP-protokollaperheeseen.</p> <p>OSI-mallin kerroksiin viitataan my\u00f6s my\u00f6s k\u00e4yt\u00e4nn\u00f6n tuotteissa ja niiden dokumentaatiossa. Katso alla olevat lainaukset pilvipalveluntarjoajien AWS ja Azure dokumentaatioista.</p> <p>Quote</p> <p>AWS Network Firewall complements existing network and application security services on AWS by providing control and visibility to Layer 3-7 network traffic for your entire VPC. --AWS Network Firewall FAQs</p> <p>Quote</p> <p>Azure Load Balancer operates at layer 4 of the Open Systems Interconnection (OSI) model. --What is Azure Load Balancer?</p> <p>OSI-malli julkaistiin 1980-alkuvaiheilla. Sen kirjoittajien, joihin lukeutuvat j\u00e4rjest\u00f6t ISO ja CCITT, ja sen tukijoiden, joihin lukeutuvat muun muassa teleoperaattorit  Deutsche Bundespost,  British Telecom sek\u00e4  France Telecom, tavoitteena oli luoda mallin pohjalta OSI-protokollaperhe (OSI protocol suite). OSI-protokollaperhe h\u00e4visi \"protokollasodan\" suurista tukijoista huolimatta. Internetin syd\u00e4mess\u00e4 sykkii TCP/IP-protokollaperhe; ei OSI-protokollaperhe. OSI-malli j\u00e4i kuitenkin el\u00e4m\u00e4\u00e4n, kuten on n\u00e4ht\u00e4viss\u00e4 muun muassa yll\u00e4 olevissa lainauksissa.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#mallin-kaytto","title":"Mallin k\u00e4ytt\u00f6","text":"<p>Verkkoty\u00f6skentely (eng. networking) on merkitt\u00e4v\u00e4n monimutkaista. Monimutkaisia ilmi\u00f6it\u00e4 on j\u00e4rkev\u00e4\u00e4 yritt\u00e4\u00e4 j\u00e4sennell\u00e4 pienempiin loogisiin kokonaisuuksiin. Samalla syntyy ammattisanastoa, joka antaa monimutkaisille ilmi\u00f6ille sanan, jonka toisetkin alan ammattilaiset ymm\u00e4rt\u00e4v\u00e4t. T\u00e4ss\u00e4 OSI-malli on avuksi. Mallit itsess\u00e4\u00e4n ovat teoreettisia pelkistyksi\u00e4 eiv\u00e4tk\u00e4 t\u00e4ten kykene t\u00e4ysin selitt\u00e4m\u00e4\u00e4n reaalimaailman toteutuksen kaikki nyansseja. </p> <p>Tip</p> <p>K\u00e4yt\u00e4nn\u00f6ss\u00e4 jotkut tosimaailman protokollat ovat limbossa kahden eri tason v\u00e4liss\u00e4. Esimerkiksi MPLS on \"Layer 2.5\" protokolla. Kuinka monta sanaa tarvittaisiin selitt\u00e4m\u00e4\u00e4n sama asia, jos vastaanottaja ei tunne OSI-mallia tai sen tasoja?</p> <p>Protokollat eiv\u00e4t toteuta orjallisesti OSI-mallia tai mit\u00e4\u00e4n muutakaan abstraktiota, joten \u00e4l\u00e4 yrit\u00e4 turhaan survoa -muotoista palikkaa -muotoiseen koloon.</p> <p>TCP/IP Guide -kirjan, jonka lukeminen on suositeltavaa, ehdotus on, ett\u00e4 kysymykseen \"Mill\u00e4 tasolla t\u00e4m\u00e4 laiteisto toimii?\" kannattaa lis\u00e4t\u00e4 sana ylimmill\u00e4\u00e4n. Esimerkiksi reititin toimii ylimmill\u00e4\u00e4n tasolla 3, mutta voi hy\u00f6dynt\u00e4\u00e4 alempien tasojen rajapintoja. Yksitt\u00e4inen protokolla voi istua hyvinkin yhdelle kerrokselle tai olla istumatta. Yleisesti protokollana tunnettu PPP on esimerkiksi aiemmin mainitun kirjan mukaan protokollaperhe (eng. protocol stack), joten jo protokollaperheen m\u00e4\u00e4ritelm\u00e4 ajaa siihen, ett\u00e4 PPP toimii usealla kerroksella.</p> <p>Tarinan opetus: koita k\u00e4ytt\u00e4\u00e4 OSI-mallia yksinkertaistamaan monimutkaista todellisuutta. \u00c4l\u00e4 mieti liian tarkkaan yksityiskohtia.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#kerrokset","title":"Kerrokset","text":"<p>Mik\u00e4li olet lukenut aiemmat luvut j\u00e4rjestyksess\u00e4, niin osaat jo odottaa, ett\u00e4 jossain luvussa esitell\u00e4\u00e4n OSI-mallin 7 kerrosta. Ja nyt se tapahtuu!</p> <p> Kuvio 1: Kaksi rinnakkaista laitetta, joista vasen l\u00e4hett\u00e4\u00e4 viestin oikealle OSI-mallin kuvauksen mukaan</p> <p>OSI-malli koostu seitsem\u00e4st\u00e4 tasosta tai kerroksesta. Kun informaatio kulkee horisontaalisesti, eli samalta tasolta samalle tasolle (yleens\u00e4 eri tietokoneelle), niin kyseess\u00e4 on protokolla. Kun informaatio kulkee vertikaalisesti, eli tasolta N tasolle N+1 tai N-1, niin kyseess\u00e4 on rajapinta (eng. interface). Yll\u00e4 oleva kuvio selvent\u00e4nee aiempia virkkeit\u00e4. Kuten aiemmissa luvuissa on todettu, alempi taso tuottaa ylemm\u00e4lle tasolle palvelua. Alla kerrokset k\u00e4yd\u00e4\u00e4n l\u00e4pi yksitellen, alkaen alimmasta eli konkreettisimmasta.</p> <p>Kun viesti siirtyy ylemm\u00e4lt\u00e4 tasolta alemmalle, alempi taso kapsuloi (eng. encapsulate) viestin. Kun data siirtyy alemmalta ylemm\u00e4lle, kapsulointi puretaan (eng. decapsulate). Katso JSON-pseudoesimerkki Terminologia-luennolta.</p> <p>Info</p> <p>Alla esitell\u00e4\u00e4n suomenkieliset termit kerroksille ja niit\u00e4 k\u00e4ytet\u00e4\u00e4n silloin kun se on luontevaa. Kuvioissa ja taulukoissa ovat k\u00e4yt\u00f6ss\u00e4 englanninkieliset termit. Mallin sanastossa on hitusen v\u00e4ljyytt\u00e4 jo muutenkin, joten sekaannusten v\u00e4ltt\u00e4miseksi on turvallisempaa k\u00e4ytt\u00e4\u00e4 joko tason numeroa tai englanninkielist\u00e4 numeroa. Taso ja kerros ovat alla synonyymej\u00e4.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#tasot-1-4-infrastruktuurikerrokset","title":"Tasot 1-4: Infrastruktuurikerrokset","text":""},{"location":"protokollat_ja_standardit/osi_malli/#taso-1-physical","title":"Taso 1: Physical","text":"<p>Alin taso on suomeksi fyysinen kerros, peruskerros tai siirtopiirikerros. Fyysisen kerroksen keskeinen teht\u00e4v\u00e4 on siirt\u00e4\u00e4 bitit kommunikaatiokanavaan. Huomaa, ett\u00e4 fyysinen kerros ei edusta kaapelia, vaan pikemminkin sit\u00e4 rajapintaa, joka huolehtii ett\u00e4 kaapeliin p\u00e4\u00e4tyy oikeanlainen signaali. Laitetasolla kerrosta yksi vastaavat modeemi ja keskitin eli hubi.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#taso-2-data-link","title":"Taso 2: Data Link","text":"<p>Toiseksi alin tas on suomeksi siirtokerros, siirtoyhteyskerros tai tietoyhteyskerros. Kerros vastaa datakehysten (eng. data frame) siirrosta kahden noodin, kuten tietokoneen, v\u00e4lill\u00e4. Kerroksen teht\u00e4vi\u00e4 ovat muun muassa fyysisen osoitteiston (eli k\u00e4yt\u00e4nn\u00f6ss\u00e4 MAC-osoitteiden) k\u00e4sittely sek\u00e4 ylemmilt\u00e4 tasoilta saapuvien viestien pilkkominen sellaisiin palasiin, ett\u00e4 vastaanottaja (eli keskustelukumppanin saman kerroksen sama protokolla) kykenee vastaanottamaan ne. Laitetasolla kerrosta vastaavat kytkin ja verkkokortit. Data link -kerros liittyy siis sellaisiin protokolliin, jossa koneet ovat tavalla tai toisella toisiinsa suoraan kytkettyin\u00e4 yhteisen tiedonsiirtokanavan avulla. Tasolla toimivat protokollat k\u00e4sittelev\u00e4t alemman tason vikatilanteet, jotta ylempien ei tarvitse niist\u00e4 murehtia.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#tasot-3-4-loogiset-kerrokset","title":"Tasot 3-4: Loogiset kerrokset","text":""},{"location":"protokollat_ja_standardit/osi_malli/#taso-3-network","title":"Taso 3: Network","text":"<p>Kolmas kerros alhaalta on suomeksi verkkokerros tai verkkotaso. Huomaa, ett\u00e4 t\u00e4ll\u00e4 kerroksella verkko on looginen eik\u00e4 fyysinen. T\u00e4ll\u00e4 tasolla toimivat reitittimet, jotka yhdist\u00e4v\u00e4t eri loogiset verkot toisiinsa, ja t\u00e4ten my\u00f6s loogiset osoitteet. Kerroksen protokollat pakkaavat ylemm\u00e4n kerroksen viestin paketeiksi. Mik\u00e4li ylh\u00e4\u00e4lt\u00e4 tuleva viesti on liian suuri paketin (standardin m\u00e4\u00e4ritelm\u00e4n mukaan), niin data saatetaan fragmentoida useiksi pienemmiksi paketeiksi, ja vastaavasti kasata pieniss\u00e4 osissa saapuva paketti takaisin yhten\u00e4iseksi kokonaisuudeksi. T\u00e4m\u00e4n kerroksen protokollat huolehtivat my\u00f6s viestikanavan ruuhkaisuudesta (eng. congestion) eli hillitsee pakettien l\u00e4hett\u00e4mist\u00e4 alemmille kerroksilla mik\u00e4li paketeista alkaa muodostua ruuhkaa. </p>"},{"location":"protokollat_ja_standardit/osi_malli/#taso-4-transport","title":"Taso 4: Transport","text":"<p>Nelj\u00e4s kerros alhaalta on suomeksi kuljetuskerros. Tasojen kolme ja nelj\u00e4 v\u00e4lill\u00e4 on todella vahva yhteys, mik\u00e4 on huomattavissa muun muassa siit\u00e4, ett\u00e4 protokollaperheit\u00e4 nimet\u00e4\u00e4n n\u00e4iden kahden kombinaationa (TCP/IP, IPX/IPX). Mik\u00e4li protokolla on kytkent\u00e4inen (eng. connection-oriented) kuten TCP, niin t\u00e4m\u00e4n kerroksen protokolla m\u00e4\u00e4rittelee, kuinka yhteys neuvotellaan auki, kuinka se pidet\u00e4\u00e4n auki, ja kuinka se katkaistaan. Mik\u00e4li protokolla on ei-kytkent\u00e4inen (eng. connectionless) kuten UDP, t\u00e4t\u00e4 ei tehd\u00e4.</p> <p>Samaa fyysisest\u00e4 (ja alemmilla tasoilla my\u00f6s loogista) viestikanavaa k\u00e4ytt\u00e4v\u00e4t samaan aikaan useat eri applikaatiot, ja t\u00e4m\u00e4 kerros huolehtii viestin limityksest\u00e4 tai kanavoinnista (eng. multiplexing) sek\u00e4 kanavoinnin purkamisesta (eng. demultiplexing). Tilanne on hieman sama kuin digitaalisessa videostriimiss\u00e4 tai -tiedostossa, jossa yhteen bittivirtaan on upotettu yksi tai useampi kuvaraita, useita \u00e4\u00e4niraitoja ja tekstitykset. Jotta eri applikaatiot ja niille kuuluvat paketit voidaan jakaa oikeisiin laareihin, tarvitaan sovelluskohtainen tunniste. TCP/IP-protokollaperheess\u00e4 t\u00e4m\u00e4 tunnetaan nimell\u00e4 portti. IP-osoitteella tunnistetaan toisessa verkossa oleva tietokone; parilla IP + PORT tunnistetaan my\u00f6s sovellus.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#tasot-5-7-applikaatiokerrokset","title":"Tasot 5-7: Applikaatiokerrokset","text":""},{"location":"protokollat_ja_standardit/osi_malli/#taso-5-session","title":"Taso 5: Session","text":"<p>Viides kerros on suomeksi yhteysjaksokerros, yhteystapahtumakerros tai istuntokerros. Nimest\u00e4 voi p\u00e4\u00e4tell\u00e4, ett\u00e4 kerroksella huolehtitaan istunnoista (eng. sessions). Istunto yhdist\u00e4\u00e4 kaksi tietokonetta toisiinsa (loogisella tasolla), jotta ne voivat muodostaa kesken\u00e4\u00e4n yksitt\u00e4ist\u00e4 viesti\u00e4 pidemm\u00e4n keskustelun. Samaan istuntoon liittyvill\u00e4 viesteill\u00e4 t\u00e4ytyy olla siis jokin tunniste. TCP/IP-protokollaperheess\u00e4 vastaava istunto, tai sen ylemmille tasoille n\u00e4kyv\u00e4 rajapinta, on nimelt\u00e4\u00e4n TCP/IP Socket. Huomaa, ett\u00e4 OSI-mallin istunto ei ole sama asia kuin verkkomaailmasta tuttu selainistunto, joka k\u00e4ytt\u00e4\u00e4 ev\u00e4steit\u00e4 eli keksej\u00e4 (eng. cookies). Nuo istunnot on rakennettu vasta tason 7 yl\u00e4puolelle, esimerkiksi HTTP-rajapinnan p\u00e4\u00e4lle, eli sovelluksen omalle tontille. Tason 5 tarkoittama istunnon toteutus on paljon alemmalla tasolla; tietokoneen tapauksessa k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4n kernelin uumenissa.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#taso-6-presentation","title":"Taso 6: Presentation","text":"<p>Toiseksi ylin kerros on suomeksi esityskerros tai esitystapakerros. T\u00e4m\u00e4 kerros puuttuu datan presentaatioon, josta yksi esimerkki on merkist\u00f6 (eng. character set). T\u00e4ll\u00e4 tasolla toimiva protokolla voi esimerkiksi k\u00e4\u00e4nt\u00e4\u00e4 windows-ymp\u00e4rist\u00f6st\u00e4 tutut CRLF-rivinvaihdot UNIX-maailmasta tuttuihin LF-rivinvaihtoihin. My\u00f6s salaus voidaan hoitaa presentaatiokerroksella, kuten SSL:n yhteydess\u00e4, mutta toisaalta my\u00f6s alemmat kerrokset voivat salata viestin (joka olisi t\u00e4ll\u00f6in tuplasti salattu.) Dataa voidaan my\u00f6s kompressoida kuljetusta varten: esimerkiksi REST-rajapinnoissa k\u00e4ytetyt JSON-tiedostot voivat pienenty\u00e4 merkitt\u00e4v\u00e4sti, jolloin verkon IO-kuormaa siirret\u00e4\u00e4n CPU-kuormaksi (koska pakkaus sy\u00f6 CPU-aikaa.) Kaikki protokollat eiv\u00e4t v\u00e4ltt\u00e4m\u00e4tt\u00e4 k\u00e4yt\u00e4 tason 6 operaatioita laisinkaan, jos viestin formaatti on riitt\u00e4v\u00e4n universaali eik\u00e4 sit\u00e4 tarvitse salata - tai se on salattu OSI-kerroksia hy\u00f6dynt\u00e4v\u00e4n sovelluksen toimesta.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#taso-7-application","title":"Taso 7: Application","text":"<p>Ylin kerros on suomeksi sovelluskerros. Nimest\u00e4 voi p\u00e4\u00e4tell\u00e4, ett\u00e4 kerros liittyy tavalla tai toisella sovelluksiin eli ohjelmiin, mutta verkkoselain (Edge, Chrome, Firefox, ...), eli siis se C/C++:lla ohjelmoitu sovellus, ei ole osa kerrosta 7. Sen sijaan verkkoselain noudattaa protokollaa, jos se l\u00e4hett\u00e4\u00e4 protokollan mukaisen kyselyn palvelimelle. Ei ole, mutta noudattaa.</p>"},{"location":"protokollat_ja_standardit/osi_malli/#tiivistava-taulukko","title":"Tiivist\u00e4v\u00e4 taulukko","text":"<p>Muista, ett\u00e4 OSI-malli on yleinen tietoverkkoja selitt\u00e4v\u00e4 malli, joten se ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 selit\u00e4 jokaista protokollaperhett\u00e4 pienint\u00e4 nyanssia my\u00f6den. Varsinkin kerrokset 5-7 voivat menn\u00e4 melko vahvasti sekaisin. Seuraavissa luvuissa tutustumme yhteen tiettyyn protokollaperheeseen, eli TCP/IP:hen, joka tunnetaan my\u00f6s nimell\u00e4 Internet Protocol Suite. Alla taulukko, joka pyrkii tiivist\u00e4m\u00e4\u00e4n yll\u00e4 olevien otsakkeiden tekstin nopeasti silm\u00e4ilt\u00e4v\u00e4ksi muistilistaksi.</p> Kerros Nimi P\u00e4\u00e4teht\u00e4v\u00e4 7 Application Asiakasohjelman kutsuma kerros 6 Presentation Salaus, pakkaus, merkist\u00f6n vaihto. 5 Session Istunnon yll\u00e4pit\u00e4minen. 4 Transport Viestit laareihin (eli portitus) sek\u00e4 yhteydest\u00e4 (jos protokolla on kytkent\u00e4inen) 3 Network Verkot jotka yhdistyv\u00e4t toisiin verkkoihin (eli reititys) 2 Data Link Lokaalisti tavoitettavat verkot 1 Physical Bittien k\u00e4sittely viestiksi"},{"location":"protokollat_ja_standardit/reititys/","title":"Reititys","text":"<p>Mik\u00e4li IP-paketin kohteeksi merkattu IP-osoite ei ole l\u00e4hett\u00e4j\u00e4n kanssa samassa verkossa, tarvitaan reititin tai useita reittitimi\u00e4, joka tai jotka sitovat eri verkot yhteen. L\u00e4hett\u00e4v\u00e4 tietokone voi p\u00e4\u00e4tell\u00e4, onko kohdetietokone samassa verkossa katsomalla ip-osoitetta ja (ali)verkon peitett\u00e4. Katso alla olevaa Kuviota 1. Kuvitellaan, ett\u00e4 kaikissa kuvion verkoissa aliverkon peite on 255.255.255.0. Kuvitellaan my\u00f6s, ett\u00e4 yksik\u00e4\u00e4n laite ei ole NAT:n takana. J\u00e4tet\u00e4\u00e4n my\u00f6s TCP-portit huomioitta.</p> <p></p> <p>Kuvio 1: Kahden tietokoneen v\u00e4linen kommunikaatio reitittimien l\u00e4pi, kuvitteellisen merikaapelin l\u00e4pi. MAC-osoitteet lyhennetty 24-bittisiksi tiiviimm\u00e4n ilmaisun toivossa. Kuvitellaan aliverkon peitteeksi kaikissa tapauksissa /24 eli 255.255.255.0</p> <p>Asiakas <code>10.0.1.11</code> (Kuvio 1:ssa) haluaa l\u00e4hett\u00e4\u00e4 HTTP-pyynn\u00f6n palvelimelle <code>10.0.3.22</code>. H\u00e4n on ehk\u00e4 saanut t\u00e4m\u00e4n osoitteen DNS-palvelimelta, tai ehk\u00e4 se on rautakoodattu sovellukseen.</p>"},{"location":"protokollat_ja_standardit/reititys/#vaiheittain","title":"Vaiheittain","text":""},{"location":"protokollat_ja_standardit/reititys/#vaihe-1","title":"Vaihe 1","text":"<p>Asiakas laskee, kuuluuko kohdekone h\u00e4nen kanssaan samaan verkkoon. <code>10.0.1.0/24</code> verkkoon kuuluvat osoitteet <code>10.0.1.0</code>-<code>10.0.1.255</code>, joten kone ei ole samassa verkossa. T\u00e4m\u00e4 operaatio tapahtuu kerroksen Internet, johon kuuluvat IP-osoitteen, tasolla.</p>"},{"location":"protokollat_ja_standardit/reititys/#vaihe-2","title":"Vaihe 2","text":"<p>Asiakas l\u00e4hett\u00e4\u00e4 paketin reitittimelle. T\u00e4m\u00e4n tiedot h\u00e4n on saanut joko rautakoodattuina tai DHCP-protokollan avulla saadessaan IP-osoitteen. Reitittimen osoite, eli default gateway, on t\u00e4ss\u00e4 tapauksessa <code>11.0.1.1</code>. Henkil\u00f6, joka k\u00e4ytt\u00e4\u00e4 asiakastietokonetta, l\u00f6yt\u00e4isi t\u00e4m\u00e4n tiedon <code>ipconfig</code>-komennon avulla. Default gateway on, kuten sen on pakko olla, samassa verkossa asiakkaan kanssa. </p> <p>Siirryt\u00e4\u00e4n kerrokseen Network, tai tarkemminkin ARP-protokollaan, joka on liima kerrosten Internet ja Network v\u00e4lill\u00e4, eli IP- ja MAC-osoitteen toisiinsa liitt\u00e4v\u00e4 protokolla. Asiakas tarkistaa omasta ARP-taulukostaan, mik\u00e4 on kyseisen IP-osoitteen MAC-avain. Henkil\u00f6, joka k\u00e4ytt\u00e4\u00e4 asiakastietokonetta, l\u00f6yt\u00e4isi saman tiedon <code>arp -a</code>-komennon avulla. Mik\u00e4li taulukosta ei l\u00f6ydy t\u00e4t\u00e4 tietoa, eli taulukon tieto on vanhentunut, asiakas l\u00e4hett\u00e4\u00e4 broadcast-osoitteeseen <code>255.255.255.255</code> eli fyyfiselt\u00e4 osoitteeltaan <code>ff-ff-ff-ff-ff-ff</code> ARP-kyselyn. Kysely on k\u00e4rjist\u00e4en <code>Hei kaikki, kuka teist\u00e4 on 10.0.1.1 ?</code>. Reititin luonnollisesti vastaisi t\u00e4h\u00e4n kyselyyn, muut l\u00e4hiverkon koneet eiv\u00e4t. Reititin ei v\u00e4lit\u00e4 t\u00e4t\u00e4 kysely\u00e4 Internetiin: syntyisi kaaos, jos kaikki Internetin tietokoneet huhuilisivat ristiin.</p> <p>Kun asiakaskone tiet\u00e4\u00e4 reitittimen eli <code>10.0.1.1</code>:n MAC-osoitteen, joka on t\u00e4ss\u00e4 esimerkiss\u00e4 helposti muistettava ja lyhennetty <code>aa-aa-aa</code>, se on valmis l\u00e4hett\u00e4m\u00e4\u00e4n paketin reittittimen MAC-osoitteeseen. Physical-tasolla tieto vaihdetaan ykk\u00f6siksi ja nolliksi eli biteiksi ja siirret\u00e4\u00e4n kohti mediaa, joka on t\u00e4ss\u00e4 tapauksessa tavallinen parikaapeli.</p>"},{"location":"protokollat_ja_standardit/reititys/#vaihe-3","title":"Vaihe 3","text":"<p>Reititin vastaanottaa datansa parikaapelista. Physical taso ty\u00f6st\u00e4\u00e4 bittej\u00e4, Network-taso kasaa n\u00e4ist\u00e4 Ethernet-kehyksi\u00e4, ja Internet-taso kasaa n\u00e4ist\u00e4 IP-paketteja. Reititin lukee IP-paketin header-datasta kohdeosoitteen <code>destination ip</code>:n. Reitittimell\u00e4 on oma reititystaulu, joka olisi t\u00e4ss\u00e4 tapauksessa jotakuinkin:</p> Network Next Hop Interface 10.0.1.0/24 DIRECT ethLan 1.2.3.0/24 DIRECT ethWan 10.0.3.0/24 1.2.3.5 ethWan <p>Reititin n\u00e4kee taulukosta, ett\u00e4 kohdeosoite <code>10.0.3.22</code> on jossakin reitttimen <code>1.2.3.5</code> takana, joten IP-paketti sis\u00e4lt\u00f6ineen pit\u00e4\u00e4 v\u00e4litt\u00e4\u00e4 reitittimelle <code>1.2.3.5</code>. Se katsoo kyseisen <code>.5</code>-reitittimen MAC-osoitteen ARP-taulusta, ja jos sit\u00e4 ei l\u00f6ydy, suorittaa omassa l\u00e4hiverkossaan eli <code>1.2.3.0</code> ARP-kyselyn. Kun l\u00e4hetett\u00e4v\u00e4 IP-paketti saapuu reittimen Network-kerrokselle, siihen kiinnitet\u00e4\u00e4n <code>source MAC</code>:ksi laitteen oma eli <code>BB-BB-BB</code> ja kohteeksi eli <code>destination MAC</code>:ksi kohdereitittimen MAC eli <code>DD-DD-DD</code>. Ethernet-kehys siirtyy taas Physical-tasolle, jossa se k\u00e4sitell\u00e4\u00e4n biteiksi.</p>"},{"location":"protokollat_ja_standardit/reititys/#vaihe-4","title":"Vaihe 4","text":"<p>Seuraava reititin saa datansa parikaapelista. My\u00f6s t\u00e4m\u00e4 reititin lukee IP-paketin header-datasta kohdeosoiteen eli <code>destination ip</code>. Kyseinen IP-osoite, <code>10.0.3.22</code>, kuuluu verkkoon <code>10.0.3.0/24</code>, johon on suora reitti ethLan-verkkosovittimesta.</p> Network Next Hop Interface 10.0.1.0/24 1.2.3.4 ethWan 1.2.3.0/24 DIRECT ethWan 10.0.3.0/24 DIRECT ethLan <p>Paketin voi siis v\u00e4litt\u00e4\u00e4 perille MAC-osoitetta k\u00e4ytt\u00e4en. Reititin katsoo sen omasta ARP-taulustaan, ja mik\u00e4li sit\u00e4 ei l\u00f6ydy, se suorittaa ARP-kyselyn. Kun l\u00e4hetett\u00e4v\u00e4 IP-paketti saapuu reittimen Network-kerrokselle, siihen kiinnitet\u00e4\u00e4n <code>source MAC</code>:ksi laitteen oma MAC eli <code>DD-DD-DD</code>, ja kohteeksi eli <code>destination MAC</code>:ksi palvelimen MAC eli <code>22-22-22</code>. Data siirret\u00e4\u00e4n l\u00e4hiverkossa perille.</p>"},{"location":"protokollat_ja_standardit/reititys/#vaihe-5","title":"Vaihe 5","text":"<p>Palvelin saa viestin ja se kulkeutuu Ethernet ja TCP/IP-protokollaperheen kerrosten l\u00e4pi, kunnes saapuu lopulta (TCP-portin 80 avulla) HTTP-palvelimen k\u00e4sitelt\u00e4v\u00e4ksi. IP-paketissa lukee yh\u00e4 alkuper\u00e4inen l\u00e4hett\u00e4j\u00e4 eli <code>1.2.3.4</code>, joten palvelin tiet\u00e4\u00e4, kenelle vastaus pit\u00e4\u00e4 l\u00e4hett\u00e4\u00e4. My\u00f6s <code>source port</code> ja <code>destination port</code> ovat kulkeneet IP-paketissa jatkuvasti mukana. Vain MAC-osoitteisiin (ja hop counteriin) on puututtu matkan varrella.</p> <p>Teht\u00e4v\u00e4</p> <p>Aihe on kohtalaisen monimutkainen ja sen parissa kannattaa viett\u00e4\u00e4 aikaa. Tutustu aiheisiin my\u00f6s muiden l\u00e4hteiden avulla. Yksi suositeltu l\u00e4hde on Practical Networking: Networking Fundamentals-soittolista YouTubessa. Lesson 5 (Pt. I &amp; II) k\u00e4sittelee reitityst\u00e4.</p> <p>Teht\u00e4v\u00e4</p> <p>Yll\u00e4 olevassa esimerkiss\u00e4 j\u00e4tettiin NAT k\u00e4sittelem\u00e4tt\u00e4, vaikka l\u00e4hiverkon ip-osoite <code>10.x.x.x</code> vaihtui julkiverkon IP-osoitteeksi <code>1.x.x.x</code>. Mik\u00e4li NAT tosiaan olisi k\u00e4yt\u00f6ss\u00e4, kuinka Internet-tason headereihin, varsinkin <code>source IP</code>:hen, olisi kajottu ja miss\u00e4 vaiheissa?</p>"},{"location":"protokollat_ja_standardit/reititys/#reititys-todellisuudessa","title":"Reititys todellisuudessa","text":"<p>Yll\u00e4 olevan kaltaisia esimerkkej\u00e4 katsoessa on hyv\u00e4 muistaa, ett\u00e4 ne ovat Internetiin verrattuna huomattavan yksinkertaisia verkkoja. Internetin taustalla toimiva verkko, Internet Backbone, on hierarkinen. Kannattaa kerrata IP-osoitteiden materiaali: vanha luokkiin perustunut IP-jako on 90-luvulla korvattu CIDR:ll\u00e4, jossa ARPA hallinnoi koko Internet-osoiteavaruutta, ja delegoi siit\u00e4 osioita RIR:ille, jotka delegoivat siit\u00e4 osia suurille ISP:lle tai teknologiayrityksille, jotka delevoivat osia pienemmille toimijoille, ja niin edelleen. Lopulta jokin paikallinen ISP liisaa sinulle yhden tai useamman julkiverkon IP-osoitteen. Jos t\u00e4m\u00e4n rungosta haarautuvan rakenteen piirt\u00e4isi paperille, siit\u00e4 syntyisi puuta muistuttava haarautuva verkko.</p> <p></p> <p>Kuvio 2: Osa internetist\u00e4 kartoitettuna. L\u00e4hde: The Opte Project - Originally from the English Wikipedia. CC BY 2.5. </p> <p>Yll\u00e4 olevassa esimerkiss\u00e4 on tarkoituksella rikottu CIDR-periaatetta, jossa verkko pilkotaan pienempiin aliverkkoihin. Sen sijaan Kuvion 1 oikeanpuolisen reitittin takaa l\u00f6ytyy oudosti verkko <code>10.0.3.0/24</code>, joka ei ole verkon <code>1.2.3.0/24</code> aliverkko. Mik\u00e4li Internet toimisi oikeasti n\u00e4in, reitittimien pit\u00e4isi muistaa uskomaton m\u00e4\u00e4r\u00e4 verkkoja. T\u00e4m\u00e4n sijasta Internetin runkona on AS:i\u00e4 (Autonomous System), jotka ovat valtavia verkkoja, ja n\u00e4m\u00e4 ovat ristiin rastiin toisiinsa kytk\u00f6ksiss\u00e4. Jokaisella AS:ll\u00e4 on omat reititysk\u00e4yt\u00e4nn\u00f6t, ja AS:t viestiv\u00e4t n\u00e4ist\u00e4 kesken\u00e4\u00e4n protokollan BGP avulla (Border Gateway Protocol). Lue AS:ist\u00e4 lis\u00e4\u00e4 esimerkiksi t\u00e4\u00e4lt\u00e4: What is an autonomous system? | What are ASNs? | Cloudflare. BGP-protokollasta l\u00f6ytyy lis\u00e4\u00e4 tietoa samalta sivustolta: What is BGP? | BGP routing explained | Cloudflare.</p> <p></p> <p>Kuvio 3: Yll\u00e4 olevaa dummy-esimerkki\u00e4 todenmukaisempi kuvaus paketin kulusta (vihre\u00e4 viiva) Internetin AS-verkkojen l\u00e4pi. Huomaa, ett\u00e4 jokainen yksitt\u00e4inen paketti voi ajautua kulkemaan omaa reitti\u00e4\u00e4n.</p> <p>Lyhin reitti reitittimien l\u00e4pi ratkaistaan, mill\u00e4p\u00e4 muulla kuin, protokollalla. T\u00e4m\u00e4 protokolla on OSPF (Open Shortest Path First). Jotta mik\u00e4\u00e4n paketti ei j\u00e4isi py\u00f6rim\u00e4\u00e4n reittittimien v\u00e4liin ikuiseen looppiin, jokainen paketti sis\u00e4lt\u00e4\u00e4 \"hop countin\", ja jokaisella paketilla on asetettuna maksimi hop count, jonka j\u00e4lkeen se hyl\u00e4t\u00e4\u00e4n. T\u00e4m\u00e4 toiminta noudattaa protkollaa RIP (Routing Information Protocol).</p> <p></p> <p>Kuvio 4: Kuvitteellinen Internet, jossa IANA:an kuuluu vain kaikki RIR:i\u00e4, joista RIR1:lle kuuluu kaikki IP-osoitteet <code>0.0.0.0</code>-<code>127.255.255.255</code> ja RIR2:lle kaikki osoitteet <code>128.0.0.0</code> alkaen. </p> <p>Emme tied\u00e4, kuinka moneen aliverkon aliverkkoon (Kuvion 4) RIR1:een kuuluva AS1 on pilkottu. Meid\u00e4n, kuten ei my\u00f6sk\u00e4\u00e4n AS2:n reitttimen, ei tarvitse tiet\u00e4\u00e4 t\u00e4t\u00e4. AS1:n reittimet voivat hyvin ilmoittaa: \"T\u00e4\u00e4lt\u00e4 l\u00f6ytyv\u00e4t kaikki verkot 1.x.x.x\". N\u00e4in AS2:n reititystaulun ei tarvitse sis\u00e4lt\u00e4\u00e4 jokaista aliverkkoa AS1:ss\u00e4, vaan sille riitt\u00e4\u00e4 karkeimmalle mahdolliselle tasolle aggregoitu verkko-osoite: AS2:n reittitimet osaavat kyll\u00e4 vied\u00e4 paketin IP-osoitteen perusteella oikeaan aliverkkoon. Huomaathan, ett\u00e4 Kuvion 4 esimerkiss\u00e4 AS:t on yksinkertaistettu siten, ett\u00e4 niill\u00e4 on vain yksi reititin.</p> <p>Se, mik\u00e4 pysyy vakiona esimerkin monimutkaisuudesta riippumatta, on ett\u00e4</p>"},{"location":"protokollat_ja_standardit/reititys/#reitin-jaljittaminen","title":"Reitin j\u00e4ljitt\u00e4minen","text":"<p>Traceroute hy\u00f6dynt\u00e4\u00e4 IP-paketin Time-to-Live (TTL) kentt\u00e4\u00e4. Paketti l\u00e4hetet\u00e4\u00e4n ensin TTL-arvolla 1, jolloin l\u00e4hin reititin vastaa ICMPv4 Time Exceeded -viestill\u00e4. Sitten l\u00e4hetet\u00e4\u00e4n TTL 2, TTL 3, TTL 3 ja niin edelleen, kunnes saavutetaan m\u00e4\u00e4r\u00e4np\u00e4\u00e4.</p> <pre><code># Windows Command Promps\n$ tracert www.example.com\n\n# Linux/macOS\n$ traceroute www.example.com\n\n# Tutustu my\u00f6s lis\u00e4asetuksiin. macOS:lla toimii esimerkiksi:\n# -a  ... joka suorittaa AS-queryt ja tulostaa ne\n# -n  ... joka k\u00e4ytt\u00e4\u00e4 vain IP-osoitteita eik\u00e4 suorita reverse DNS hakuja\n# -q# ... joka rajaa testin # pakettiin\n$ traceroute -n -a -q1 www.example.com\n</code></pre>"},{"location":"protokollat_ja_standardit/tcp_malli/","title":"TCP/IP Reference Model","text":"<p>Yleisk\u00e4ytt\u00f6inen OSI-malli on tullut tutuksi aiemmissa luvuissa, joten nyt on aika siirty\u00e4 tutkimaan l\u00e4hes rinnaikaiseen aikaan syntynytt\u00e4 toista referenssimallia, TCP/IP Reference Modelia. Kyseinen malli ei ole pelk\u00e4st\u00e4\u00e4n teoreettinen malli, vaan jokseenkin mallin mukainen k\u00e4yt\u00e4nn\u00f6n toteutus, eli TCP/IP-protokollaperhe, toiselta nimelt\u00e4\u00e4n Internet Procotol Suite, on koko Internetin tekninen peruspilari. Viel\u00e4 90-luvulla ylemmill\u00e4 mallin kerroksilla oli joitakin kilpailevia protokollia, kuten NetBIOX, IPX/SPX ja AppleTalk, mutta TCP/IP on dominoinut toteutuksia siin\u00e4 m\u00e4\u00e4rin, ett\u00e4 Internetin historia ja TCP/IP-protokollaperheen historia kulkevat hyvinkin k\u00e4si k\u00e4dess\u00e4. IPX/SPX:\u00e4\u00e4 on esiintynyt kuitenkin yll\u00e4tt\u00e4v\u00e4nkin l\u00e4hihistoriassa. Esimerkiksi Red Alert -reaaliaikastrategia tuki l\u00e4hiverkossa vain IPX/SPX-ajureita, mik\u00e4 tarkoittaa ett\u00e4 pelaajan piti asentaa ja aktivoida kyseinen ajuri Windowsin Ohjauspaneelista.</p> <p>OSI on ISO-standardointij\u00e4rjest\u00f6n malli, kun taas TCP/IP Reference Model on Yhdysvaltain puolustusministeri\u00f6n (U.S. Department of Defence, DoD) ARPAnet:n (Advanced Research Projects Agency Network) arkkitehtuuria selitt\u00e4nyt malli. ARPAnet oli pakettiv\u00e4litteinen WAN-verkko, jonka kuljetuskerroksen (Transport) protokollana oli 1970-luvulla NCP, ja vuoden 1983 alkaen TCP/IP-protokolla. Huomaa, ett\u00e4 k\u00e4yt\u00f6ss\u00e4 ollut TCP/IP kehitettiin ennen OSI-mallia, joten sen keksij\u00e4t eiv\u00e4t selitt\u00e4neet TCP/IP-protokollia OSI-mallin avulla. Siit\u00e4 huolimatta TCP/IP:t\u00e4 voidaan kuvata - ja usein kuvataankin - nimenomaan OSI-mallin avulla. </p> <p>Note</p> <p>TCP/IP-protokolla(perhe) on siis k\u00e4yt\u00e4nn\u00f6n toteutus, jonka alkuper\u00e4inen abstraktio on TCP/IP-referenssimalli, mutta jota usein nyky\u00e4\u00e4n selitet\u00e4\u00e4n OSI-mallin avulla.</p>"},{"location":"protokollat_ja_standardit/tcp_malli/#osi-malli-vs-tcpip-malli","title":"OSI-malli vs. TCP/IP-malli","text":"<p> Figure 1: OSI-mallin ja TCP/IP-referenssimallin kerrosten vastaavuudet vertailu</p> <p>Alla tiivis kuvaus kunkin TCP/IP-mallin kerroksen k\u00e4yt\u00e4nn\u00f6n toteutuksesta TCP/IP-protokollaperheess\u00e4. Huomaat, ett\u00e4 niiden toiminta p\u00e4tee yll\u00e4tt\u00e4v\u00e4nkin hyvin OSI-mallin kuvaukseen eri kerroksista, mutta ylimm\u00e4n tason applikaatiokerrokset on puristettu yhteen isoon Application-kerrokseen ilman erillist\u00e4 istunto- tai esityskerrosta. </p> <ul> <li>~~Hardware~~<ul> <li> Alkuper\u00e4inen TCP/IP-referenssimalli ei k\u00e4sittele fyysist\u00e4 kerrosta laisinkaan, mutta se on mukana my\u00f6hemmiss\u00e4 mallin varianteissa, kuten Tanenbaumin Computer Networks -kirjan esittelem\u00e4ss\u00e4 mallissa. </li> </ul> </li> <li>Network Interface<ul> <li>TCP/IP-referenssimallin k\u00e4yt\u00e4nn\u00f6n toteutukset eiv\u00e4t monissa tapauksissa k\u00e4yt\u00e4 ainuttakaan TCP/IP-protokollaa, joka kuuluisi OSI-mallin tasolle 2 eli TCP/IP-mallin Network Interfaceen. T\u00e4m\u00e4 johtuu siit\u00e4, ett\u00e4 useimmiten TCP/IP-protokollat on rakennettu Ethernet-kerrosten tarjoaman abstraktion p\u00e4\u00e4lle, ja Ethernet vastaa OSI-kerrosten 1 ja 2 toiminnasta. Poikkeuksena on tilanteet, joissa Internet-kerros hy\u00f6dynt\u00e4\u00e4 PPP tai SLIP-protokollaa; t\u00e4m\u00e4 on tilanne esimerkiksi 56 kbps modeemia k\u00e4ytt\u00e4ess\u00e4. ARP-protokolla, joka suorittaa mappausta MAC-osoitteiden ja IP-osoitteiden v\u00e4lill\u00e4, py\u00f6rii tavallaan kerroksella kaksi, mutta sen voi n\u00e4hd\u00e4 my\u00f6s py\u00f6riv\u00e4n jossain kerrosten 2 ja 3 oudossa v\u00e4litilassa.</li> </ul> </li> <li>Internet<ul> <li>Internet-kerroksen tunnetuin protokolla on jo TCP/IP:n nimest\u00e4 tuttu IP-protokolla (Internet Protocol), ja samalla kerroksella on toteutettu sek\u00e4 IPv4 ett\u00e4 IPv6. Reititys tapahtuu tason kolme protokollien avulla, IP-osoitetta k\u00e4ytt\u00e4en, ja n\u00e4it\u00e4 reititysprotokollia ovat muun muassa OSPF, BGP ja RIP. My\u00f6s kurssilla mainittu NAT on t\u00e4m\u00e4n kerroksen TCP/IP-protokolla.</li> </ul> </li> <li>Transport<ul> <li>Kuljetuskerroksella toimivat kytkent\u00e4inen (eng. connection oriented) TCP-protokolla sek\u00e4 ei-kytkent\u00e4inen UDP-protokolla.</li> </ul> </li> <li>Application<ul> <li>TCP/IP-malli sitoo koko sovellusrajapinnan yhteen kerrokseen toisin kuin OSI-malli, jossa sovelluskerros on hieman ep\u00e4m\u00e4\u00e4r\u00e4inen sotku. T\u00e4ll\u00e4 kerroksella py\u00f6riv\u00e4t useat k\u00e4ytt\u00e4jille sovelluksista tutut protokollat kuten HTTP, FTP, SMTP, Telnet ja IRC sek\u00e4 useille k\u00e4ytt\u00e4jille kotimodeemin asetuksista tutut protokollat DHCP sek\u00e4 DNS.</li> </ul> </li> </ul>"},{"location":"protokollat_ja_standardit/sovellustaso/http/","title":"HTTP","text":"<p>HTTP on protokolla, jota k\u00e4ytet\u00e4\u00e4n v\u00e4litt\u00e4m\u00e4\u00e4n muun muassa HTML-sivuja. HTTP:n avulla voi siirt\u00e4\u00e4 k\u00e4yt\u00e4nn\u00f6ss\u00e4 mit\u00e4 tahansa dataa, kunhan data on enkoodattu tavalliseksi ASCII-merkist\u00f6ksi. Tutkitaan t\u00e4t\u00e4 hieman k\u00e4yt\u00e4nn\u00f6ss\u00e4.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#teoria","title":"Teoria","text":"<p>On t\u00e4rke\u00e4\u00e4 tiedostaa, ett\u00e4 Internet ja World Wide Web eiv\u00e4t ole sama asia. Internet on se valtava verkko, johon on kytkeytynyt useita eri verkkoja (eng. interconnected networks, internetworks). World Wide Web eli WWW on j\u00e4rjestelm\u00e4, joka mahdollistaa dokumenttien jakamisen Internetiss\u00e4, ja se k\u00e4ytt\u00e4\u00e4 kommunikaatioon protokollaa nimelt\u00e4\u00e4n HTTP (Hypertext Transfer Protocol). HTTP on siis protokolla eli k\u00e4yt\u00e4nt\u00f6, jota web-selaimet kuten Chrome k\u00e4ytt\u00e4v\u00e4t pyyt\u00e4ess\u00e4\u00e4n HTML-dokumentteja tai muita Webiin kuuluvia dokumentteja ja tiedostoja. Alkuper\u00e4inen HTTP on salaamatonta tietoa, joten kuka tahansa v\u00e4lik\u00e4si voi lukea viestin sis\u00e4ll\u00f6n. Nykyisin tyypilisimmin nettisivut k\u00e4ytt\u00e4v\u00e4t HTTP:\u00e4\u00e4, josta voit lukea seuraavasta luvusta lis\u00e4\u00e4.</p> <p>Hypertext Transfer Protocol siirt\u00e4\u00e4 siis paljon muutakin kuin varsinaista Hypertexti\u00e4 kuten HTML-dokumentteja. Samaa protokollaa k\u00e4ytet\u00e4\u00e4n my\u00f6s muiden assettien, kuten kuvien ja JavaScript-tiedostojen, hakemiseen. Sana hakeminen on t\u00e4rke\u00e4. HTTP on hyvin yksinkertaisiin kyselyihin ja vastauksiin (eng. request and response) perustuva protokolla.</p> <p>HTTP:n on luonut Tim Berners-Lee ja j\u00e4rjestelm\u00e4 sai alkunsa 1989. T\u00e4ll\u00f6in Berners-Lee ty\u00f6skenteli CERN:ll\u00e4. Mik\u00e4li historia kiinnostaa tarkemmin, t\u00e4h\u00e4n voi tutustua W3C:n A Little History of the World Wide Web-aikajanalla, joka sis\u00e4lt\u00e4\u00e4 muun muassa linkin alkuper\u00e4iseen webin aloittaneeseen dokumenttiin \"Information Management: A Proposal\". Ensimm\u00e4inen ikin\u00e4 k\u00e4yt\u00f6ss\u00e4 ollut HTTP-protokolla oli versioltaan HTTP/0.9. Kysely oli tasan yhden rivin pitk\u00e4, esimerkiksi <code>GET /page.html\\r\\n</code>. Muita verbej\u00e4 kuin GET ei ollut m\u00e4\u00e4ritelty viel\u00e4. Vastaus ei sis\u00e4lt\u00e4nyt mit\u00e4\u00e4n metadataa vaan pelk\u00e4n sivun. Katso Mozillan Evolution of HTTP sivulta esimerkki kutsusta ja palautuvasta sivusta.</p> Versio Spesifikaation vuosi HTTP/0.9 1991 HTTP/1.0 1996 HTTP/1.1 1997 HTTP/2 2015 HTTP/3 TBA <p>HTTP/1.0 lis\u00e4si standardiin verbit HAED ja POST, versionumeron, HTTP headerit (esim. <code>Accept: text/html</code>), sek\u00e4 statuskoodit \u2013 ja ylip\u00e4\u00e4t\u00e4ns\u00e4 palautuvaan viestiin muutakin sis\u00e4lt\u00f6\u00e4 kuin itse dokumentin. Samalla lis\u00e4ttiin tuki my\u00f6s muun materiaalin kuin <code>text/html</code>:n siirt\u00e4miseen.</p> <p>Warning</p> <p>HTML-dokumentteihin oli siis jatkossa mahdollista upottaa GIF-kuvia tai -animaatioita. N\u00e4ist\u00e4 suorastaan p\u00e4risev\u00e4n kuuluisa oli Ally McBealiss\u00e4kin vilahtanut Dancing Baby GIF.</p> <p>Teht\u00e4v\u00e4</p> <p>Etsi 1990-luvun puoliv\u00e4lin verkkosivustoja jostakin Internetin arkistointipalvelusta. Esimerkkin\u00e4 Hakupalvelu www.fi vuodelta 1996.</p> <p>HTTP/1.1 julkaistiin vain muutamaa kuukausi HTTP/1.0:n j\u00e4lkeen. Se lis\u00e4si muutaman ominaisuuden, jotka n\u00e4in j\u00e4lkik\u00e4teen saattavat tuntua jopa itsest\u00e4\u00e4nselvilt\u00e4. N\u00e4ist\u00e4 ehk\u00e4 merkitt\u00e4vimm\u00e4t ovat:</p> <ul> <li>Host-headerista (<code>Host: example.com</code>) tuli pakollinen. T\u00e4m\u00e4 mahdollisti sen, ett\u00e4 yhden ja saman ip-osoitteen palvelin palvelee usean eri domainin verkkosivua.</li> <li>Yhteyden voi j\u00e4tt\u00e4\u00e4 p\u00e4\u00e4lle (<code>Connection: Keep-Alive</code>), jolloin jokaista pyynt\u00f6\u00e4 varten ei tarvitse luoda uutta yhteytt\u00e4.</li> <li>Pyynt\u00f6jen liukuhihnoittaminen (eng. pipelining) lis\u00e4ttiin, jolloin asiakas voi l\u00e4hett\u00e4\u00e4 uusia <code>GET</code>-pyynt\u00f6j\u00e4, vaikka edellisen k\u00e4sittely olisi yh\u00e4 kesken. T\u00e4m\u00e4 nopeuttaa latausta sivuissa, joissa on suuri m\u00e4\u00e4r\u00e4 eri dokumentteja (CSS, JavaScript, kuvia...).</li> <li>Sis\u00e4ll\u00f6n kieleen ja merkist\u00f6\u00f6n liittyv\u00e4 metadatalle asetettiin muoto ja paikka (esim. <code>charset= utf-8</code>).</li> </ul> <p>HTTP/1.1 ei lev\u00e4nnyt t\u00e4ysin staattisesti laakereillaan, vaan siihen on lis\u00e4tty vuosien varrella toiminnallisuuksia, joista osa voidaan luokitella omiksi protokollikseen, kuten WebSocket ja HTTPS.</p> <p>Yll\u00e4 mainittiin statuskoodit. Ne tulevat palvelinta kokeillessa tutuksi. Alla kuitenkin muutama statuskoodi, joihin todenn\u00e4k\u00f6isesti t\u00f6rm\u00e4\u00e4t jo t\u00e4m\u00e4n kurssin aikana:</p> Statuskoodin kategoria Esimerkki 2xx 200 (OK). Pyynt\u00f6\u00f6n vastattu onnistuneesti. 3xx 301 (Moved Permanently). Sivu l\u00f6ytyy toisesta URL:sta, joka lukee vastauksen headerissa. 4xx 404 (Not Found). Dokumentti, jota GET pyysi, ei ole olemassa. 5xx 500 (Internal Server Error). Geneerinen virhe. Palvelinpuolen koodissa on tapahtunut jotain odotamatonta. <p>HTTP/2.0 ja uudemmat k\u00e4sitell\u00e4\u00e4n toisessa luvussa.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#kaytanto","title":"K\u00e4yt\u00e4nt\u00f6","text":""},{"location":"protokollat_ja_standardit/sovellustaso/http/#html-ja-http-forms","title":"HTML ja HTTP Forms","text":"<p>Alla olevan harjoitteen seuraamiseen tarvitset seuraavat ohjelmat: * Python (HTTP-palvelinta varten) * curl (tulee Git Bashin mukana) * Wireshark (asenna heid\u00e4n nettisivuiltaan)</p>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#luo-tarvittavat-tiedostot","title":"Luo tarvittavat tiedostot","text":"<p>Aloitetaan tutkimalla asiaa tavallisen nettisivun ja HTTP-palvelimen avulla. Luo valitsemaasi kansioon seuraavat tiedostot:</p> <pre><code>.\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 receiver.html\n\u2514\u2500\u2500 static\n    \u2514\u2500\u2500 js\n        \u2514\u2500\u2500 receiver.js\n</code></pre> <p>Lis\u00e4\u00e4 <code>index.html</code>-tiedostoon seuraava sis\u00e4lt\u00f6:</p> <pre><code>&lt;!-- Body of index.html --&gt;\n&lt;body&gt;\n    &lt;form action=\"receiver.html\" method=\"GET\" accept-charset=\"UTF-8\"&gt;\n        &lt;!-- Param one--&gt;\n        &lt;label for=\"param\"&gt;Parameter:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"param\" name=\"param\" value=\"example\"&gt;\n\n        &lt;!-- Button --&gt;\n        &lt;button type=\"submit\" value=\"Submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n</code></pre> <p>Yll\u00e4 on HTML 5 -dokumentin koodi, pois lukien html ja head tagit. Lis\u00e4\u00e4 ne itse. HTML-tiedostossa on yhden kent\u00e4n sis\u00e4lt\u00e4v\u00e4 HTML Form eli kaavake. Formin action on \"receiver.html\", eli <code>submit</code>-n\u00e4pp\u00e4in l\u00e4hett\u00e4\u00e4 HTTP-pyynn\u00f6n relatiiviseen osoitteeseen <code>receiver.html</code>, mik\u00e4 on koko osoitteena t\u00e4ss\u00e4 tapauksessa <code>http://localhost:8000/receiver.html</code> - kunhan k\u00e4ynnist\u00e4t palvelimen.</p> <p>Lis\u00e4\u00e4 <code>receiver.html</code>-tiedostoon ja <code>receiver.js</code>-tiedostoon alla n\u00e4kyv\u00e4t sis\u00e4ll\u00f6t. Luomme toisen HTML-tiedoston, jotta p\u00e4\u00e4semme JavaScriptill\u00e4 muuttujiin k\u00e4siksi.</p> <pre><code>&lt;!-- Body of receiver.html --&gt;\n&lt;body&gt;\n    &lt;p&gt;\n        Get back to form by clicking &lt;a href=\"index.html\"&gt;THIS LINK&lt;/a&gt;\n    &lt;/p&gt;\n\n    &lt;h2&gt;Received GET Parameters:&lt;/h2&gt;\n    &lt;div id=\"output\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"static/js/receiver.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>// The contents of static/js/receiver.js\n\nfunction displayGets() {\n    // Check url docs: https://developer.mozilla.org/en-US/docs/Web/API/URL/search\n    const queryString = window.location.search;\n\n    // Check docs: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n    const mySearchParams = new URLSearchParams(queryString);\n\n    // Get the element where we append these\n    const outputElement = document.getElementById('output');\n\n    for (const [key, value] of mySearchParams.entries()) {\n        const paramElement = document.createElement('p');\n        paramElement.textContent = `${key}: ${value}`;\n        outputElement.append(paramElement);\n        console.log(key, value)\n    }\n}  \n\n// Call the function to display GET parameters when the page loads\ndisplayGets();\n</code></pre>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#kaynnista-palvelin","title":"K\u00e4ynnist\u00e4 palvelin","text":"<p>Navigoi oikeaan kansioon ja aja komento:</p> <pre><code>python -m http.server -b 127.0.0.1 # [-d subdirectory]\n</code></pre>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#testaa","title":"Testaa","text":"<ol> <li>K\u00e4ynnist\u00e4 Wireshark ja aloita loopback devicen pakettien kaappaus.</li> <li>Navigoi nettiselaimella osoitteeseen <code>http://127.0.0.1:8000</code>. Pythonin HTTP-serverin pit\u00e4isi tarjota linkki t\u00e4h\u00e4n. </li> <li>Sy\u00f6t\u00e4 param-kentt\u00e4\u00e4n jokin merkkijono, kuten <code>Sp\u00e4m sp\u00e4m sp\u00e4m * 100</code></li> <li>Pys\u00e4yt\u00e4 Wiresharkin kaappaus</li> <li>Analysoi dumppia Wiresharkissa</li> </ol> <p>Teht\u00e4v\u00e4</p> <p>Vaihda HTML Formista method <code>GET</code> =&gt; <code>POST</code>. Katso, mit\u00e4 tapahtuu sek\u00e4 Wiresharkissa ett\u00e4 selaimessa, kun yrit\u00e4t k\u00e4ytt\u00e4\u00e4 kaavaketta. Muistathan painaa refreshi\u00e4 (F5) v\u00e4liss\u00e4, jotta <code>index.html</code> on varmasti ladattu uusiksi.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#http-pyynto-komentorivilta","title":"HTTP-pyynt\u00f6 komentorivilt\u00e4","text":"<p>K\u00e4ytet\u00e4\u00e4n seuraavaksi verkkoselaimen sijasta huomattavasti yksinkertaisempaa sovellusta nimelt\u00e4\u00e4n curl. Tarkista alkuun, ett\u00e4 ohjelma on asennettuna. Sen pit\u00e4isi olla Git Bash:ss\u00e4 vakiona:</p>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#curl-localhost","title":"curl localhost","text":"<pre><code>$ curl --version\ncurl 8.1.2 (x86_64-apple-darwin22.0) libcurl/8.1.2 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.11 nghttp2/1.51.0\n...\n</code></pre> <p>Kokeile seuraavia komentoja. Tarkkaile my\u00f6s, mit\u00e4 tapahtuu</p> <pre><code># Luo shell-istunnon ajaksi muuttuja url\n$ url=\"http://127.0.0.1:8000\"\n\n# Kutsu index.html-tiedostoa\n$ curl $url\n\n# Kutsu my\u00f6s receiveri\u00e4\n$ curl \"$url/receiver.html?param=kissa\"\n\n# Kokeile my\u00f6s verbose optionia\n$ curl -vvv $url\n</code></pre>"},{"location":"protokollat_ja_standardit/sovellustaso/http/#curl-web","title":"curl web","text":"<p>Kokeillaan my\u00f6s sivuston JSON Placeholder k\u00e4ytt\u00f6\u00e4. Vierailethan sivuilla, jotta tied\u00e4t, mist\u00e4 on kyse!</p> <pre><code># Luo shell-istunnon ajaksi muuttuja url (jyr\u00e4\u00e4 edellisen arvon)\n$ url=\"https://jsonplaceholder.typicode.com\"\n\n# Tee POST, GET ja DELETE\n</code></pre>"},{"location":"protokollat_ja_standardit/sovellustaso/http2/","title":"HTTP/2","text":"<p>HTTP/1.1, joka sallii saman yhteyden k\u00e4yt\u00f6n useisiin eri pyynt\u00f6ihin, on ollut k\u00e4yt\u00f6ss\u00e4 Internetin kannalta pitk\u00e4\u00e4n: 90-luvulta lopulta aina t\u00e4h\u00e4n p\u00e4iv\u00e4\u00e4n saakka. N\u00e4iden vuoden aikana on tapahtunut luonnollisesti muutoksia:</p> <ul> <li>Internet-yhteydet ovat nopeutuneet</li> <li>Sivut ovat kasvaneet kilotavuista megatavuihin</li> <li>Sivut ovat muuttuneet staattisista sivuista interaktiivisiksi web-applikaatioiksi</li> </ul>"},{"location":"protokollat_ja_standardit/sovellustaso/http2/#perakkaisten-kyselyiden-viive","title":"Per\u00e4kk\u00e4isten kyselyiden viive","text":"<p>Olemme aiemmin kurssin aikana oppineet, ett\u00e4 \"GET / HTTP/1.1\"-pyynt\u00f6 palauttaa index.html-tiedoston. Internet-selain kuten Chrome tulkitsee tiedoston sis\u00e4ll\u00f6n ja pyyt\u00e4\u00e4 seuraavaksi ne tiedostot, joihin HTML-tiedostossa viitataan, kuten <code>style.css</code> sek\u00e4 <code>main.js</code> sek\u00e4 <code>kissa.jpg</code>. T\u00e4m\u00e4 tarkoittaa, ett\u00e4 selain l\u00e4hett\u00e4\u00e4 palvelimelle useita pyynt\u00f6j\u00e4, joihin palvelin vastaa. Pyynn\u00f6t l\u00e4hetet\u00e4\u00e4n yksi toisensa per\u00e4\u00e4n eik\u00e4 rinnakkain. Mik\u00e4li pyynt\u00f6j\u00e4 on satoja, ja viive on kymmeni\u00e4 tai jopa satoja millisekunteja, sivuston lataus kest\u00e4\u00e4 luonnollisesti kauan. Viiveet kumuloituvat.</p> <p>Warning</p> <p>Huomaa, ett\u00e4 ongelmaa ei voi ratkaista nopeammalla (esim. 10 Mbps vs 1000 Mbps) Internet-yhteydell\u00e4. Kaistanleveyden kasvattaminen ei auta, koska ongelma on viiveess\u00e4, ei kaistanleveydess\u00e4.</p> <p>Ongelman voi pyrki\u00e4 ratkaista monin muin tavoin, joihin lukeutuvat:</p> <ul> <li>V\u00e4henn\u00e4 tiedostojen m\u00e4\u00e4r\u00e4\u00e4.<ul> <li>Yhdist\u00e4 useat CSS-tiedostot yhdeksi.</li> <li>Bundlaa useiden eri JS-tiedostojen koodi suoraan HTML-tiedostoon. (webpack)</li> <li>Bundlaa useat kuvat yhdeksi isommaksi kuvaksi ja leikkele koodissa. (sprites)</li> </ul> </li> <li>Paginoi<ul> <li>Lataa vain v\u00e4h\u00e4n kontenttia kerrallaan, ja loput my\u00f6hemmin kun k\u00e4ytt\u00e4j\u00e4 selaa alasp\u00e4in tai klikkaa next.</li> </ul> </li> <li>Pipelining <ul> <li>Ks. Wikipedia: Pipelining</li> <li>Teoriassa hyv\u00e4 ratkaisu, mutta k\u00e4yt\u00e4nn\u00f6ss\u00e4 j\u00e4\u00e4nyt k\u00e4ytt\u00e4m\u00e4tt\u00e4.</li> </ul> </li> <li>Useat HTTP-yhteydet<ul> <li>Hae kuvat images.domain.com subdomainista. (sharding)</li> <li>Haittana TCP- ja HTTPS-k\u00e4ttelyit\u00e4 joudutaan tekem\u00e4\u00e4n useita.</li> </ul> </li> </ul> <p></p> <p>Kuvio 1: \u00c4\u00e4rimm\u00e4isen k\u00e4rjistetty HTTP/1.1:n ero ilman Pipelining ominaisuutta ja sen kanssa.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/http2/#http2-ratkaisut","title":"HTTP/2 ratkaisut","text":"<p>Yll\u00e4 esitellyt kikat paikata HTTP/1.1:n tehottomuutta toimivat jossakin m\u00e4\u00e4rin, mutta HTTP/2 tarjoaa kest\u00e4v\u00e4mpi\u00e4 ratkaisuja. Itse standardi l\u00f6ytyy t\u00e4\u00e4lt\u00e4: RFC 9113</p> <p>Warning</p> <p>Huomaa, ett\u00e4 HTTP/2 toimii vain ja ainoastaan HTTPS:n kanssa, ei koskaan HTTP:n kanssa. Yksik\u00e4\u00e4n osoite, joka alkaa <code>http://</code> ei koskaan k\u00e4yt\u00e4 HTTP/2:sta.</p> <p>HTTP/2:n t\u00e4rkeimm\u00e4t ominaisuudet ovat:</p> <ul> <li>Header compression (HPACK)<ul> <li>Header pienenee, joten siirrett\u00e4v\u00e4n datan m\u00e4\u00e4r\u00e4 v\u00e4henee.</li> </ul> </li> <li>Multiplexing<ul> <li>Useat viestit limitet\u00e4\u00e4n yhteen viestikanavaan. Ks. Wikipedia: Multipleksaus</li> </ul> </li> <li>Pyynt\u00f6jen priorisointi<ul> <li>Limitett\u00e4ville viesteille voidaan asettaa priorittiarvo (weight), joka m\u00e4\u00e4rittelee, miss\u00e4 j\u00e4rjestyksess\u00e4 ne tulee prosessoida.</li> </ul> </li> <li>Server Push<ul> <li>Palvelin voi l\u00e4hett\u00e4\u00e4 dataa ilman ett\u00e4 asiakas pyyt\u00e4\u00e4 sit\u00e4. Katso esimerkki: Medium: HTTP/2 Server Push tutorial</li> </ul> </li> </ul> <p>Teht\u00e4v\u00e4</p> <p>Avaa incognito-ikkuna ja k\u00e4y alla olevissa osoitteissa. Vertaile latausaikojen eroja:</p> <ul> <li>HTTP://www.httpvshttps.com</li> <li>HTTPS://www.httpvshttps.com</li> </ul> <p>Koeasetelma on hyvinkin k\u00e4rjistetty, mutta se havainnollistaa hyvin HTTP/2:n ja HTTP/1.1:n eroja. Muista tutkia my\u00f6s Network-v\u00e4lilehte\u00e4 Developer Toolsien avulla.</p> <p>Tip</p> <p>Jos haluat kokeilla Chrome-selainta ilman HTTP/2-tukea, luo pikakuvake, joka k\u00e4ynnist\u00e4\u00e4 sen <code>--disable-http2</code>-flagilla tai k\u00e4ynnist\u00e4 se komentokehotteen kautta <code>chrome --disable-http2</code>. T\u00e4m\u00e4 mahdollistaa Developer Toolsien Network-v\u00e4lilehdell\u00e4 HTTP/2:n ja HTTP/1.1:n erovavaisuuksien vertailun. Muistathan tuhota cachet. Incognito saattaa auttaa.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/https/","title":"HTTPS","text":"<p>HTTPS ei varsinaisesti ole oma protokollansa. Applikaatio-tason viesti on yh\u00e4 HTTP-viesti, mutta se salataan alemmilla kerroksilla. Salaukseen k\u00e4ytetty protokolla on nykyisin TLS, mutta sit\u00e4 kutsutaan yh\u00e4 usein aiemmalla prototokollan nimell\u00e4 SSL. HTTP-palvelimet kuuntelevat tyypillisesti TCP-porttia 80, kun taas HTTPS:n vakioportti on 443.</p> <p>Kun osoitekent\u00e4n URI alkaa <code>https://</code>-skeemalla, asiakas ja palvelin suorittavat SSL/TLS-k\u00e4ttelyn, ja keskustelun ajan viestit salataan kyseisen keskustelun ajaksi sovittua symmetrista avainta k\u00e4ytt\u00e4en. K\u00e4ttelyss\u00e4 asiakas ja palvelin sopivat muun muassa k\u00e4ytetyn salausalgoritmin. Itse neuvottelun tekemiseen k\u00e4ytet\u00e4\u00e4n asymmetrisia avaimia, ja t\u00e4h\u00e4n riitt\u00e4\u00e4, ett\u00e4 palvelimella on oma avaimensa. Palvelimen avaimen on signeerannut varmenneviranomainen (eng. certificate authority, CA)</p> TCP-kerros OSI-kerros Protokolla Application Application HTTP Application Session SSL/TLS Transport Transport TCP Internet Network IP Network Interface Data Link esim. Ethernet Physical --- <p>Kuvio 1: TLS sijoittuu TCP/IP-protokollaperheess\u00e4 applikaatiokerrokselle HTTP-protokollan alle.</p> <p>Teht\u00e4v\u00e4</p> <p>Ota selv\u00e4\u00e4, kuinka saat omalle sivustollesi TLS-sertifikaatin Let's Encrypt -palvelua k\u00e4ytt\u00e4en. Yksi hyv\u00e4 paikka aloittaa penkominen on Certbot Instructions | Certbot (eff.org).</p> <p>Teht\u00e4v\u00e4</p> <p>Suuntaa <code>https://www.kamk.fi</code> ja <code>https://www.yle.fi</code> etusivuille. Selvit\u00e4, mik\u00e4 taho on kunkin sivuston sertifikaatin antanut varmenneviranomainen eli CA. Suuntaa my\u00f6s sivulle <code>http://www.example.com/</code> ja tarkkaile kuinka selain k\u00e4ytt\u00e4ytyy ei-salatun HTTP-sivuston kohdalla.</p> <p>Teht\u00e4v\u00e4</p> <p>Yrit\u00e4 navigoida HTTP-protokollaa k\u00e4ytt\u00e4en (salaamattomana) Wikipedia-sivulle. Liit\u00e4 t\u00e4m\u00e4 osoite verkkoselaimesi osoitekentt\u00e4\u00e4n: <code>http://en.wikipedia.org/wiki/World_Wide_Web</code>. Kun sivu aukeaa, klikkaa osoitekentt\u00e4\u00e4 ja katso oletko haluamallasi <code>http://</code>-alkuisella vai <code>https://</code>-alkuisella sivulla. Seuraavaksi tee sama curl:lla. Aja komento <code>curl -vvv http://en.wikipedia.org/wiki/World_Wide_Web</code>. Kuinka wikipedia vastaa?</p>"},{"location":"protokollat_ja_standardit/sovellustaso/mqtt/","title":"MQTT","text":"<p>MQTT (Message Queuing Telemetry Transport) on laitteiden v\u00e4liseen viestint\u00e4\u00e4n tarkoitettu protokolla. MQTT on tarkoitettu tilanteisiin, joissa laitteiden tulee olla yhteydess\u00e4 toisiinsa, mutta laitteiden resurssit ovat rajalliset. T\u00e4llaisia tilanteita ovat esimerkiksi anturit, joissa on vain v\u00e4h\u00e4n muistia ja laskentatehoa. Protokolla on usein k\u00e4yt\u00f6ss\u00e4 erilaisten IoT (Internet of Things) ratkaisuiden kanssa. Toisin kuin valtaosa muista kurssin protokollista, MQTT on publish-subscribe arkkitehtuurin mukainen, mik\u00e4 k\u00e4yt\u00e4nn\u00f6ss\u00e4 tarkoittaa sit\u00e4, ett\u00e4 clientin ja serverin sijasta peliin astuu broker eli viestinv\u00e4litt\u00e4j\u00e4.</p> <p>Yksitt\u00e4inen viestij\u00e4 voi toteuttaa sek\u00e4 publish ett\u00e4 subscribe rooleja.</p> <pre><code>graph LR\n    subgraph iot_clients\n        A1[Temperature Sensor]\n        A2[Pressure Sensor]\n    end\n    subgraph broker\n        B[MQTT Broker]\n    end\n    subgraph app_clients\n        C1[Mobile App]\n        C2[Analytics App]\n    end\n\n    A1 -- pub ---&gt; B\n    A2 -- pub ---&gt; B\n    B -- sub ---&gt; C1\n    B -- sub ---&gt; C2</code></pre> <p>Warning</p> <p>K\u00e4yt\u00e4nn\u00f6n tasolla tilanne ei ole aina yht\u00e4 yksinkertainen kuin yll\u00e4 olevassa diagrammissa. IoT-asiakakkaiden ja brokerin v\u00e4liss\u00e4 voi olla esimerkiksi erillinen MQTT Gateway.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/mqtt/#topics","title":"Topics","text":"<p>MQTT:ss\u00e4 viestit julkaistaan (publish) topicciin ja niit\u00e4 luetaan (subscribe) topicista. Topic on hierarkinen ja muistuttaa hieman kansiorakennatta. Yksitt\u00e4inen client voi kirjoittaa ja/tai lukea yhteen tai useampaan topiciin. Alla esimerkki:</p> <pre><code># Tuottajat\nTEMPERATURE_SENSOR ==&gt; /home/livingroom/temperature\nPRESSURE_SENSOR ==&gt; /home/livingroom/pressure\n\n# Yhden topicin kuluttajat\n/home/livingroom/temperature ==&gt; TERMOSTAT_CONTROLLER\n/home/livingroom/pressure ==&gt; PRESSURE_CONTROLLER\n\n# Kaikkien topicin kuluttaja\n/home/livingroom/temperature ==&gt; ANALYTICS_APP\n/home/livingroom/pressure ==&gt; ANALYTICS_APP\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Tutustu my\u00f6s muihin publish-subscribe ratkaisuihin pintapuoleisesti. Voit k\u00e4ytt\u00e4\u00e4 tutustumiseen esimerkiksi valitsemasi hakukoneen kuvapohjaista hakua. Muita ratkaisuita ovat esimerkiksi:</p> <ul> <li>Apache Kafka<ul> <li>K\u00e4ytt\u00e4\u00e4 termej\u00e4 \"producer\" ja \"consumer\".</li> </ul> </li> <li>RabbitMQ<ul> <li>K\u00e4ytt\u00e4\u00e4 termi\u00e4 \"queue\" topicin sijaan.</li> </ul> </li> <li>Amazon SNS</li> <li>Google Cloud Pub/Sub</li> <li>Redis Pub/Sub<ul> <li>K\u00e4ytt\u00e4\u00e4 termi\u00e4 \"channel\" topicin sijaan.</li> </ul> </li> </ul> <p>Teht\u00e4v\u00e4</p> <p>Tutustu MQTT-viestin sis\u00e4lt\u00f6\u00f6n tarkemmin: Understanding an MQTT Packet: Ultimate Guide</p>"},{"location":"protokollat_ja_standardit/sovellustaso/mqtt/#client","title":"Client","text":"<p>MQTT:st\u00e4 l\u00f6ytyy kaksi eri OSI Layer 4 variaatiota:</p> <ul> <li>MQTT<ul> <li>K\u00e4ytt\u00e4\u00e4 TCP:t\u00e4</li> </ul> </li> <li>MQTT-SN (MQTT for Sensor Networks)<ul> <li>K\u00e4ytt\u00e4\u00e4 UDP:t\u00e4</li> </ul> </li> </ul> <p>Yksi Python-toteutus on paho-mqtt. Sen k\u00e4ytt\u00f6\u00f6n l\u00f6ytyy dokumentaatiosta ohjeita, joista alla hyvin tiivis esimerkki:</p> <pre><code>mqttc.connect(\"mqtt.eclipseprojects.io\")\nmqttc.loop_start()\n\nwhile True:\n    temperature = sensor.blocking_read()\n    mqttc.publish(\"paho/temperature\", temperature)\n</code></pre> <p>Tip</p> <p>Yksi monista MQTT(-SN) asiakasohjelmista on Paho. K\u00e4y tutustumassa Eclipse Foundationin Paho-sivustoon.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/mqtt/#broker","title":"Broker","text":"<p>MQTT brokereita l\u00f6ytyy my\u00f6s useita, joista valita. Alla esimerkkej\u00e4:</p> <ul> <li>Mosquitto</li> <li>HiveMQ</li> </ul> <p>MQTT-pohjaisia IoT-ratkaisuja tarjoavat my\u00f6s useat pilvipalveluntarjoajat ja muut toimijat. Alla esimerkkej\u00e4:</p> <ul> <li>AWS IoT Core</li> <li>Microsoft Azure IoT Hub</li> <li>CloudMQTT</li> </ul>"},{"location":"protokollat_ja_standardit/sovellustaso/quic/","title":"QUIC","text":"<p>Teht\u00e4v\u00e4</p> <p>Lue t\u00e4m\u00e4 Gcore artikkeli: What Is HTTP/3 and How Does It Differ from HTTP/2?</p>"},{"location":"protokollat_ja_standardit/sovellustaso/telnet/","title":"Telnet","text":"<p>Telnet on hyvin varhainen Internet-standardi (IETF STD 8) ja k\u00e4ytt\u00e4\u00e4 pohjalla TCP:t\u00e4. Standardiin kuuluvan dokumentin RFC 854 tiivistelm\u00e4 kertoo olennaisen:</p> <p>The purpose of the TELNET Protocol is to provide a fairly general, bi-directional, eight-bit byte oriented communications facility. Its primary goal is to allow a standard method of interfacing terminal devices and terminal-oriented processes to each other. It is envisioned that the protocol may also be used for terminal-terminal communication (\"linking\") and process-process communication (distributed computation). -- RFC 854 Abstract</p> <p>Lainauksessa mainittu \"eight-bit byte\" viittaa siihen, ett\u00e4 merkist\u00f6n\u00e4 k\u00e4ytettiin US-ASCII:ta, josta yleens\u00e4 k\u00e4ytet\u00e4\u00e4n lyhyemp\u00e4\u00e4 termi\u00e4 ASCII. Merkist\u00f6\u00f6n kuuluuvat avaruuden ensimm\u00e4iset 128 lukua (<code>00</code>-<code>7F</code> eli desimaalina <code>0-127</code>). N\u00e4m\u00e4 merkit l\u00f6yd\u00e4t esimerkiksi ASCII - Wikipedia-sivustolta. Viimeinen merkki (<code>FF</code>) on escape character, ja monet muut tavut, joiden merkitsevin eli vasemmanpuoleisin bitti on asetettu tilaan 1, ovat komentoja, jotka sy\u00f6tet\u00e4\u00e4n <code>FF</code>:n per\u00e4\u00e4n.</p> <p>Telnet mahdollistaa, tai ehk\u00e4 pikemminkin mahdollisti, sen, ett\u00e4 yht\u00e4 tietokonetta operoiva henkil\u00f6 pystyi et\u00e4k\u00e4ytt\u00e4\u00e4 verkon yli toista konetta. T\u00e4m\u00e4 voi nykyaikana kuulostaa itsest\u00e4\u00e4nselvyydelt\u00e4, mutta ARPANetin alkuaikoina k\u00e4ytt\u00e4j\u00e4ll\u00e4 piti olla yksi terminaali per yksi keskustietokone, mik\u00e4 on ilmeisen tehotonta. Viel\u00e4 tehottomampaa oli, jos keskustietokone oli fyysisesti eri paikassa kuin terminaali. T\u00e4ll\u00f6in piti rakentaa dedikoitu piiri terminaalin ja keskustietokoneen v\u00e4lille. Telnet ratkaisi t\u00e4m\u00e4n ongelman keskeisell\u00e4 idealla: \"Network Virtual Terminal\".</p> <p>Telneti\u00e4 hiottiin jopa melko pitk\u00e4\u00e4n. Ensimm\u00e4inen telnetiin liittyv\u00e4 RFC 97 (A First Cut at a Proposed Telnet Protocol) on vuodelta 1971, kun taas RFC 854 on vuodelta 1983. RFC 854:n mukaan Telnet rakentuu kolmen peruspilarin p\u00e4\u00e4lle:</p> <ol> <li>Network Virtual Terminal</li> <li>Negotiated options</li> <li>Symmetric view of Terminal and Processes</li> </ol> <p>Kohta yksi, NVT, viittaa virtuaaliseen terminaaliin. Kyseisen tietokoneen telnet-ohjelma ottaa vastaan k\u00e4ytt\u00e4j\u00e4lt\u00e4 sy\u00f6tteen, jonka se k\u00e4\u00e4nt\u00e4\u00e4 NVT:n natiiviin formaattiin. Kohta kaksi mahdollistaa, ett\u00e4 asiakas ja palvelin voivat neuvotella eri asetuksia p\u00e4\u00e4lle tai pois, kuten \"SUPPRESS-GO-AHEAD\", mik\u00e4 mahdollistaa full duplexin. Half duplex vaatii, ett\u00e4 viesti\u00e4 l\u00e4hett\u00e4v\u00e4 taho p\u00e4\u00e4tt\u00e4\u00e4 viestin \"GO AHEAD\"-komentoon, ja vain toinen taho voi l\u00e4hett\u00e4\u00e4 kerrallaan. Kohta kolme viittaa siihen, ett\u00e4 vaikka asiakas k\u00e4ynnist\u00e4\u00e4kin telnet-yhteyden palvelimeen, niin yhteyden muodostamisen j\u00e4lkeen keskustelukumppanit ovat tasa-arvoisia, ja data sek\u00e4 neuvottelut aiemmin mainituista asetuksista voivat virrata kumpaan tahansa suuntaan.</p> <p>Teht\u00e4v\u00e4</p> <p>Mieti yll\u00e4 olevan kuvauksen perusteella, lukisitko NVT:n kuuluvan OSI-mallin kerrokseen 6 eli Presentation vai 7 eli Application?</p> <p>Teht\u00e4v\u00e4</p> <p>Mitk\u00e4 protokollat ovat korvanneet telnetin et\u00e4k\u00e4yt\u00f6ss\u00e4? Mill\u00e4 protokollalla k\u00e4yt\u00e4t Linuxia et\u00e4n\u00e4? Ent\u00e4 Windowsia? Mit\u00e4 komentoja ovat <code>rlogin</code> ja <code>rcopy</code>?</p>"},{"location":"protokollat_ja_standardit/sovellustaso/telnet/#muut-kayttotarkoitukset","title":"Muut k\u00e4ytt\u00f6tarkoitukset","text":"<p>Tyypillinen tietokoneen k\u00e4ytt\u00e4j\u00e4 ei ole en\u00e4\u00e4 vuosikymmeniin k\u00e4ytt\u00e4nyt telneti\u00e4 et\u00e4k\u00e4ytt\u00f6\u00f6n. Telnet yhdistet\u00e4\u00e4n helposti nimenomaan et\u00e4k\u00e4ytt\u00f6\u00f6n, mutta Telnet ei m\u00e4\u00e4rittele, k\u00e4ytet\u00e4\u00e4nk\u00f6 keskustelukanavaa et\u00e4k\u00e4ytt\u00f6\u00f6n vai johonkin muuhun k\u00e4ytt\u00f6tarkoitukseen. Monet muut protokollat, kuten FTP, SMTP ja HTTP kommunikoivat l\u00e4hett\u00e4m\u00e4ll\u00e4 viestej\u00e4 Telnetin NVT:t\u00e4 k\u00e4ytt\u00e4en.</p> <p>Kokeile t\u00e4t\u00e4 k\u00e4yt\u00e4nn\u00f6ss\u00e4!</p> <ol> <li>Mik\u00e4li telnet ei ole asennettuna tai aktivoituna, etsi siihen k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4n/distron mukainen ohje. MacOS:ss\u00e4 tai Linuxissa voit k\u00e4ytt\u00e4\u00e4 my\u00f6s sovellusta nimelt\u00e4\u00e4n nc.</li> <li>Aja komento <code>telnet example.com 80</code>, mik\u00e4 avaa NVT:n porttiin 80. Porttia 80 kuuntelee HTTP-palvelin, joten sille voi sy\u00f6tt\u00e4\u00e4 HTTP-protokollan mukaisia viestej\u00e4. HTTP ei ymm\u00e4rr\u00e4 et\u00e4k\u00e4yt\u00f6st\u00e4 mit\u00e4\u00e4n.</li> <li>Kirjoita alla oleva viesti. Paina Ctrl+Shift+Enter joka rivin v\u00e4liss\u00e4 ja lopuksi l\u00e4het\u00e4 viesti painamalla Enter -n\u00e4pp\u00e4int\u00e4 kerran tai kahdesti.</li> </ol> <pre><code>GET / HTTP/1.1\nConnection: close\nHost: example.com\nUser-Agent: FeikkiSelain/1.0\n</code></pre> <p>Voit kokeilla my\u00f6s tiiviimp\u00e4\u00e4 muotoa, jossa j\u00e4t\u00e4t muun muassa HTTP-protokollan version m\u00e4\u00e4rittelem\u00e4tt\u00e4:</p> <pre><code>GET /\nHost: Example.com\n</code></pre>"},{"location":"protokollat_ja_standardit/sovellustaso/webhook/","title":"Webhook","text":"<p>Webhook ei ole varsinainen protokolla vaan REST API:n avulla toteutettu keino suorittaa callback-ilmoituksia. Webhookin avulla voidaan toteuttaa esimerkiksi seuraavanlaisia toiminnallisuuksia. Alla olevassa esimerkiss\u00e4 X on sinun py\u00f6ritt\u00e4m\u00e4si palvelin, ja Z on jokin kolmas osapuoli, jolta sin\u00e4 haluat saada ilmoituksia.</p> <ul> <li>L\u00e4het\u00e4 ilmoitus X:lle, kun uusi asiakas on rekister\u00f6itynyt Z:lle.</li> <li>L\u00e4het\u00e4 ilmoitus X:lle, kun Z-palvelun git-repositorioon on tehty uusi commit.</li> <li>L\u00e4het\u00e4 ilmoitus X:lle, kun Z-palvelun tietokantaan on lis\u00e4tty uusi rivi.</li> </ul> <p>Kyseess\u00e4 on siis hyvin tyypillinen \"callback function\", joka tulee t\u00e4ll\u00e4 kurssilla tutuksi ainakin JavaScriptin osalta. JavaScriptiss\u00e4 vastaava toiminnallisuus toteutetaan n\u00e4in:</p> <pre><code>function callbackFunction() {\n    // Tee jotain\n}\n\nconst button = document.querySelector('#button');\nbutton.addEventListener('click', callbackFunction);\n</code></pre> <p>Huomaa, ett\u00e4 jatkossa callbackFunction suoritetaan aina kun event <code>click</code> tapahtuu.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/webhook/#webhookin-rekisterointi","title":"Webhookin rekister\u00f6inti","text":"<p>Jotta voit rekister\u00f6id\u00e4 webhookin haluamaasi palveluun (yll\u00e4 <code>Z</code>), t\u00e4ytyy kyseisen palvelun toteuttaa jokin rajapinta, jossa voit kertoa k\u00e4yt\u00e4nn\u00f6n tasolla jotakin t\u00e4llaista:</p> <p>Aina kun {{ tapahtuma_a }} tapahtuu, l\u00e4het\u00e4 HTTP POST osoitteeseen www.saitti.fi/webhook.</p> <p>Sinun palvelusi (yll\u00e4 <code>X</code>) sek\u00e4 Z-palvelu kommunikoivat siis HTTP POST -pyynt\u00f6jen avulla. Kyseess\u00e4 on aivan tavallinen REST API -pyynt\u00f6. Jotta sinun palvelusi voi ymm\u00e4rt\u00e4\u00e4 palvelun Z l\u00e4hett\u00e4m\u00e4n viestin, tulee sinun palvelusi tiet\u00e4\u00e4 viestin skeema. Webhook ei ole standardi ja viel\u00e4 v\u00e4hemm\u00e4n standardi on sen sis\u00e4lt\u00e4m\u00e4 payload. Jokainen palvelu voi toteuttaa webhookin omalla tavallaan. Esimerkiksi GitHubin webhookin skeema on erilainen kuin GitLabin webhookin skeema. Skeema selvi\u00e4\u00e4 aina palvelun dokumentaatiosta.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/webhook/#case-polar-flow","title":"Case: Polar Flow","text":"<p>Polar Flow on Polar Oy:n kehitt\u00e4m\u00e4 sovellus, joka toimii yhdess\u00e4 Polar-urheilukellojen kanssa. Polar Flow -sovelluksen avulla k\u00e4ytt\u00e4j\u00e4 voi seurata harjoitteluaan, analysoida harjoitteluaan, ja jakaa harjoitteluaan muiden k\u00e4ytt\u00e4jien kanssa.</p> <p>\"Polar Accesslink webhooks allows client application to subscribe to receive notification when certain event occurs.\" L\u00e4hde:Accesslink API v3 docs: Accesslink Webhooks</p> <p>Ohjelmistonkehitt\u00e4j\u00e4t voivat kehitt\u00e4\u00e4 omia sovelluksia, jotka hy\u00f6dynt\u00e4v\u00e4t Polar Flow:n dataa heid\u00e4n suostumustensa mukaisesti. Katso Polarin sivuilta esimerkkej\u00e4: Polar: Compabtible Apps. Voit luoda oman applikaatiosi, mik\u00e4li haluat.</p> <p></p> <p>Kuvio 1: Polar Flow -sivuston n\u00e4kym\u00e4, jossa n\u00e4kyy asiakkaan aktivoimat Partner palvelut. YourAppHere voisi olla esimerkiksi t\u00e4ysin henkil\u00f6kohtaiseen k\u00e4ytt\u00f6\u00f6n luotu palvelu, jolla on tasan 1 k\u00e4ytt\u00e4j\u00e4 eli sin\u00e4 itse - tai kenties sovellus, jolla sin\u00e4 teet miljoonasi.</p> <p>Tip</p> <p>Mik\u00e4li haluat oikeasti rekister\u00f6id\u00e4 oman palvelusi, sinun tulisi luoda Polar Accesslink Client. Lue t\u00e4t\u00e4 varten ihan dokumentaation alusta How to get started? -osio. Seuraavissa esimerkeiss\u00e4 oletetaan, ett\u00e4 Client on luotu ja BasicAuth tai Oauth2-autentikaatio on hoidossa. HTTP headereista l\u00f6ytyy siis autentikaatioon tarvittavat tiedot.</p> <p>T\u00e4m\u00e4n toteuttaminen ei ole kurssin vaatimus.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/webhook/#webhookin-rekisterointi_1","title":"Webhookin rekister\u00f6inti","text":"<p>Kuten dokumentaatiosta selvi\u00e4\u00e4, webhookin luomista varten on oma endpoint: <code>POST /v3/webhooks</code>. Sinun tulee l\u00e4hett\u00e4\u00e4 HTTP-viesti verbill\u00e4 POST kyseiseen endpointtiin. Viestin sis\u00e4lt\u00e4m\u00e4 data (POST-viestin body) on muotoa:</p> <pre><code>{\n  \"events\": [\n    \"EXERCISE\"\n  ],\n  \"url\": \"https://myapp.example.com/acl_webhook\"\n}\n</code></pre> <p>Viestin l\u00e4hett\u00e4minen vaatii Basic -autentikaation eli pseudokoodina <code>b64encode(client_id + \":\" + client_secret)</code> l\u00e4hett\u00e4minen HTTP-pyynn\u00f6n headerissa.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/webhook/#webhookin-payload","title":"Webhookin payload","text":"<p>Kun sinun Polar Accesslink Clientisi on rekister\u00f6inyt webhookin Polar Flow -palveluun, Polar Flow l\u00e4hett\u00e4\u00e4 sinun palveluusi POST-viestin, kun jokin rekister\u00f6idyist\u00e4 tapahtumista tapahtuu. Yll\u00e4 rekister\u00f6itiin event <code>EXERCISE</code>, joten Polar Accesslink kutsuu sinun <code>/acl_webhook</code> endpointtia aina kun sinun API Clientin asiakas on synkannut eventin <code>EXERCISE</code> eli treeni Polar Flow -sovelluksessa. HTTP-pyynt\u00f6 on verbilt\u00e4\u00e4n POST ja sen body on muotoa:</p> <pre><code>{\n  \"event\": \"EXERCISE\",\n  \"user_id\": 475,\n  \"entity_id\": \"aQlC83\",\n  \"timestamp\": \"2018-05-15T14:22:24Z\",\n  \"url\": \"https://www.polaraccesslink.com/v3/exercises/aQlC83\"\n}\n</code></pre> <p>Sinun palvelusi voi reagoida t\u00e4h\u00e4n webhookiin esimerkiksi siten, ett\u00e4:</p> <ul> <li>Palvelusi k\u00e4y lukemassa <code>payload[\"url\"]</code> osoiteesta dataa.<ul> <li>T\u00e4h\u00e4n tarvitset <code>user_id==475</code> luvan.</li> <li>Lupa annetaan Oauth2-autentikaation avulla palvelusi ja Polar Accesslink Clientin v\u00e4lill\u00e4.</li> <li>Datan skeema l\u00f6ytyy Get exercise-endpointin dokumentaatiosta.</li> </ul> </li> <li>Datan perusteella palvelusi p\u00e4ivitt\u00e4\u00e4 tietokantaansa.</li> <li>Asiakkaalle l\u00e4hetet\u00e4\u00e4n viesti, ett\u00e4 palvelusta l\u00f6ytyy uutta tietoa (esim. Push Notification)</li> </ul> <p>Mit\u00e4 t\u00e4st\u00e4 lopulta hy\u00f6tyy? Hy\u00f6ty on, ett\u00e4 jatkuvan pollaamisen sijasta Polar kertoo sinulle, kun uutta dataa on saatavilla. Voit luoda kohtalaisen reaaliaikaisen Partner-connectionin ilman ett\u00e4 ammut jatkuvalla sy\u00f6t\u00f6ll\u00e4 \"Onko uutta dataa?\"-kyselyit\u00e4 eri endpointteihin.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/websocket/","title":"WebSocket","text":"<p>Aiemmissa otsakkeissa on esitelty HTTP header, joka l\u00e4hetet\u00e4\u00e4n jokaisen HTTP-pyynn\u00f6n mukana. HTTP-pyynn\u00f6n headerit voivat olla kilotavujen kokoluokassa, mik\u00e4li headereihin kuuluu keksej\u00e4. Kilotavun paketin l\u00e4hett\u00e4minen jatkuvasti tilanteessa, jossa kommunikaatio on chat-applikaation tyyliin tiivist\u00e4, olisi haaskausta. WebSocket-protokolla ratkaisee t\u00e4m\u00e4n ongelman. WebSocketin frame header on minimaalinen.</p> <p>Aiemmat esitellyt protokollat ovat perustuneet p\u00e4\u00e4osin client-server -malliin. Mik\u00e4li n\u00e4in haluttaisiin rakentaa chat-applikaatio, toimintaperiaate olisi, ett\u00e4 client k\u00e4visi jatkuvasti pollaamassa, ett\u00e4 \"Onko minulle viestej\u00e4?\". WebSocket ratkaisee my\u00f6s t\u00e4m\u00e4n ongelman. WebSocket-protokolla on kaksisuuntainen, jatkuvasti avoin yhteys palvelimen ja asiakkaan v\u00e4lill\u00e4. T\u00e4m\u00e4 mahdollistaa sen, ett\u00e4 palvelin voi l\u00e4hett\u00e4\u00e4 viestej\u00e4 asiakkaalle ilman, ett\u00e4 asiakas on pyyt\u00e4nyt niit\u00e4. </p> <p>On t\u00e4rke\u00e4 muistaa, ett\u00e4 protokolla on vain protokolla, ja ohjelmistonkehitt\u00e4j\u00e4t voivat luoda sill\u00e4 haluamiaan ohjelmia. Vaikka yll\u00e4 puhutaan chat-applikaatiosta, se on vain esimerkki. WebSocket-protokollan avulla voidaan toteuttaa esimerkiksi:</p> <ul> <li>Tulospalvelu (urheilumatsin aikana)</li> <li>Verkkopeli</li> <li>IoT-laitteen kommunikointikanava</li> <li>Dashboard-n\u00e4kym\u00e4</li> <li>Notifikaatiopalvelu</li> </ul> <p>WebSocket-protokolla on kuvattu RFC 6455 -standardissa.</p>"},{"location":"protokollat_ja_standardit/sovellustaso/websocket/#websocket-kattely","title":"WebSocket k\u00e4ttely","text":"<p>Yhteytt\u00e4 varten tulee muodostaa base64-enkoodattu SHA1-hash Sec-WebSocket-Key -headerin arvosta ja GUID:sta. Alla t\u00e4m\u00e4n osatekij\u00e4t:</p> <ul> <li>Sec-WebSocket-Key: 16 tavua pitk\u00e4 satunnainen merkkijono</li> <li>Globally Unique Identifier (GUID): constant 258EAFA5-E914-47DA-95CA-C5AB0DC85B11</li> <li>Sec-WebSocket-Accept: SHA1(Sec-WebSocket-Key + GUID) -&gt; base64</li> </ul> <p>Itse k\u00e4ttely on hyvin yksinkertainen. Client l\u00e4hett\u00e4\u00e4 pyynn\u00f6n, jossa on Sec-WebSocket-Key -header. Palvelin l\u00e4hett\u00e4\u00e4 vastauksen, jossa on Sec-WebSocket-Accept -header. T\u00e4m\u00e4n j\u00e4lkeen yhteys on muodostettu.</p> <p>Asiakas eli client muodostaa Sec-WebSocket-Key -headerin arvon seuraavasti:</p> <pre><code>import os, base64\n\n# Muodosta 16 tavua pitk\u00e4 satunnainen merkkijono\nkey = os.urandom(16)\n\n# Base64-enkoodaa merkkijono\nsec_websocket_key = base64.b64encode(key).encode(encoding='utf-8')\nprint(sec_websocket_key)\n'x3JJHMbDL1EzLkh9GBhXDw=='\n</code></pre> <p>Pyynt\u00f6 palvelimelle:</p> <pre><code>GET /chat HTTP/1.1\nHost: example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: PsBiRKg9c1uZIx/SjDELUg==\nSec-WebSocket-Version: 13\n</code></pre> <p>Palvelin muodostaa Sec-WebSocket-Accept -headerin arvon seuraavasti:</p> <pre><code># Staattinen GUID (ks. RFC 6455)\nGUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"\n\n# Liimaa client key ja GUID yhteen\nconcatenated = client_sec_websocket_key + GUID\n\n# Muodosta SHA1-hash\nhashed = hashlib.sha1(concatenated.encode('utf-8')).digest()\n\n# Base64-enkoodaa hash\nsec_websocket_accept = base64.b64encode(hashed).decode('utf-8')\nprint(sec_websocket_accept)\n'HSmrc0sMlYUkAGmm5OPpG2HaGWk=\n</code></pre> <p>Palvelimen vastaus sis\u00e4lt\u00e4\u00e4 HTTP-statuskoodin 101, mik\u00e4li k\u00e4ttely on suoritettu onnistuneesti.</p> <pre><code>HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\n</code></pre>"},{"location":"protokollat_ja_standardit/sovellustaso/websocket/#websocketin-kehys","title":"WebSocketin kehys","text":"<p>Jatkossa kommunikaatio suoritetaan WebSocket-protokollan osalta WebSocket-kehyksell\u00e4, joka v\u00e4litet\u00e4\u00e4n asiakkaan ja palvelimen v\u00e4lill\u00e4 TCP:n payloadina. Huomaa, ett\u00e4 yhteys avattiin HTTP-pyynn\u00f6ll\u00e4, mutta jatkossa WebSocket-kommunikaatio ei tarvitse HTTP headereita laisinkaan. Siin\u00e4 miss\u00e4 HTTP-pyynn\u00f6n headerit voivat olla kilotavujen kokoluokassa, WebSocket-kehyksen header on vain muutaman tavun kokoinen.</p> <p>Voit tutustua kehyksen sis\u00e4lt\u00f6\u00f6n Mozilla: Writing WebSocket servers-sivulla.</p> <p>Teht\u00e4v\u00e4</p> <p>WebSocket-kehyksen muodostaminen k\u00e4sin ja sen l\u00e4hett\u00e4minen telnetill\u00e4 olisi tuskaa, joten tuon vaiheen voit ohittaa. Aja sen sijasta lokaalia WebSocket-palvelinta (esim. FastAPI:lla) ja muodosta siihen yhteys clientill\u00e4 (esim. JavaScript WebSocket API). Kun teet t\u00e4m\u00e4n, tutki mit\u00e4 tietoa palvelimen ja asiakkaan v\u00e4lill\u00e4 liikkuu Wireshark-sovelluksen avulla.</p> <p>Teht\u00e4v\u00e4</p> <p>Tutustu, kuinka Slack k\u00e4ytt\u00e4\u00e4 websocketia: Traffic 101: Packets Mostly Flow</p>"},{"location":"verkot/kommunikaatiometodit/","title":"Kommunikaatiometodit","text":"<p>Aiemmasta luvusta tied\u00e4mme, ett\u00e4 verkko v\u00e4litt\u00e4\u00e4 informaatiota tietokoneiden v\u00e4lill\u00e4. Informaatiota voi v\u00e4litt\u00e4\u00e4 lukemattomilla eri tavoin, mutta eri tapoja voi pyrki\u00e4 luokittelemaan erilaisiin ryhmiin. T\u00e4ss\u00e4 luvussa esitell\u00e4\u00e4n joitakin tapoja.</p>"},{"location":"verkot/kommunikaatiometodit/#paketti-vai-piiri","title":"Paketti vai piiri","text":"<p>Tiedonsiirtoa voi suorittaa piirikytkent\u00e4isesti (eng. circuit-swithing) tai pakettiv\u00e4litteisesti (eng. packet-swithing). Tiedonsiirto on piiriv\u00e4litteist\u00e4, kun keskustelun, tai tiedonv\u00e4lityksen, aikana k\u00e4ytet\u00e4\u00e4n yht\u00e4 kommunikaatioreitti\u00e4. Reitti\u00e4 eli piiri kuljettaa viestin l\u00e4hett\u00e4j\u00e4lt\u00e4 vastaanottajalle ja kenties my\u00f6s takaisin. Piiri voi olla aina staattinen tai se voidaan luoda tarpeen mukaan. Tarpeen mukaan luotua piiri\u00e4 k\u00e4ytet\u00e4\u00e4n perinteisess\u00e4 puhelinverkossa. 1800-luvun lopussa puhelinkeskukset olivat k\u00e4siv\u00e4litteisi\u00e4: keskuksen ty\u00f6ntekij\u00e4 yhdisti kaapelit siten ett\u00e4 soittajan ja vastaajan v\u00e4lille syntyi piiri puhelun ajaksi. K\u00e4sik\u00e4ytt\u00f6iset laitteet korvattiin 1900-luvun alkuvaiheilla automaattisilla, mutta periaate pysyi samana: soittajan ja vastaajan v\u00e4lille rakennetaan puhelun ajaksi piiri.</p> <p><pre><code>graph LR\n    X[Soittaja] --- K1\n    X === K2\n    K2 === K1\n    K2 --- K3\n    K1 === K4\n    K3 --- K4\n    K3 --- K5\n    K4 ===|valittu piiri| Y\n    K5 --- K6\n    K6 --- Y[Vastaaja]</code></pre> Kuvio 1: Soittajan ja vastaajan v\u00e4lille rakennettu reitittimist\u00e4 koostuva verkosto. Huomaa, ett\u00e4 mahdollisia reittej\u00e4 on useita, mutta koko keskustelun ajan k\u00e4ytet\u00e4\u00e4n reitti\u00e4 Soittaja-K2-K1-K4-Vastaaja. Seuraavalla soittokerralla reitti voi olla eri.</p> <p>Teht\u00e4v\u00e4</p> <p>Mieti tai selvit\u00e4, miss\u00e4 tapauksessa voi olla tarpeellista rakentaa staattinen eli pysyv\u00e4 piiri.</p> <p>Pakettiv\u00e4litteinen tiedonsiirto poikkeaa piiriv\u00e4litteisest\u00e4 merkitt\u00e4v\u00e4sti. Piiri\u00e4 ei luoda laisinkaan vaan informaatio l\u00e4hetet\u00e4\u00e4n paketteina vastaanottajalle. Vastaanottajan teht\u00e4v\u00e4ksi j\u00e4\u00e4 muodostaa eri reittej\u00e4 kulkeneista paketeista kokonaisuus. Kuvitellaan tilanne, jossa huonekaluliike IKEA l\u00e4hett\u00e4\u00e4 p\u00f6yd\u00e4n kolmessa eri paketissa: p\u00f6yt\u00e4levy, jalat ja kuusiokoloavain kaikki eri Posti-paketeissa. Kaikilla kolmella paketilla on oma JFFI-koodia ja ne voivat l\u00f6yt\u00e4\u00e4 vastaanottajan luo hyvin eri reitti\u00e4. Ep\u00e4onnisessa tilanteessa kasaamisen kannalta kriittinen kuusiokoloavain kulkee Vantaa--Kuopio--Kajaani reitin sijasta reitti\u00e4 Vantaa--Tallinna--Tukholma--Gda\u0144sk--Malm\u00f6--Luulaja--Oulu--Kajaani.</p> <p><pre><code>graph LR\n    X[L\u00e4hett\u00e4j\u00e4] --- R1\n    X --- R2\n    X --- R3\n    R1 --- R4\n    R1 --- R5\n    R2 --- R4\n    R2 --- R5\n    R2 --- R6\n    R3 --- R5\n    R3 --- R6\n    R4 --- Y\n    R5 --- Y\n    R6 --- Y[Vastaanottaja]</code></pre> Kuvio 2: L\u00e4hett\u00e4j\u00e4n ja vastaanottajan v\u00e4lille rakennettu reitittimist\u00e4 koostuva verkosto. Jokainen per\u00e4kk\u00e4in l\u00e4hetetty paketti voi kulkea eri reitti\u00e4.</p> <p>Teht\u00e4v\u00e4</p> <p>Mieti tai selvit\u00e4, mit\u00e4 hy\u00f6tyj\u00e4 ja haittoja on kummassakin tiedonsiirtotavassa. Onko jompi kumpi parempi, vai onko lopputulema \"riippuu\"?</p> <p>Teht\u00e4v\u00e4</p> <p>Mieti mit\u00e4 tapahtuu, jos reittimet R5 ja R6 luulevat vastaanottajan asuvan graafin vasemmalla puolella eli ne on konfiguroitu v\u00e4\u00e4rin. Paketti kulkee reitti\u00e4 <code>L\u00e4hett\u00e4j\u00e4 -&gt; R3 -&gt; R5 -&gt; R2 -&gt; R6 -&gt; R3 -&gt; (repeat)</code> eli j\u00e4\u00e4 ikuiseen looppiin. Kuinka t\u00e4lt\u00e4 voi v\u00e4ltty\u00e4? Kuinka Posti est\u00e4isi t\u00e4m\u00e4n? Ent\u00e4 internetin reitittimet?</p> <p>Protokollaperheet koostuvat kerroksista, ja eri kerroksilla voi olla eri n\u00e4kymys tiedonsiirrosta. Kuvittele, ett\u00e4 yhdist\u00e4t internetiin iso\u00e4idin vintilt\u00e4 l\u00f6ytyneell\u00e4 56 kbps modeemilla, joka k\u00e4ytt\u00e4\u00e4 vanhaa lankapuhelinverkkoa tiedonsiirtoon. TCP/IP:n mukaisesti kapseloisit pyynn\u00f6n IP-paketteihin. Kuten nimest\u00e4 voi arvata, kyseess\u00e4 on nimenomaan paketti, ja IP-paketit k\u00e4ytt\u00e4v\u00e4t pakettiv\u00e4litteist\u00e4 tiedonsiirtoa. Samaan aikaan modeemin hy\u00f6dynt\u00e4m\u00e4 puhelinlinja on piirikytkent\u00e4inen. K\u00e4yt\u00e4t siis kumpaakin, mutta eri tasoilla!</p> <p>Tip</p> <p>Kuvittele, ett\u00e4 oikeasti selaisit interneti\u00e4 2020-luvulla 56 kbps modeemilla. Alla pikainen iltasanomat.fi etusivun (ilman scrollailua) lataamisesta tehty laskelma.</p> Keksit Koko (Mt) Pyynn\u00f6t (#) Karkea latausaika (56 kbps) Kielletty 1.7 77 4 min Sallittu 2.7 195 6 min 30 s <p> Mik\u00e4li olisit mediakonsernin kanssa yht\u00e4 mielt\u00e4, ett\u00e4 saat parempia palveluita ja kohdennettuja mainoksia hyv\u00e4ksym\u00e4ll\u00e4 ev\u00e4steet, saisit odottaa pelkkien ev\u00e4steiden latautumista kaksi ja puoli minuuttia. </p>"},{"location":"verkot/kommunikaatiometodit/#kytkennaisyys","title":"Kytkenn\u00e4isyys","text":"<p>Protokollat voivat k\u00e4ytt\u00e4\u00e4 yhteytt\u00e4 (eng. connection), toiselta sanaltaan kytkent\u00e4\u00e4, tai olla k\u00e4ytt\u00e4m\u00e4tt\u00e4. N\u00e4ist\u00e4 kahdesta tiedonsiirron k\u00e4yt\u00e4n\u00f6st\u00e4 k\u00e4ytet\u00e4\u00e4n termej\u00e4 kytkent\u00e4inen (eng. connection-oriented) ja ei-kytkent\u00e4inen (eng. connectionless). Huomaathan, ett\u00e4 jatkossa k\u00e4yt\u00e4n kytkenn\u00e4st\u00e4 termi\u00e4 yhteys.</p> <p>Yhteyden muodostavaa protokollaa k\u00e4ytt\u00e4v\u00e4 viestij\u00e4 l\u00e4hett\u00e4\u00e4 yhteyden muodostamisesta pyynn\u00f6n toiselle osapuolelle. Yhteys neuvotellaan aloitettavaksi, ja yhteytt\u00e4 tarpeen mukaan yll\u00e4pidet\u00e4\u00e4n protokollan m\u00e4\u00e4rittelem\u00e4ll\u00e4 tavalla, ja lopulta yhteys suljetaan sovitulla tavalla. T\u00e4st\u00e4 voinee jo arvata, ett\u00e4 piirikytkent\u00e4isess\u00e4 tiedonsiirrossa on pakko muodostaa yhteys eli kytkent\u00e4. Suomennetuissa termeiss\u00e4 n\u00e4ill\u00e4 onkin jo varsin vahva linkki jo ihan sanatasolla. (piirikytkent\u00e4inen ja kytkent\u00e4inen). </p> <p>Yhteydet\u00f6nt\u00e4 protokollaa k\u00e4ytt\u00e4v\u00e4 viestij\u00e4 l\u00e4hett\u00e4\u00e4 viestin ilman yhteytt\u00e4. K\u00e4ytetyt termit auttavat t\u00e4ss\u00e4. Ei-kytkent\u00e4isten (eng. connectionless) protokollien viesteist\u00e4 k\u00e4ytet\u00e4\u00e4n termi\u00e4 datagram (esim. UDP datagram), joka viittaa termiin telegram (suom. s\u00e4hke), ja k\u00e4\u00e4ntyy suomeksi datas\u00e4hkeeksi. Ei-kytkent\u00e4isi\u00e4 protokollia ja s\u00e4hkeit\u00e4 yhdist\u00e4\u00e4 se, ett\u00e4 kumpaakaan ei ole pakko kuitata vastaanotetuksi (eng. acknowledge, lyhennettyn\u00e4 ACK.)</p> <p>Note</p> <p>Huomaathan ett\u00e4 </p> <ol> <li>Kaikki piirikytkent\u00e4iset (circuit-swithing) protokollat k\u00e4ytt\u00e4v\u00e4t yhteytt\u00e4 eli ovat kytkent\u00e4isi\u00e4 (eng. connection-oriented).</li> <li>Kaikki yhteyden muodostavat eli kytkent\u00e4iset (eng. connection-oriented) eiv\u00e4t k\u00e4yt\u00e4 piiri\u00e4 (eng. circuit)</li> </ol> <p>Vertaa</p> <ol> <li>Fakta: Kaikki omenat kasvavat puussa</li> <li>Ei-Fakta: Jokaisessa puussa kasvaa omenoita</li> </ol> <p>Kertaus ja vahvistus: yhteydet\u00f6nt\u00e4 eli ei-kytkent\u00e4ist\u00e4 protokollaa k\u00e4ytt\u00e4v\u00e4 viestij\u00e4 ei muodosta yhteytt\u00e4: se vain ampuu viestin menem\u00e4\u00e4n. </p> <p>Yhteyksi\u00e4 voi kuitenkin muodostaa ilman pakettiv\u00e4litteisiss\u00e4 verkoissa (eli ilman piiri\u00e4.) TCP-protokolla on kytkent\u00e4inen protokolla (eli siis connection-oriented), vaikka se hy\u00f6dynt\u00e4\u00e4 TCP/IP-protokollaperheen mukaisesti IP-paketteja tiedonsiirtoon, ja IP-paketit ovat postipakettien tapaisesti pakettiv\u00e4litteisi\u00e4 (packet-switching) eiv\u00e4tk\u00e4 muodosta piiri\u00e4. N\u00e4in toimivat FTP-tiedonsiirtoprotokolla, Telnet-p\u00e4\u00e4teyhteysprotokolla, joidenkin verkkomoninpelien pelisessiot ja niin edelleen.</p>"},{"location":"verkot/kommunikaatiometodit/#matriisi","title":"Matriisi","text":"<p>Alla 2x2 matriisi, jossa esimerkkiprotokollat eri kombinaatioista.</p> Ei-kytkent\u00e4inenconnectionless Kytkent\u00e4inenconnection-oriented Piirikytkent\u00e4inencircuit-switching -- PPP, MPLS Pakettiv\u00e4litteinenpacket-switching UDP, ICMP, QUIC TCP, MQTT <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, mitk\u00e4 ovat hy\u00f6dyt ja haitat UDP:n ja TCP:n v\u00e4lill\u00e4. Mihin tarkoituksiin ne soveltuvat?</p>"},{"location":"verkot/m%C3%A4%C3%A4ritelm%C3%A4/","title":"Verkon m\u00e4\u00e4ritelm\u00e4","text":"<p>Erilaisiin tietoverkkoihin on vaikea olla t\u00f6rm\u00e4\u00e4m\u00e4tt\u00e4. Verkot ovat niin yleisi\u00e4, ett\u00e4 m\u00e4\u00e4rittely saattaa tuntua itsest\u00e4\u00e4n selv\u00e4lt\u00e4 tai v\u00e4kin\u00e4iselt\u00e4: aivan kuin m\u00e4\u00e4rittelisi muutoin yleisesti tutun sanan kuten ruoka tai kaveri. M\u00e4\u00e4rittely on silti t\u00e4ss\u00e4 yhteydess\u00e4 tarpeen. Tieotokoneverkko (eng. computer network) viittaa useista tietokoneista koostuvaan kokonaisuuteen. Verkkoty\u00f6skentely (eng. networking) tarkoittaa niit\u00e4 prosesseja, jotka liittyv\u00e4t verkkkojen suunnitteluun, toteuttamiseen, hallintaan. On huomattavaa, ett\u00e4 sek\u00e4 verkkoja ett\u00e4 verkostoitumista (eng. networking) voi k\u00e4ytt\u00e4\u00e4 kohtalaisen luontevasti my\u00f6s ihmisten v\u00e4lisess\u00e4 kommunikaatiossa. T\u00e4ll\u00e4 kurssilla sana verkko viittaa kuitenkin nimenomaan tietokoneverkkoon.</p> <p>Yksinkertaisimmillaan verkko on kahden tietokoneen v\u00e4linen yhteys. Yhteys voi olla my\u00f6s ei-fyysinen, kuten kahden virtuaalikoneen v\u00e4linen verkko. Verkko ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 liity mitenk\u00e4\u00e4n HTML-tiedostoihin tai termiin WWW. Bluetooth, l\u00e4himaksu ja televisioverkko ovat kaikki verkkoja.</p> <pre><code>flowchart LR\n    A[Computer A] &lt;--&gt; B[Computer B]</code></pre> <p>Kuvio 1: Kahdesta tietokoneesta, A ja B, koostuva kaksisuuntainen verkko.</p> <p>M\u00e4\u00e4ritelm\u00e4</p> <p>(Tietokone)verkko on kahdesta tai useammasta toisiinsa loogisesti tai fyysisesti yhdistetyst\u00e4 tietokoneesta koostuva kokonaisuus, joka mahdollistaa informaation vaihtamisen.</p>"},{"location":"verkot/m%C3%A4%C3%A4ritelm%C3%A4/#verkkojen-kerrokset","title":"Verkkojen kerrokset","text":"<p>Verkkoty\u00f6skentelyyn liittyv\u00e4t teknologiat kuvataan usein erilaisilla malleilla, joissa niiden eri toiminallisuudet on siilottu eri kerroksiin (eng. layers). Jokaisella kerroksella on teht\u00e4v\u00e4. Jokainen kerros tuottaa ylemm\u00e4lle palvelua, ja ylempi k\u00e4ytt\u00e4\u00e4 alemman palvelua. Kahden kerroksen v\u00e4liss\u00e4 on yhteisesti sovittu rajapinta (eng. interface). Koska jokainen kerros tuottaa ylemm\u00e4lle palvelua, alin kerros suorittaa konkreettisinta teht\u00e4v\u00e4\u00e4 ja ylin abstrakteinta.</p> <p>Teht\u00e4v\u00e4</p> <p>Lue ja varmista, ett\u00e4 ymm\u00e4rr\u00e4t termin \"abstrakti\" ohjelmistonkehityksen kontekstissa oikein. T\u00e4m\u00e4 artikkeli on suositeltu l\u00e4hde: The Valuable Dev: What Are Abstractions in Software Engineering with Examples</p> <p><pre><code>flowchart TD\n    A[abstraktimpi] --- B[abstrakti] --- C[konkreettinen]</code></pre> Kuvio 2: Kuvitteellinen 3-kerroksinen verkkoja kuvaava malli.</p> <p>T\u00e4ll\u00e4 kurssilla k\u00e4sitell\u00e4\u00e4n kahta mallia: ISO-standardisoimisj\u00e4rjest\u00f6n OSI-mallia sek\u00e4 TCP/IP Reference Modelia.</p> <p>Warning</p> <p>Termit malli, protokolla ja protokollaperhe sekaantuvat helposti, mik\u00e4li ei ole tarkkana. Esimerkiksi sana TCP esiintyy mallissa (TCP/IP Reference Model), protokollassa (TCP), sek\u00e4 protokollaperheess\u00e4 (TCP/IP).</p> <ul> <li>Malli (eng. model)<ul> <li>Yksinkertaistettu presentaatio monimutkaisesta prosessista tai ilmi\u00f6st\u00e4 (vrt. Bohrin atomin malli).</li> </ul> </li> <li>Protokolla (eng. protocol)<ul> <li>Protokolla eli k\u00e4yt\u00e4nt\u00f6 on verkkoty\u00f6skentelyss\u00e4 saman kerroksen entiteettien s\u00e4\u00e4nn\u00f6st\u00f6. Esimerkkein\u00e4 TCP, IP, HTTP.</li> </ul> </li> <li>Protokollaperhe (eng. protocol suite)<ul> <li>Useista yhteensopivista protokollista koostuva kommunikointiin k\u00e4ytetty kokonaisuus. Esimerkken\u00e4 TCP/IP eli Internet Protocol Suite tai IPX/SPX.</li> </ul> </li> </ul>"},{"location":"verkot/skaala/","title":"Skaala","text":"<p>Jos edellisiss\u00e4 kappaleissa termist\u00f6n suhteen on tuntunut pient\u00e4 ep\u00e4varmuutta, niin nyt ollaan vahvasti ep\u00e4varman \u00e4\u00e4rell\u00e4. Skaalan mukaan nimetyt tietoverkkotyypit, joista t\u00e4ss\u00e4 luvussa k\u00e4sitell\u00e4\u00e4n PAN, LAN ja WAN. Skaalan mukaan jakamiseen liittyy sama ongelma kuin virtaavan veden m\u00e4\u00e4rittely: joki, oja vai puro? Tietoverkon luokittelulle koon mukaan l\u00f6ytyy kuitenkin perusteluita. Eri skaalan verkkoihin sopivat eri datayhteydet ja topologiat.</p> <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4 mit\u00e4 muita lyhenteit\u00e4 l\u00f6ytyy kuin PAN, LAN ja WAN. Mik\u00e4 on esimerkiksi MAN?</p>"},{"location":"verkot/skaala/#pan","title":"PAN","text":"<p>Pienin t\u00e4ss\u00e4 kappaleessa k\u00e4sitelty verkon skaala on likiverkko, omaverkko tai henkil\u00f6kohtainen verkko eli PAN (Personal Area Network). Likiverkossa laitteet ovat sananmukaisesti eritt\u00e4in likell\u00e4; metrin tai kahden p\u00e4\u00e4ss\u00e4 toisistaan. Koska laitteet ovat hyvin l\u00e4hekk\u00e4in toisiaan, t\u00e4m\u00e4 my\u00f6s herk\u00e4sti tarkoittaa ett\u00e4 niit\u00e4 operoi yksi henkil\u00f6.</p> <p>Topologian kannalta likiverkko voi olla hyvinkin yksinkertainen; tietokone on keskuslaite, ja se yhdistyy suoralla linkill\u00e4 muihin laitteisiin.</p> <p><pre><code>flowchart LR\n    k[Tietokone]\n    k --- b\n    k --- u\n\n    subgraph bluetooth\n    b[Kuulokkeet]\n    end\n\n    subgraph usb\n    u[USB-joulukuusi]\n    end\n\n    subgraph infrared\n    i\n    end\n    i --- k</code></pre> Kuvio 1: Tietokone ja sen PAN-laitteet</p> <p>Mahdollisia datayhteyden protokollia:</p> <ul> <li>USB</li> <li>Bluetooth</li> <li>IrDA (Infrapunavalo)</li> </ul> <p>Teht\u00e4v\u00e4</p> <p>Mieti mihin k\u00e4ytt\u00e4isit infrapunaa likiverkossa.</p>"},{"location":"verkot/skaala/#lan","title":"LAN","text":"<p>L\u00e4hiverkko (Local Area Network, LAN) on pelaajille tuttu termist\u00e4 lanit (eng. LAN party). LAN voi joko olla kaapeloitu tai langaton eli WLAN (Wireless LAN). Huomaa, ett\u00e4 sinulla voi olla kotona esimerkiksi kaksi LAN-verkkoa. Ethernet on joukko standardeja, ja nykyiset l\u00e4hiverkot ovat l\u00e4hes poikkeuksetta jonkin Ethernet-standardin mukaisia (esim. BASE100-TX, toiselta nimelt\u00e4\u00e4n Fast Ethernet). Yksi verkko toimii parikaapeleilla (esimerkiksi 100BASE-TX), toinen on langaton (esimerkiksi 2.4 GHz 802.11g). Nykyisen, Ethernet-l\u00e4hiverkon topologia on siis tyypillisesti t\u00e4hti (ks. kuva 2. Se n\u00e4ytt\u00e4\u00e4 t\u00e4hdelt\u00e4.) Kotona oleva l\u00e4hiverkko tunnetaan my\u00f6s nimell\u00e4 kotiverkko.</p> <p><pre><code>graph LR\n    A[Tietokone] --- H[Hubi]\n    B[Tietokone] --- H\n    H --- E[Tietokone]\n    H --- F[Tietokone]</code></pre> Kuvio 2: Nelj\u00e4st\u00e4 tietokoneesta ja hubista koostuva l\u00e4hiverkko</p> <p>L\u00e4hiverkossa dominoivia datayhteyden standardeja:</p> <ul> <li>Ethernet (IEEE 802.3)</li> <li>Wireless Ethernet (IEEE 802.11)</li> </ul> <p>Teht\u00e4v\u00e4</p> <p>Miksi ja miten voit striimata kuvaa Wifiin kytkeytyneest\u00e4 k\u00e4nnyk\u00e4st\u00e4 televisioon, joka on parikaapelilla kiinni siin\u00e4 laitteessa, jota kutsut modeemiksi. Neh\u00e4n ovat kahdessa eri l\u00e4hiverkossa! Vai ovatko?</p> Historiaa: L\u00e4hiverkko ilman hubia <p>Laneja j\u00e4rjestettiin jo aikoja ennen nykymuotoista Etherneti\u00e4, jossa koneet yhdistet\u00e4\u00e4n parikaapeleilla hubiin, kytkimeen tai muuhun matolaatikkoon. Moninpelaaminen oli usein jopa lokaalimpaa kuin nykyp\u00e4iv\u00e4n laneilla; Internet-yhteytt\u00e4 ei usein, joten yksi l\u00e4hiverkon koneista oli pelisession is\u00e4nt\u00e4kone.</p> <p>Verkko oli thinnet (10BASE) ja kaapelointiin k\u00e4ytettiin koaksiaalikaapelia, eli hyvin vastaavanlaista kaapelia kuin television ja antenni/kaapelirasian v\u00e4lill\u00e4. Jokaisen modeemin BNC-liittimeen kytkettiin T-adapteri. Esimerkiksi Tietokoneen B (ks. Kuvio 2) T-liittimest\u00e4 l\u00e4htee yksi koaksiaalikaapeli koneeseen A ja toinen koneeseen C. Verkon p\u00e4\u00e4dymm\u00e4isiss\u00e4 koneissa T-adapterin muutoin tyhj\u00e4\u00e4n liittimeen pit\u00e4\u00e4 kytke\u00e4 terminaattori, joka on pieni vastus. Hubi ei ollut pieniss\u00e4 verkoissa tarpeellinen.</p> <p>Kuvitellaan, ett\u00e4 laneilla on useampi pelaajaa, joista joku keskimm\u00e4isist\u00e4 haluaa l\u00e4hte\u00e4 kotiin. H\u00e4n irroittaa tietokoneensa verkosta, jolloin segmentti katkeaa kahdeksi (ilman terminaattoreita). Lanit pit\u00e4\u00e4 pys\u00e4ytt\u00e4\u00e4 hetkeksi, jotta segmentti voidaan yhdist\u00e4\u00e4 kaapeleille takaisin yhdeksi.</p> <p><pre><code>graph LR\n    T0((Terminaattori)) --- C1\n    C1[Tietokone A] --- C2\n    C2[Tietokone B] --- C3\n    C3[Tietokone C] --- TX((Terminaattori))</code></pre> Kuvio 2: Thinnet-l\u00e4hiverkossa kaikki koneet kytkeytyv\u00e4t samaan runkoon, joka kulkee koneesta toiseen T-liittimien l\u00e4pi.*</p>"},{"location":"verkot/skaala/#wan","title":"WAN","text":"<p>Alue- tai kaukoverkko (Wide Area Network, WAN) yhdist\u00e4\u00e4 laitteita, tai verkkoja, jotka ovat suurella et\u00e4isyydell\u00e4 toisistaan. LAN-teknologioilla (esimerkiksi Ethernet over Fiber) voi yhdist\u00e4\u00e4 hyvinkin kaukana toisistaan olevia l\u00e4hiverkkoja, mutta harva yritys yhdist\u00e4isi esimerkiksi New Yorkin ja Kajaanin toimistot LAN-teknologioilla toisiinsa. WAN:n voi luoda esimerkiksi vuokraamalla kiinte\u00e4n linjan (eng. leased line), joka on yksityinen fyysinen yhteys kohteiden v\u00e4lill\u00e4. Kyseinen yhteys ei mene Internetin l\u00e4pi eik\u00e4 ole muillakaan tavoin jaettu; se on firman omassa k\u00e4yt\u00f6ss\u00e4. Kiinte\u00e4 linja k\u00e4ytt\u00e4\u00e4 sarjaliit\u00e4nt\u00e4\u00e4 ja data kapseloidaan HDLC tai PPP protokollia k\u00e4ytt\u00e4en - ei siis Ethernet-protokollaa k\u00e4ytt\u00e4en.</p> <p>Yksityisen WAN:n voi luoda  julkiverkon l\u00e4pi k\u00e4ytt\u00e4en virtuaalisia erillisverkkoja eli VPN-teknologioita (Virtual Private Network). Vuokratut kiinte\u00e4t linjat ovat kalliita, joten Internetin l\u00e4pi tehty VPN on tapa s\u00e4\u00e4st\u00e4\u00e4 rahaa. Mik\u00e4li reititin on konfiguroitu oikein, k\u00e4ytt\u00e4j\u00e4n ei tarvitse erikseen ladata VPN-sovellusta yrityksen l\u00e4hiverkossa (site-to-site VPN joka k\u00e4ytt\u00e4\u00e4 IPsec:i\u00e4): reititin hoitaa kryptauksen  l\u00e4ht\u00f6p\u00e4\u00e4ss\u00e4 ja enkryptauksen vastaanottavan toimiston p\u00e4\u00e4ss\u00e4. Sen sijaan poissa toimistolta olevat et\u00e4ty\u00f6ntekij\u00e4t tarvitsevat erillisen VPN-sovelluksen (remote-access VPN joka k\u00e4ytt\u00e4\u00e4 TLS:\u00e4\u00e4).</p> <p>Kuten Internet, palveluntarjoajien MPLS-verkot (Multiprotocol Label Swithing) ovat asiakkaiden kesken jaettuja verkkoja. MPLS-intran sis\u00e4lle luodaan VPN-verkkoja tunnuksia (eng. label) k\u00e4ytt\u00e4en, jotka korvaavat IP-osoitteet MPLS-verkossa. Palveluntarjoja lis\u00e4\u00e4 asiakkaan Ethernet-paketteihin tunnukset, joita k\u00e4ytet\u00e4\u00e4n palveluntarjoajan reitittimien v\u00e4lisess\u00e4 liikenn\u00f6inniss\u00e4. Asiakkaan oma verkko hy\u00f6dynt\u00e4\u00e4 yh\u00e4 IP-osoitteita tavalliseen tapaan: oikein konfiguroidut verkko reitttineen varmistaa, ett\u00e4 toiseen toimistoon suunnatut paketit p\u00e4\u00e4tyv\u00e4t palveluntarjoajan MLPS edge-reittimelle eiv\u00e4tk\u00e4 kulje julkisen Internetin l\u00e4pi. </p> <p>Joitakin mahdollisia WAN-protokollia:</p> <ul> <li>HDLC</li> <li>PPP</li> <li>Ethernet + IPsec (VPN)</li> <li>MPLS</li> </ul> <p>Useista yhteen kytketyist\u00e4 verkoista k\u00e4ytet\u00e4\u00e4n termi\u00e4 internetwork (<code>inter</code> + <code>network</code>) tai lyhyesti internet. Mik\u00e4 tahansa useista verkoista koostuva verkko on siis internet, mutta suurella alkukirjaimella kirjoitettu Internet on erisnimi. Internet on siis my\u00f6s WAN, mutta kokoluokaltaan sen verran suuri, ett\u00e4 harvemmin sit\u00e4 kutsutaan WAN:ksi. Se on ihan vain Internet. Yleisesti WAN:lla viitataan yritysten yksityisiin tai julkiverkon l\u00e4pi tunneloituihin yhteyksiin, jotka yhdistev\u00e4t maantieteellisesti kaukana toisitaan olevat l\u00e4hiverkot (toimistot, datakeskukset, yms.). Mik\u00e4li yrityksen omassa sis\u00e4verkossa (joka voi olla WAN) py\u00f6rii Internetin kaltaisesti k\u00e4ytt\u00e4ytyv\u00e4 privaatti internet, siit\u00e4 k\u00e4ytet\u00e4\u00e4n nime\u00e4 intranet. Mik\u00e4li t\u00e4m\u00e4 oma, privaatti internet, on avoinna my\u00f6s joillekin toisille tahoilla, on sen nimi extranet.</p> <p> Mozilla: How does the internet work</p>"},{"location":"verkot/terminologia/","title":"Terminologia","text":"<p>Verkossa siirret\u00e4\u00e4n informaatiota, ja yksitt\u00e4inen informaatiota sis\u00e4lt\u00e4v\u00e4 entiteetti on viesti. Vaikka useimmat termit tulevat vastaan vasta my\u00f6hemmiss\u00e4 luvuissa, kuten OSI- tai TCP/IP-mallien kerroksia l\u00e4pi k\u00e4ydess\u00e4, on sanasto silti hyv\u00e4 silm\u00e4ill\u00e4 jo alustavasti l\u00e4pi t\u00e4ss\u00e4 vaiheessa.</p>"},{"location":"verkot/terminologia/#tietoon-liittyvat-termit","title":"Tietoon liittyv\u00e4t termit","text":"<p>Kaikki sanat eiv\u00e4t k\u00e4\u00e4nny suomesta englantiin ja takaisin ongelmmitta. Suomalaisen asiasanasto- ja ontologiapalvelun Finto:n tietotermej\u00e4 selatessa on helppo huomata, ett\u00e4 tieto k\u00e4\u00e4ntyy sanoiksi data, information tai knowledge riippuen aiheyhteydest\u00e4. Siit\u00e4 huolimatta joitakin sanoja, kuten database, on k\u00e4\u00e4nnetty suomeen siten, ett\u00e4 data on k\u00e4\u00e4nnetty nimenomaan tiedoksi, joka on ontologiassa datan yl\u00e4k\u00e4site. K\u00e4\u00e4nn\u00f6songelmien lis\u00e4ksi samankin kielen sis\u00e4ll\u00e4 sanoja voidaan k\u00e4ytt\u00e4\u00e4 yleiskielisesti toistensa synonyymein\u00e4. Jos sekaannuksesta on vaaraa, kannattaa m\u00e4\u00e4ritell\u00e4 termi k\u00e4yt\u00f6n yhteydess\u00e4.</p> <p>T\u00e4ss\u00e4 dokumentaatiossa t\u00e4rkeimm\u00e4t termit ovat data ja informaatio. Muiden k\u00e4ytt\u00f6 on joko minimaalista tai kokonaan puuttuvaa. Informaatio on se viestin sis\u00e4lt\u00f6, esimerkiksi HTTP GET -pyynt\u00f6, joka pyrit\u00e4\u00e4n v\u00e4litt\u00e4m\u00e4\u00e4n vastaanottajalle. Alemman kerroksen n\u00e4k\u00f6kulmasta tuo kyseinen jono tavuja on dataa; data enkapsuloidaan sille tarkoitettuun kentt\u00e4\u00e4n piittaamatta sen formaatista.</p> Termi In English Lyhyt m\u00e4\u00e4ritelm\u00e4 Data Data Raakatietoa eli karusti sanottuna ykk\u00f6si\u00e4 ja nollia. Voi sis\u00e4lt\u00e4\u00e4 merkityksen, olla puhdasta mittausdataa, tai olla pelkk\u00e4\u00e4 kohinaa. Informaatio Information Dataa, jolla on jokin tunnettu muoto eli rakenne. Tiet\u00e4mys Knowledge Syit\u00e4 ja seurauksia tai muuta pidemm\u00e4lle jalostettua ymm\u00e4rryst\u00e4 informaation pohjalta. Tieto Data/Information/Knowledge Yl\u00e4k\u00e4site, joka tarkoittaa milloin mit\u00e4kin ylemmist\u00e4 termeist\u00e4"},{"location":"verkot/terminologia/#viestiin-liittyvat-termit","title":"Viestiin liittyv\u00e4t termit","text":"<p>Muodolliset termit viesteille (tai tietoyksik\u00f6ille) mill\u00e4 tahansa kerroksella ovat Protocol Data Unit (PDU), suomeksi yhteysk\u00e4yt\u00e4nn\u00f6n datayksik\u00f6, ja Service Data Unit (SDU), suomeksi palveludatayksikk\u00f6. Ajoittain PDU-termi\u00e4 k\u00e4ytet\u00e4\u00e4n vain ylemmill\u00e4 abtraktion tasoilla eli OSI-kerroksilla 4-7. PDU on kerroksen protokollan oma viestimuoto. Ylemm\u00e4n kerroksen viestist\u00e4, joka enkapsuloidaan alemman kerroksen viestin sis\u00e4\u00e4n, k\u00e4ytet\u00e4\u00e4n termi\u00e4 SDU. K\u00e4yt\u00e4nn\u00f6ss\u00e4 kuitenkin kirjallisuudessa, esimerkeiss\u00e4 ja dokumentaatiossa puhutaan esimerkiksi paketeista ja kehyksist\u00e4. PDU ja SDU ovat muodollisia termej\u00e4. Alla yleisesti k\u00e4ytetyt, mutta ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 t\u00e4ysin muodollisesti p\u00e4tev\u00e4t m\u00e4\u00e4rittelyt.</p> <p>Eri protokollat ja mallit voivat k\u00e4ytt\u00e4\u00e4 poikkeavia nimi\u00e4 tai p\u00e4\u00e4llek\u00e4isi\u00e4 nimi\u00e4 muiden k\u00e4ytt\u00e4mien termien kanssa. Taulukko ujuttaa jo tietoa OSI-mallin tasoista; n\u00e4ihin tutustutaan seuraavissa luvuissa. Nyt voit k\u00e4ytt\u00e4\u00e4 sit\u00e4 j\u00e4rjestyslukuna, joka kuvaa viestin abtraktion tasoa.</p> Termi In English OSI-taso Lyhyt m\u00e4\u00e4ritelm\u00e4 Viesti Message ? Laajak\u00e4ytt\u00f6inen yleistermi. Periaatteessa mik\u00e4 tahansa alla olevista tai jokin abstraktimpi viesti (kuten s\u00e4hk\u00f6posti) Datas\u00e4hke Datagram 4 Ei-kytkent\u00e4isiss\u00e4 protokollien viesti, esimerkiksi UDP-datas\u00e4hke. Termi viittaa s\u00e4hkeeseen (eng. telegram) Lohko Segment 4 Useimmiten nimenomaan TCP-protokollan viesti. Paketti Packet 3 OSI-mallin verkkokerroksella (3.) k\u00e4ytetty viestityyppi, esimerkiksi IP-paketti. Kehys Frame 2 OSI-mallin datayhteyskerroksella (2.) k\u00e4ytetty viesti, esimerkiksi Ethernet Frame. Bitti bit 1 Bin\u00e4\u00e4riluku eli ykk\u00f6nen tai nolla. <p>Jokaisella protokollalla on tarkasti m\u00e4\u00e4ritelty muoto, joka tyypillisesti koostuu v\u00e4hint\u00e4\u00e4n kahdesta seuraavista: yl\u00e4tunniste, data ja alatunniste (header, data, footer). Alatunnistetta eiv\u00e4t k\u00e4yt\u00e4 l\u00e4hesk\u00e4\u00e4n kaikki protokollat. Data tunnetaan t\u00e4ss\u00e4 yhteydess\u00e4 my\u00f6s nimell\u00e4 payload eli suomennettuna hy\u00f6tykuorma. Hy\u00f6tykuorman sis\u00e4lt\u00f6 on siis ylemm\u00e4n kerroksen data. Jokaista kerrosta kiinnostaa k\u00e4yt\u00e4nn\u00f6ss\u00e4 vain ja ainoastaan oma yl\u00e4tunniste: data on vain dataa, joka siirret\u00e4\u00e4n, koska n\u00e4in on k\u00e4sketty teht\u00e4v\u00e4ksi.</p>"},{"location":"verkot/terminologia/#sdu-ja-pdu-esimerkki","title":"SDU ja PDU esimerkki","text":"<p>Termien selitykset:</p> <ul> <li>PDU. Protocol Data Unit. Mink\u00e4 tahansa kerroksen oma data.</li> <li>SDU. Service Data Unit. Tietoyksikk\u00f6, mill\u00e4 nimell\u00e4 ylemm\u00e4lt\u00e4 kerrokselta alemmalle kerrokselle siirtynyt data tunnetaan. T\u00e4m\u00e4 sis\u00e4ltyy PDU:n data tai payload kentt\u00e4\u00e4n.</li> </ul> <p>Alla naiivi esimerkki, jossa joka kerroksen PDU on Python dictionary, ja SDU on JSON-merkkijonoksi serialisoitu (tai muodollisemmin sarjastettu) ylemm\u00e4n kerroksen PDU. Prosessi, jossa viesti sis\u00e4llytet\u00e4\u00e4n alemman kerroksen PDU:n payloadiksi, tunnetaan nimell\u00e4 kapsulointi (eng. encapsulate):</p> <pre><code>import json\n\ndef serialize(pdu):\n    # More realistic case would be to use e.g. UTF-8 encoding\n    # JSON has been chosen for human-readable output.\n    sdu = json.dumps(pdu, indent=2)\n    return sdu\n\n# Layer N+1 PDU\nn_plus_one = { \n    \"header\": \"N+1 header\", \n    \"payload\": \"FAKEPAYLOAD\"\n} \n\n# Layer N PDU\nn_plus_zero = { \n    \"header\": \"N header\", \n    \"payload\": serialize(n_plus_one),  # N+1 layer's PDU is this layer's SDU\n    \"footer\": \"This layer happens to use footer\"\n}\n\n# Layer N-1 PDU would use SDU as ...\nprint(serialize(n_plus_zero))\n</code></pre> <p>Koodin tuloste n\u00e4kyy alla. Huomaathan, ett\u00e4 t\u00e4m\u00e4 tulosteessa n\u00e4kyv\u00e4 entiteetti on kerroksen <code>N</code> PDU, mutta kerroksen (<code>N miinus yksi</code>) SDU.</p> <pre><code>{\n  \"header\": \"N header\",\n  \"payload\": \"{\\n  \\\"header\\\": \\\"N+1 header\\\",\\n  \\\"payload\\\": \\\"FAKEPAYLOAD\\\"\\n}\",\n  \"footer\": \"This layer happens to use footer\"\n}\n</code></pre> <p>Mik\u00e4li Python on kielen\u00e4 vieras, etk\u00e4 saa esimerkist\u00e4 tolkkua, palaa esimerkkiin my\u00f6hemmin, kun olet lukenut lis\u00e4\u00e4 sek\u00e4 protokollista ett\u00e4 Python-kielest\u00e4. T\u00e4m\u00e4n luvun t\u00e4rkein anti on j\u00e4tt\u00e4\u00e4 jokin muistikuva k\u00e4sitteist\u00e4 ja konsepteista, joihin tulet t\u00f6rm\u00e4\u00e4m\u00e4\u00e4n my\u00f6hemmin tekstiss\u00e4.</p>"},{"location":"verkot/verkon_laitteet/","title":"Verkon laitteet","text":"<p>T\u00e4m\u00e4 luku pyrkii k\u00e4sittelem\u00e4\u00e4n konkreettisesti laitteita, jotka liittyv\u00e4t TCP/IP- ja siten Internet-tiedonv\u00e4litykseen ja Ethernet-protokollaan. Toisin sanoen, n\u00e4it\u00e4 sinulta voi l\u00f6yty\u00e4 kotoa. Jokaisen alla olevan otsakkeen per\u00e4ss\u00e4 lukee suluissa, mill\u00e4 OSI-tasolla laite korkeimmillaan toimii. OSI-tasot k\u00e4sitell\u00e4\u00e4n my\u00f6hemmin, mutta t\u00e4st\u00e4 saat hyv\u00e4\u00e4 osviittaa siihen, mit\u00e4 ylemm\u00e4n tason suurempi abstraktio voi tarkoittaa k\u00e4yt\u00e4nn\u00f6ss\u00e4.</p>"},{"location":"verkot/verkon_laitteet/#toistin-taso-1","title":"Toistin (Taso 1)","text":"<p>Toistin tai toistinasema (eng. repeater) on yksinkertainen laite, joka ottaa sis\u00e4\u00e4ntulevan signaalin, puhdistaa ja vahvistaa sit\u00e4, ja siirt\u00e4\u00e4 sen l\u00e4ht\u00f6\u00f6n. Toistin ei puutu viestin sis\u00e4lt\u00f6\u00f6n: se ei ymm\u00e4rr\u00e4 mit\u00e4\u00e4n MAC-osoitteista, IP-osoitteista tai TCP-protokollista. Sen teht\u00e4v\u00e4 on lis\u00e4t\u00e4 verkkoon kantamaa.</p>"},{"location":"verkot/verkon_laitteet/#keskitin-taso-1","title":"Keskitin (Taso 1)","text":"<p>Keskitin (eng. hub) on Ethernet-l\u00e4hiverkoissa rasia, jossa on kasa naaraspuolisia liittimi\u00e4, joihin voit kytke\u00e4 parikaapelin liittimen (RJ-45-liitin). Kaikki hubiin kytketyt tietokoneet voivat jatkossa kommunikoida kesken\u00e4\u00e4n. Huomaathan, ett\u00e4 vaikka t\u00e4ss\u00e4 puhutaan hubista Ethernet-l\u00e4hiverkon kannalta, niin my\u00f6s muilla verkottamiseen liittyvill\u00e4 teknologioilla voi olla hubi, kuten USB-hubi. Aivan kuten yll\u00e4 mainittu toistin, my\u00f6sk\u00e4\u00e4n keskitin ei ymm\u00e4rr\u00e4 MAC-osoitteista, IP-osoitteista tai muusta datan sis\u00e4ll\u00f6st\u00e4 mit\u00e4\u00e4n.</p> <p>Hubiin kytketyt laitteet jakavat saman datav\u00e4yl\u00e4n. Vain yksi voi l\u00e4hett\u00e4\u00e4 viestin kerrallaan, muut odottavat vuoroaan. T\u00e4st\u00e4 k\u00e4ytet\u00e4\u00e4n termi\u00e4 vuorosuuntainen (eng. half-duplex). Kaikki saavat kaikkien l\u00e4hett\u00e4m\u00e4t viestit. Toisten viestej\u00e4 ei siis varsinaisesti tarvi salakuunnella: saat ne v\u00e4kisin. Ylemm\u00e4n tason protokolla hylk\u00e4\u00e4 viestit, jotka eiv\u00e4t kuulu vastaanottajalle. Vai hylk\u00e4\u00e4v\u00e4tk\u00f6 ... </p>"},{"location":"verkot/verkon_laitteet/#kytkin-taso-2","title":"Kytkin (Taso 2)","text":"<p>Kytkin (eng. switch) on muutoin samanlainen laatikko kuin keskitin, mutta k\u00e4ytt\u00e4\u00e4 viestien v\u00e4litt\u00e4miseen MAC-osoitteita eli tietokoneiden fyysisi\u00e4 osoitteita. N\u00e4in tietokoneelta toiselle l\u00e4hetetty viesti voidaan l\u00e4hett\u00e4\u00e4 vain vastaanottajan porttiin (vtr. keskitin, joka l\u00e4hett\u00e4\u00e4 kaikki viestit kaikille). K\u00e4yt\u00e4nn\u00f6ss\u00e4 kytkin on korvannut kotik\u00e4yt\u00f6ss\u00e4 kokonaisuudessa keskittimen. Keskittimess\u00e4 kaikki koneet jakavat saman datav\u00e4yl\u00e4n, kun taas kytkimess\u00e4 jokaisella koneella on oma datav\u00e4yl\u00e4ns\u00e4. Keskittimess\u00e4 on siis yksi t\u00f6rm\u00e4ysalue (eng. collision domain), kun taas kytkimess\u00e4 jokaisella koneella on oma t\u00f6rm\u00e4ysalueensa.</p> <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, mik\u00e4 on silta (eng. bridge) ja miten se eroaa, jos mitenk\u00e4\u00e4n, kytkimest\u00e4.</p> <p>Kytkin mahdollistaa my\u00f6s kaksisuuntaisen (eng. full-duplex) viestinn\u00e4n. T\u00e4m\u00e4 vaatii hieman selitt\u00e4mist\u00e4:</p> <ul> <li>Yksisuuntainen (eng. simplex)<ul> <li>Kaapeli tai muu kanava voi siirt\u00e4\u00e4 tietoa vain yhteen suuntaan. (Mik\u00e4li liikennett\u00e4 halutaan kumpaankin suuntaan, tulee rakentaa meno- ja paluukanava kahdesta kaapelista vierekk\u00e4in. T\u00e4t\u00e4 k\u00e4ytt\u00e4v\u00e4t optiset kuituyhteydet, ja kyseess\u00e4 on t\u00e4ll\u00f6in kaksisuuntainen yhteys, joka selitet\u00e4\u00e4n alla.)</li> </ul> </li> <li>Vuorosuuntainen (eng. half-duplex)<ul> <li>Kaapeli (tai muu) voi siirt\u00e4\u00e4 tietoa kumpaankin suuntaan, mutta vain yhteen suuntaan kerrallaan. Kuvittele yksikaistainen silta tai tunneli (n\u00e4it\u00e4 l\u00f6ytyy ainakin Islannista.) Keskittimen tapauksessa kaikki l\u00e4hiverkon tietokoneet vuorottelevat saman datav\u00e4yl\u00e4n k\u00e4yt\u00f6st\u00e4, mist\u00e4 syntyy v\u00e4kisinkin t\u00f6rm\u00e4ily\u00e4 (eng. collisions). Kuvittele liikenneympyr\u00e4, jossa saa olla kerrallaan vain yksi auto.</li> </ul> </li> <li>Kaksisuuntainen (eng. full-duplex)<ul> <li>Kaapeli (tai muu) voi siirt\u00e4\u00e4 tietoa kumpaankin suuntaan yht\u00e4 aikaa. Kuvittele kaksikaistainen tie. Kaksisuuntainen yhteys voi olla kerrallaan vain kahden tietokoneen v\u00e4liss\u00e4, joten jos keskustevia koneita on useita, kaksisuuntaisia yhteyksi\u00e4 tulee olla useita.</li> </ul> </li> </ul> <p>Teht\u00e4v\u00e4</p> <p>Kytkin mahdollistaa VLAN:ien (Virtual LAN) luomisen. Selvit\u00e4, mik\u00e4 on VLAN.</p> <p>Mik\u00e4li sinulla on kaksi 16-porttista kytkint\u00e4, niin voit ketjuttaa ne (eng. daisy chain) tavallisella parikaapelilla, jolloin sinulle j\u00e4\u00e4 <code>(16 - 1) * 2</code> eli 30 porttia k\u00e4ytett\u00e4v\u00e4ksi. Voit pit\u00e4\u00e4 30 pelaajan lanit! Useista kytkimist\u00e4 voi rakentaa my\u00f6s t\u00e4htikuvion verkon, jossa jokaisen sakaran p\u00e4\u00e4ss\u00e4 on kytkin. Lopputulos n\u00e4ytt\u00e4\u00e4 hieman lumihiutaleelta: .</p> <p>Osa kytkimist\u00e4 on hallittavia, joten niill\u00e4 on oma IP-osoite, johon voi kirjautua verkkoselaimella. Verkko-osoitteesta l\u00f6ytyv\u00e4st\u00e4 hallintapaneelista voi hallita asetuksia.</p> <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, onko MAC-osoite aina pysyv\u00e4sti sama yhdell\u00e4 laitteella, vai voiko tietokone v\u00e4itt\u00e4\u00e4 omaksi MAC-osoitteekseen jonkin toisen laitteen MAC-osoitteen - tai hatusta temmatun MAC-osoitteen.</p>"},{"location":"verkot/verkon_laitteet/#modeemi-taso-1","title":"Modeemi (Taso 1)","text":"<p>Modeemi (eng. modem, lyhenne sanasta modulator-demodulator), tai muunnin, on laite joka muuntaa digitaalisen signaalin eli OSI-mallin (tason 1) bitit analogiseksi signaaliksi eli s\u00e4hk\u00f6ksi, valoksi, radioaalloiksi, tai muuksi. Luonnollisesti laite osaa muuttaa my\u00f6s analoogisen signaalin takaisin digitaaliseksi, jotta paluukanava voi toimia. Tyypillisess\u00e4 kodissa voi olla kaapelimodeemi, ADSL, tai esimerkiksi 4G/5G-modeemi. Modeemilla otetaan yhteys Internet-palveluntarjoajaan (ISP), esimerkiksi KaisaNetiin tai Teliaan.</p> <pre><code>graph LR;\n    A[Digitaalinen] &lt;--&gt; B((Modeemi))\n    B &lt;--&gt; C[Analoginen]</code></pre> <p>Kuvio 1: Modeemin toiminta pelkistettyn\u00e4</p> <p>Warning</p> <p>Huomaa, ett\u00e4 modeemissa on l\u00e4ht\u00f6kohtaisesti vain yksi sis\u00e4\u00e4nmeno ja yksi ulostulo. Kaupassa myyt\u00e4v\u00e4 laite, esimerkiksi kaapelimodeemi, on yleens\u00e4 useita eri laitteita sis\u00e4lt\u00e4v\u00e4 kokonaisuus, johon kuuluu esimerkiksi 5-porttinen kytkin, langattoman verkon liitynt\u00e4piste (eng. Wireless Access Point, WAP), reititin, palomuuri, http-palvelin, DNS-palvelin, NAT, DHCP-palvelin ynn\u00e4 muuta.</p>"},{"location":"verkot/verkon_laitteet/#reititin-taso-3","title":"Reititin (Taso 3)","text":"<p>Reititin (eng. router) on laite, joka yhdist\u00e4\u00e4 eri verkkoja toisiinsa. Yll\u00e4 mainittuja kytkittimi\u00e4 voi ketjuttaa, mutta niiden tulee l\u00e4ht\u00f6kohtaisesti olla samaa tyyppi\u00e4, kuten Etherneti\u00e4, ja kytkenn\u00e4n lopputuloksesta muodostuu k\u00e4yt\u00e4nn\u00f6ss\u00e4 yksi iso verkko. Reititin mahdollistaa kesken\u00e4\u00e4n erilaisten verkkojen yhdist\u00e4misen toisiinsa - toki verkot voivat olla my\u00f6s samanlaisia. Reitittimen voi kytke\u00e4 my\u00f6s toiseen reitittimeen, ja reitittimist\u00e4 voi rakentaa suuren verkon, kuten vaikkapa Internetin. T\u00e4ll\u00f6in reititin voi yhdist\u00e4\u00e4 LAN:n ja WAN:n toisiinsa. Huomaa, ett\u00e4 reitittimess\u00e4 voi olla my\u00f6s enemm\u00e4n kuin 2 verkkokorttia, jolloin se voi yhdist\u00e4\u00e4 useita eri verkkoja yhteen t\u00e4htim\u00e4isesti.</p> <p>Huomaa, ett\u00e4 reitittimeen kiinni olevilla verkoilla on kullakin oma levitysviestialue (eng. broadcast domain). Eth\u00e4n sekoita t\u00e4t\u00e4 termi\u00e4 t\u00f6rm\u00e4ysalueeseen (eng. collision domain).</p> <pre><code>graph LR\n    subgraph net0[vasen verkko]\n        LA[Tietokone]\n        LB[Tietokone]\n        switch0[Kytkin]\n    end\n\n    subgraph net1[oikea verkko]\n        RA[Tietokone]\n        RB[Tietokone]\n        switch1[Kytkin]\n    end\n\n    subgraph reititin\n        eth0[Verkkokortti eth0]\n        eth1[Verkkokortti eth1]\n        eth0 ===|reititysprotokolla| eth1\n    end\n\n    LA &lt;--&gt; switch0\n    LB &lt;--&gt; switch0\n    switch0 &lt;--&gt; eth0\n    eth1 &lt;--&gt; switch1\n    switch1 &lt;--&gt; RA\n    switch1 &lt;--&gt; RB</code></pre> <p>Kuvio 2: Reititin yhdist\u00e4\u00e4 kaksi l\u00e4hiverkkoa</p> <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, kuinka Raspberry Pi:st\u00e4, eli tunnetusta yhden piirilevyn tietokoneesta, voi rakentaa kaksi langallista verkkoa yhdist\u00e4v\u00e4n reitittimen k\u00e4ytt\u00e4en OpenWrt Linux-distribuutiota. Yksi verkko kytket\u00e4\u00e4n Raspberry Pi:n Ethernet-verkkoporttiin, mutta mihin ihmeeseen toinen?</p> <p>Tyypillisesti kotiverkon reitittimeen (tai reititin-modeemiin) voi kirjautua verkkoselaimella samalla tavalla kuin hallittaviin kytkimiin. Verkko-osoitteesta l\u00f6ytyv\u00e4st\u00e4 hallintapaneelista voi s\u00e4\u00e4t\u00e4\u00e4 yleisesti DHCP-asetuksia, modeemin asetuksia, ja paljon muuta.</p> <p>Teht\u00e4v\u00e4</p> <p>Kuvittele tilanne, jossa sinulla on oikeasti vain modeemi, mutta ei reititint\u00e4. Kuinka monta tietokonetta voit kytke\u00e4 Internetiin? Mieti, mit\u00e4 tapahtuu jos kytket modeemista saapuvan Ethernet-kaapelin kytkimeen, ja kytket siihen 5 tietokonetta. Onko t\u00e4ll\u00e4 jotakin yht\u00e4l\u00e4isyyksi\u00e4 kotisi reititin-modeemin \"Bridge Mode\"-tilaan.</p>"},{"location":"verkot/verkon_laitteet/#palomuuri-taso-3-7","title":"Palomuuri (Taso 3-7)","text":"<p>Palomuuri (eng. firewall) on \"turvallisuus-tietoinen reititin\". Palomuuri voi toimia hyvinkin monella OSI-mallin tasolla, riippuen sen toteutuksesta. Palomuuri voi olla erillinen laite, tai sis\u00e4\u00e4nrakennettuna reititin-modeemiin, tai t\u00e4ysin ohjelmallinen. Ohjelmallisia palomuureja ovat esimerkiksi Windows Defender Firewall tai Linux-maailmasta tuttu UFW (Uncomplicated Firewall).</p> <p>Alemmin tason (3) palomuuri toimii yksinkertaisilla IP-osoite ja porttis\u00e4\u00e4nn\u00f6ille, jotka my\u00f6nt\u00e4v\u00e4t tai est\u00e4v\u00e4t p\u00e4\u00e4syn - englanniksi allow rules tai deny rules. S\u00e4\u00e4nn\u00f6ill\u00e4 on suunta joko sis\u00e4\u00e4n tai ulosp\u00e4in - englanniksi inbound tai outbound. Palomuuri voi esimerkiksi est\u00e4\u00e4 kaiken ulkopuolelta saapuvan liikenteen porttiin TCP/22. Ylimm\u00e4n tason palomuuri (7) ei tyydy tarkastelemaan IP-osoitteita vaan analysoi kuorman (eng- payload) sis\u00e4lt\u00f6\u00e4 tarkemmin. T\u00e4ll\u00f6in palomuuri voi noudattaa s\u00e4\u00e4nt\u00f6j\u00e4, jotka perustuvat HTTP-kyselyn sis\u00e4lt\u00f6\u00f6n.</p> <pre><code>graph LR\n    subgraph net0[kotiverkko]\n        WAP[WLAN-tukiasema]\n        C1[Tietokone]\n        C2[Tietokone]\n        switch[Kytkin]\n        subgraph mode[Reititin-modeemi]\n        router[Reititin]\n        firewall[Palomuuri]\n        modem[Modeemi]\n        end\n\n    end\n\n    subgraph net1[Internet]\n        switch1((Palveluntarjoajan laite))\n    end\n\n    C1 &lt;--&gt; switch\n    C2 &lt;--&gt; switch\n    WAP &lt;--&gt; switch\n    switch &lt;--&gt; firewall\n    firewall &lt;--&gt; router\n    router &lt;--&gt; modem\n    modem &lt;--&gt; net1\n</code></pre> <p>Kuvio 3: Reititin-modeemin sisukset, mukaan lukien palomuuri, piirrettyn\u00e4 auki. Kotiverkko on kytketty Internetiin palveluntarjoajan nime\u00e4m\u00e4tt\u00f6m\u00e4n laitteen l\u00e4pi.</p> <p>Teht\u00e4v\u00e4</p> <p>P\u00e4\u00e4ttele, mik\u00e4 tai mit\u00e4 laitteita palveluntarjoajan p\u00e4\u00e4ss\u00e4 on vastassa (Kuviossa 3.)</p>"}]}